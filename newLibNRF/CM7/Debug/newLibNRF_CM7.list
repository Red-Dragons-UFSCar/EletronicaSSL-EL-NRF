
newLibNRF_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fcc  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  08007264  08007264  00008264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073dc  080073dc  0000904c  2**0
                  CONTENTS
  4 .ARM          00000008  080073dc  080073dc  000083dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080073e4  080073e4  0000904c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073e4  080073e4  000083e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080073e8  080073e8  000083e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000004c  24000000  080073ec  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  2400004c  08007438  0000904c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240001a4  08007438  000091a4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000904c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013a6c  00000000  00000000  0000907a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026d3  00000000  00000000  0001cae6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e28  00000000  00000000  0001f1c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ad8  00000000  00000000  0001ffe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003a584  00000000  00000000  00020ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000132ff  00000000  00000000  0005b044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017f9a0  00000000  00000000  0006e343  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001edce3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003aac  00000000  00000000  001edd28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  001f17d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2400004c 	.word	0x2400004c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800724c 	.word	0x0800724c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000050 	.word	0x24000050
 80002d4:	0800724c 	.word	0x0800724c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005cc:	4b3d      	ldr	r3, [pc, #244]	@ (80006c4 <SystemInit+0xfc>)
 80005ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005d2:	4a3c      	ldr	r2, [pc, #240]	@ (80006c4 <SystemInit+0xfc>)
 80005d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005dc:	4b39      	ldr	r3, [pc, #228]	@ (80006c4 <SystemInit+0xfc>)
 80005de:	691b      	ldr	r3, [r3, #16]
 80005e0:	4a38      	ldr	r2, [pc, #224]	@ (80006c4 <SystemInit+0xfc>)
 80005e2:	f043 0310 	orr.w	r3, r3, #16
 80005e6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005e8:	4b37      	ldr	r3, [pc, #220]	@ (80006c8 <SystemInit+0x100>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f003 030f 	and.w	r3, r3, #15
 80005f0:	2b06      	cmp	r3, #6
 80005f2:	d807      	bhi.n	8000604 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005f4:	4b34      	ldr	r3, [pc, #208]	@ (80006c8 <SystemInit+0x100>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f023 030f 	bic.w	r3, r3, #15
 80005fc:	4a32      	ldr	r2, [pc, #200]	@ (80006c8 <SystemInit+0x100>)
 80005fe:	f043 0307 	orr.w	r3, r3, #7
 8000602:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000604:	4b31      	ldr	r3, [pc, #196]	@ (80006cc <SystemInit+0x104>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a30      	ldr	r2, [pc, #192]	@ (80006cc <SystemInit+0x104>)
 800060a:	f043 0301 	orr.w	r3, r3, #1
 800060e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000610:	4b2e      	ldr	r3, [pc, #184]	@ (80006cc <SystemInit+0x104>)
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000616:	4b2d      	ldr	r3, [pc, #180]	@ (80006cc <SystemInit+0x104>)
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	492c      	ldr	r1, [pc, #176]	@ (80006cc <SystemInit+0x104>)
 800061c:	4b2c      	ldr	r3, [pc, #176]	@ (80006d0 <SystemInit+0x108>)
 800061e:	4013      	ands	r3, r2
 8000620:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000622:	4b29      	ldr	r3, [pc, #164]	@ (80006c8 <SystemInit+0x100>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f003 0308 	and.w	r3, r3, #8
 800062a:	2b00      	cmp	r3, #0
 800062c:	d007      	beq.n	800063e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800062e:	4b26      	ldr	r3, [pc, #152]	@ (80006c8 <SystemInit+0x100>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f023 030f 	bic.w	r3, r3, #15
 8000636:	4a24      	ldr	r2, [pc, #144]	@ (80006c8 <SystemInit+0x100>)
 8000638:	f043 0307 	orr.w	r3, r3, #7
 800063c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800063e:	4b23      	ldr	r3, [pc, #140]	@ (80006cc <SystemInit+0x104>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000644:	4b21      	ldr	r3, [pc, #132]	@ (80006cc <SystemInit+0x104>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800064a:	4b20      	ldr	r3, [pc, #128]	@ (80006cc <SystemInit+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000650:	4b1e      	ldr	r3, [pc, #120]	@ (80006cc <SystemInit+0x104>)
 8000652:	4a20      	ldr	r2, [pc, #128]	@ (80006d4 <SystemInit+0x10c>)
 8000654:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000656:	4b1d      	ldr	r3, [pc, #116]	@ (80006cc <SystemInit+0x104>)
 8000658:	4a1f      	ldr	r2, [pc, #124]	@ (80006d8 <SystemInit+0x110>)
 800065a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800065c:	4b1b      	ldr	r3, [pc, #108]	@ (80006cc <SystemInit+0x104>)
 800065e:	4a1f      	ldr	r2, [pc, #124]	@ (80006dc <SystemInit+0x114>)
 8000660:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000662:	4b1a      	ldr	r3, [pc, #104]	@ (80006cc <SystemInit+0x104>)
 8000664:	2200      	movs	r2, #0
 8000666:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000668:	4b18      	ldr	r3, [pc, #96]	@ (80006cc <SystemInit+0x104>)
 800066a:	4a1c      	ldr	r2, [pc, #112]	@ (80006dc <SystemInit+0x114>)
 800066c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800066e:	4b17      	ldr	r3, [pc, #92]	@ (80006cc <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000674:	4b15      	ldr	r3, [pc, #84]	@ (80006cc <SystemInit+0x104>)
 8000676:	4a19      	ldr	r2, [pc, #100]	@ (80006dc <SystemInit+0x114>)
 8000678:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800067a:	4b14      	ldr	r3, [pc, #80]	@ (80006cc <SystemInit+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000680:	4b12      	ldr	r3, [pc, #72]	@ (80006cc <SystemInit+0x104>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a11      	ldr	r2, [pc, #68]	@ (80006cc <SystemInit+0x104>)
 8000686:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800068a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800068c:	4b0f      	ldr	r3, [pc, #60]	@ (80006cc <SystemInit+0x104>)
 800068e:	2200      	movs	r2, #0
 8000690:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000692:	4b13      	ldr	r3, [pc, #76]	@ (80006e0 <SystemInit+0x118>)
 8000694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000696:	4a12      	ldr	r2, [pc, #72]	@ (80006e0 <SystemInit+0x118>)
 8000698:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800069c:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800069e:	4b11      	ldr	r3, [pc, #68]	@ (80006e4 <SystemInit+0x11c>)
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	4b11      	ldr	r3, [pc, #68]	@ (80006e8 <SystemInit+0x120>)
 80006a4:	4013      	ands	r3, r2
 80006a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80006aa:	d202      	bcs.n	80006b2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	@ (80006ec <SystemInit+0x124>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006b2:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <SystemInit+0x128>)
 80006b4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80006b8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ba:	bf00      	nop
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	e000ed00 	.word	0xe000ed00
 80006c8:	52002000 	.word	0x52002000
 80006cc:	58024400 	.word	0x58024400
 80006d0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006d4:	02020200 	.word	0x02020200
 80006d8:	01ff0000 	.word	0x01ff0000
 80006dc:	01010280 	.word	0x01010280
 80006e0:	580000c0 	.word	0x580000c0
 80006e4:	5c001000 	.word	0x5c001000
 80006e8:	ffff0000 	.word	0xffff0000
 80006ec:	51008108 	.word	0x51008108
 80006f0:	52004000 	.word	0x52004000

080006f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b08a      	sub	sp, #40	@ 0x28
 80006f8:	af02      	add	r7, sp, #8
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80006fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80006fe:	61fb      	str	r3, [r7, #28]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000700:	bf00      	nop
 8000702:	4b48      	ldr	r3, [pc, #288]	@ (8000824 <main+0x130>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800070a:	2b00      	cmp	r3, #0
 800070c:	d004      	beq.n	8000718 <main+0x24>
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	1e5a      	subs	r2, r3, #1
 8000712:	61fa      	str	r2, [r7, #28]
 8000714:	2b00      	cmp	r3, #0
 8000716:	dcf4      	bgt.n	8000702 <main+0xe>
  if ( timeout < 0 )
 8000718:	69fb      	ldr	r3, [r7, #28]
 800071a:	2b00      	cmp	r3, #0
 800071c:	da01      	bge.n	8000722 <main+0x2e>
  {
  Error_Handler();
 800071e:	f000 fa75 	bl	8000c0c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000722:	f001 f909 	bl	8001938 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000726:	f000 f88b 	bl	8000840 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800072a:	f000 f905 	bl	8000938 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800072e:	4b3d      	ldr	r3, [pc, #244]	@ (8000824 <main+0x130>)
 8000730:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000734:	4a3b      	ldr	r2, [pc, #236]	@ (8000824 <main+0x130>)
 8000736:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800073a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800073e:	4b39      	ldr	r3, [pc, #228]	@ (8000824 <main+0x130>)
 8000740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000744:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000748:	603b      	str	r3, [r7, #0]
 800074a:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800074c:	2000      	movs	r0, #0
 800074e:	f001 fd2d 	bl	80021ac <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000752:	2100      	movs	r1, #0
 8000754:	2000      	movs	r0, #0
 8000756:	f001 fd43 	bl	80021e0 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800075a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800075e:	61fb      	str	r3, [r7, #28]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000760:	bf00      	nop
 8000762:	4b30      	ldr	r3, [pc, #192]	@ (8000824 <main+0x130>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800076a:	2b00      	cmp	r3, #0
 800076c:	d104      	bne.n	8000778 <main+0x84>
 800076e:	69fb      	ldr	r3, [r7, #28]
 8000770:	1e5a      	subs	r2, r3, #1
 8000772:	61fa      	str	r2, [r7, #28]
 8000774:	2b00      	cmp	r3, #0
 8000776:	dcf4      	bgt.n	8000762 <main+0x6e>
if ( timeout < 0 )
 8000778:	69fb      	ldr	r3, [r7, #28]
 800077a:	2b00      	cmp	r3, #0
 800077c:	da01      	bge.n	8000782 <main+0x8e>
{
Error_Handler();
 800077e:	f000 fa45 	bl	8000c0c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000782:	f000 f95f 	bl	8000a44 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000786:	f000 f907 	bl	8000998 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 800078a:	2000      	movs	r0, #0
 800078c:	f000 ff0c 	bl	80015a8 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 8000790:	2001      	movs	r0, #1
 8000792:	f000 ff09 	bl	80015a8 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000796:	2002      	movs	r0, #2
 8000798:	f000 ff06 	bl	80015a8 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 800079c:	2101      	movs	r1, #1
 800079e:	2000      	movs	r0, #0
 80007a0:	f000 ff78 	bl	8001694 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80007a4:	4b20      	ldr	r3, [pc, #128]	@ (8000828 <main+0x134>)
 80007a6:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007aa:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80007ac:	4b1e      	ldr	r3, [pc, #120]	@ (8000828 <main+0x134>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80007b2:	4b1d      	ldr	r3, [pc, #116]	@ (8000828 <main+0x134>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80007b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000828 <main+0x134>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80007be:	4b1a      	ldr	r3, [pc, #104]	@ (8000828 <main+0x134>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80007c4:	4918      	ldr	r1, [pc, #96]	@ (8000828 <main+0x134>)
 80007c6:	2000      	movs	r0, #0
 80007c8:	f000 fff4 	bl	80017b4 <BSP_COM_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <main+0xe2>
  {
    Error_Handler();
 80007d2:	f000 fa1b 	bl	8000c0c <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  	  uint8_t counter = 0;
 80007d6:	2300      	movs	r3, #0
 80007d8:	76fb      	strb	r3, [r7, #27]
  	  NRF24 transmissor;
  	  // CS, CE;
  	  Set_NRF24(&transmissor, &hspi1, GPIOE, GPIO_PIN_15, GPIOB, GPIO_PIN_11);
 80007da:	1d38      	adds	r0, r7, #4
 80007dc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80007e0:	9301      	str	r3, [sp, #4]
 80007e2:	4b12      	ldr	r3, [pc, #72]	@ (800082c <main+0x138>)
 80007e4:	9300      	str	r3, [sp, #0]
 80007e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80007ea:	4a11      	ldr	r2, [pc, #68]	@ (8000830 <main+0x13c>)
 80007ec:	4911      	ldr	r1, [pc, #68]	@ (8000834 <main+0x140>)
 80007ee:	f000 fa47 	bl	8000c80 <Set_NRF24>
  	  Tx_mode(&transmissor,TxAddress);
 80007f2:	1d3b      	adds	r3, r7, #4
 80007f4:	4910      	ldr	r1, [pc, #64]	@ (8000838 <main+0x144>)
 80007f6:	4618      	mov	r0, r3
 80007f8:	f000 fdc5 	bl	8001386 <Tx_mode>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ret = NRF24_TransmitAndWait(&transmissor,txData,sizeof(txData));
 80007fc:	1d3b      	adds	r3, r7, #4
 80007fe:	2218      	movs	r2, #24
 8000800:	490e      	ldr	r1, [pc, #56]	@ (800083c <main+0x148>)
 8000802:	4618      	mov	r0, r3
 8000804:	f000 fd76 	bl	80012f4 <NRF24_TransmitAndWait>
 8000808:	4603      	mov	r3, r0
 800080a:	76bb      	strb	r3, [r7, #26]


	  if(ret == NRF_OK){
 800080c:	7ebb      	ldrb	r3, [r7, #26]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d103      	bne.n	800081a <main+0x126>
		  HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_1);
 8000812:	2102      	movs	r1, #2
 8000814:	4806      	ldr	r0, [pc, #24]	@ (8000830 <main+0x13c>)
 8000816:	f001 fcae 	bl	8002176 <HAL_GPIO_TogglePin>
	  }

	  HAL_Delay(400);
 800081a:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800081e:	f001 f91d 	bl	8001a5c <HAL_Delay>
	  ret = NRF24_TransmitAndWait(&transmissor,txData,sizeof(txData));
 8000822:	e7eb      	b.n	80007fc <main+0x108>
 8000824:	58024400 	.word	0x58024400
 8000828:	24000068 	.word	0x24000068
 800082c:	58020400 	.word	0x58020400
 8000830:	58021000 	.word	0x58021000
 8000834:	24000078 	.word	0x24000078
 8000838:	24000008 	.word	0x24000008
 800083c:	24000010 	.word	0x24000010

08000840 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b09c      	sub	sp, #112	@ 0x70
 8000844:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000846:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800084a:	224c      	movs	r2, #76	@ 0x4c
 800084c:	2100      	movs	r1, #0
 800084e:	4618      	mov	r0, r3
 8000850:	f006 fcd0 	bl	80071f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000854:	1d3b      	adds	r3, r7, #4
 8000856:	2220      	movs	r2, #32
 8000858:	2100      	movs	r1, #0
 800085a:	4618      	mov	r0, r3
 800085c:	f006 fcca 	bl	80071f4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000860:	2004      	movs	r0, #4
 8000862:	f001 fcd1 	bl	8002208 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000866:	2300      	movs	r3, #0
 8000868:	603b      	str	r3, [r7, #0]
 800086a:	4b31      	ldr	r3, [pc, #196]	@ (8000930 <SystemClock_Config+0xf0>)
 800086c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800086e:	4a30      	ldr	r2, [pc, #192]	@ (8000930 <SystemClock_Config+0xf0>)
 8000870:	f023 0301 	bic.w	r3, r3, #1
 8000874:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000876:	4b2e      	ldr	r3, [pc, #184]	@ (8000930 <SystemClock_Config+0xf0>)
 8000878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	603b      	str	r3, [r7, #0]
 8000880:	4b2c      	ldr	r3, [pc, #176]	@ (8000934 <SystemClock_Config+0xf4>)
 8000882:	699b      	ldr	r3, [r3, #24]
 8000884:	4a2b      	ldr	r2, [pc, #172]	@ (8000934 <SystemClock_Config+0xf4>)
 8000886:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800088a:	6193      	str	r3, [r2, #24]
 800088c:	4b29      	ldr	r3, [pc, #164]	@ (8000934 <SystemClock_Config+0xf4>)
 800088e:	699b      	ldr	r3, [r3, #24]
 8000890:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000894:	603b      	str	r3, [r7, #0]
 8000896:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000898:	bf00      	nop
 800089a:	4b26      	ldr	r3, [pc, #152]	@ (8000934 <SystemClock_Config+0xf4>)
 800089c:	699b      	ldr	r3, [r3, #24]
 800089e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80008a6:	d1f8      	bne.n	800089a <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008a8:	2302      	movs	r3, #2
 80008aa:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80008ac:	2301      	movs	r3, #1
 80008ae:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008b0:	2340      	movs	r3, #64	@ 0x40
 80008b2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008b4:	2302      	movs	r3, #2
 80008b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008b8:	2300      	movs	r3, #0
 80008ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008bc:	2304      	movs	r3, #4
 80008be:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 25;
 80008c0:	2319      	movs	r3, #25
 80008c2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008c4:	2302      	movs	r3, #2
 80008c6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80008c8:	2305      	movs	r3, #5
 80008ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008cc:	2302      	movs	r3, #2
 80008ce:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008d0:	230c      	movs	r3, #12
 80008d2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008d4:	2300      	movs	r3, #0
 80008d6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008d8:	2300      	movs	r3, #0
 80008da:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008e0:	4618      	mov	r0, r3
 80008e2:	f001 fceb 	bl	80022bc <HAL_RCC_OscConfig>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80008ec:	f000 f98e 	bl	8000c0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f0:	233f      	movs	r3, #63	@ 0x3f
 80008f2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008f4:	2303      	movs	r3, #3
 80008f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008f8:	2300      	movs	r3, #0
 80008fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008fc:	2300      	movs	r3, #0
 80008fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000900:	2340      	movs	r3, #64	@ 0x40
 8000902:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000904:	2340      	movs	r3, #64	@ 0x40
 8000906:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000908:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800090c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800090e:	2340      	movs	r3, #64	@ 0x40
 8000910:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000912:	1d3b      	adds	r3, r7, #4
 8000914:	2102      	movs	r1, #2
 8000916:	4618      	mov	r0, r3
 8000918:	f002 f92a 	bl	8002b70 <HAL_RCC_ClockConfig>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000922:	f000 f973 	bl	8000c0c <Error_Handler>
  }
}
 8000926:	bf00      	nop
 8000928:	3770      	adds	r7, #112	@ 0x70
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	58000400 	.word	0x58000400
 8000934:	58024800 	.word	0x58024800

08000938 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b0b0      	sub	sp, #192	@ 0xc0
 800093c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800093e:	463b      	mov	r3, r7
 8000940:	22c0      	movs	r2, #192	@ 0xc0
 8000942:	2100      	movs	r1, #0
 8000944:	4618      	mov	r0, r3
 8000946:	f006 fc55 	bl	80071f4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3|RCC_PERIPHCLK_SPI1;
 800094a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800094e:	f04f 0300 	mov.w	r3, #0
 8000952:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000956:	2304      	movs	r3, #4
 8000958:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 800095a:	2309      	movs	r3, #9
 800095c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 800095e:	2302      	movs	r3, #2
 8000960:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000962:	2302      	movs	r3, #2
 8000964:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000966:	2302      	movs	r3, #2
 8000968:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800096a:	23c0      	movs	r3, #192	@ 0xc0
 800096c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800096e:	2320      	movs	r3, #32
 8000970:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 8000972:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000976:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8000978:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800097c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800097e:	463b      	mov	r3, r7
 8000980:	4618      	mov	r0, r3
 8000982:	f002 fc81 	bl	8003288 <HAL_RCCEx_PeriphCLKConfig>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 800098c:	f000 f93e 	bl	8000c0c <Error_Handler>
  }
}
 8000990:	bf00      	nop
 8000992:	37c0      	adds	r7, #192	@ 0xc0
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}

08000998 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800099c:	4b27      	ldr	r3, [pc, #156]	@ (8000a3c <MX_SPI1_Init+0xa4>)
 800099e:	4a28      	ldr	r2, [pc, #160]	@ (8000a40 <MX_SPI1_Init+0xa8>)
 80009a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009a2:	4b26      	ldr	r3, [pc, #152]	@ (8000a3c <MX_SPI1_Init+0xa4>)
 80009a4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80009a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009aa:	4b24      	ldr	r3, [pc, #144]	@ (8000a3c <MX_SPI1_Init+0xa4>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009b0:	4b22      	ldr	r3, [pc, #136]	@ (8000a3c <MX_SPI1_Init+0xa4>)
 80009b2:	2207      	movs	r2, #7
 80009b4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009b6:	4b21      	ldr	r3, [pc, #132]	@ (8000a3c <MX_SPI1_Init+0xa4>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009bc:	4b1f      	ldr	r3, [pc, #124]	@ (8000a3c <MX_SPI1_Init+0xa4>)
 80009be:	2200      	movs	r2, #0
 80009c0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009c2:	4b1e      	ldr	r3, [pc, #120]	@ (8000a3c <MX_SPI1_Init+0xa4>)
 80009c4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80009c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80009ca:	4b1c      	ldr	r3, [pc, #112]	@ (8000a3c <MX_SPI1_Init+0xa4>)
 80009cc:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 80009d0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009d2:	4b1a      	ldr	r3, [pc, #104]	@ (8000a3c <MX_SPI1_Init+0xa4>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009d8:	4b18      	ldr	r3, [pc, #96]	@ (8000a3c <MX_SPI1_Init+0xa4>)
 80009da:	2200      	movs	r2, #0
 80009dc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009de:	4b17      	ldr	r3, [pc, #92]	@ (8000a3c <MX_SPI1_Init+0xa4>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80009e4:	4b15      	ldr	r3, [pc, #84]	@ (8000a3c <MX_SPI1_Init+0xa4>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80009ea:	4b14      	ldr	r3, [pc, #80]	@ (8000a3c <MX_SPI1_Init+0xa4>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80009f0:	4b12      	ldr	r3, [pc, #72]	@ (8000a3c <MX_SPI1_Init+0xa4>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80009f6:	4b11      	ldr	r3, [pc, #68]	@ (8000a3c <MX_SPI1_Init+0xa4>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80009fc:	4b0f      	ldr	r3, [pc, #60]	@ (8000a3c <MX_SPI1_Init+0xa4>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a02:	4b0e      	ldr	r3, [pc, #56]	@ (8000a3c <MX_SPI1_Init+0xa4>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000a08:	4b0c      	ldr	r3, [pc, #48]	@ (8000a3c <MX_SPI1_Init+0xa4>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000a0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a3c <MX_SPI1_Init+0xa4>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000a14:	4b09      	ldr	r3, [pc, #36]	@ (8000a3c <MX_SPI1_Init+0xa4>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_ENABLE;
 8000a1a:	4b08      	ldr	r3, [pc, #32]	@ (8000a3c <MX_SPI1_Init+0xa4>)
 8000a1c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000a20:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000a22:	4b06      	ldr	r3, [pc, #24]	@ (8000a3c <MX_SPI1_Init+0xa4>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a28:	4804      	ldr	r0, [pc, #16]	@ (8000a3c <MX_SPI1_Init+0xa4>)
 8000a2a:	f004 fa59 	bl	8004ee0 <HAL_SPI_Init>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000a34:	f000 f8ea 	bl	8000c0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	24000078 	.word	0x24000078
 8000a40:	40013000 	.word	0x40013000

08000a44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b08a      	sub	sp, #40	@ 0x28
 8000a48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4a:	f107 0314 	add.w	r3, r7, #20
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	605a      	str	r2, [r3, #4]
 8000a54:	609a      	str	r2, [r3, #8]
 8000a56:	60da      	str	r2, [r3, #12]
 8000a58:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a5a:	4b66      	ldr	r3, [pc, #408]	@ (8000bf4 <MX_GPIO_Init+0x1b0>)
 8000a5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a60:	4a64      	ldr	r2, [pc, #400]	@ (8000bf4 <MX_GPIO_Init+0x1b0>)
 8000a62:	f043 0304 	orr.w	r3, r3, #4
 8000a66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a6a:	4b62      	ldr	r3, [pc, #392]	@ (8000bf4 <MX_GPIO_Init+0x1b0>)
 8000a6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a70:	f003 0304 	and.w	r3, r3, #4
 8000a74:	613b      	str	r3, [r7, #16]
 8000a76:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a78:	4b5e      	ldr	r3, [pc, #376]	@ (8000bf4 <MX_GPIO_Init+0x1b0>)
 8000a7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a7e:	4a5d      	ldr	r2, [pc, #372]	@ (8000bf4 <MX_GPIO_Init+0x1b0>)
 8000a80:	f043 0301 	orr.w	r3, r3, #1
 8000a84:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a88:	4b5a      	ldr	r3, [pc, #360]	@ (8000bf4 <MX_GPIO_Init+0x1b0>)
 8000a8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a8e:	f003 0301 	and.w	r3, r3, #1
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a96:	4b57      	ldr	r3, [pc, #348]	@ (8000bf4 <MX_GPIO_Init+0x1b0>)
 8000a98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a9c:	4a55      	ldr	r2, [pc, #340]	@ (8000bf4 <MX_GPIO_Init+0x1b0>)
 8000a9e:	f043 0310 	orr.w	r3, r3, #16
 8000aa2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000aa6:	4b53      	ldr	r3, [pc, #332]	@ (8000bf4 <MX_GPIO_Init+0x1b0>)
 8000aa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aac:	f003 0310 	and.w	r3, r3, #16
 8000ab0:	60bb      	str	r3, [r7, #8]
 8000ab2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab4:	4b4f      	ldr	r3, [pc, #316]	@ (8000bf4 <MX_GPIO_Init+0x1b0>)
 8000ab6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aba:	4a4e      	ldr	r2, [pc, #312]	@ (8000bf4 <MX_GPIO_Init+0x1b0>)
 8000abc:	f043 0302 	orr.w	r3, r3, #2
 8000ac0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ac4:	4b4b      	ldr	r3, [pc, #300]	@ (8000bf4 <MX_GPIO_Init+0x1b0>)
 8000ac6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aca:	f003 0302 	and.w	r3, r3, #2
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ad2:	4b48      	ldr	r3, [pc, #288]	@ (8000bf4 <MX_GPIO_Init+0x1b0>)
 8000ad4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ad8:	4a46      	ldr	r2, [pc, #280]	@ (8000bf4 <MX_GPIO_Init+0x1b0>)
 8000ada:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ade:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ae2:	4b44      	ldr	r3, [pc, #272]	@ (8000bf4 <MX_GPIO_Init+0x1b0>)
 8000ae4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ae8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000aec:	603b      	str	r3, [r7, #0]
 8000aee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15|GPIO_PIN_1, GPIO_PIN_RESET);
 8000af0:	2200      	movs	r2, #0
 8000af2:	f248 0102 	movw	r1, #32770	@ 0x8002
 8000af6:	4840      	ldr	r0, [pc, #256]	@ (8000bf8 <MX_GPIO_Init+0x1b4>)
 8000af8:	f001 fb24 	bl	8002144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(tCE_GPIO_Port, tCE_Pin, GPIO_PIN_RESET);
 8000afc:	2200      	movs	r2, #0
 8000afe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000b02:	483e      	ldr	r0, [pc, #248]	@ (8000bfc <MX_GPIO_Init+0x1b8>)
 8000b04:	f001 fb1e 	bl	8002144 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000b08:	2332      	movs	r3, #50	@ 0x32
 8000b0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b14:	2300      	movs	r3, #0
 8000b16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b18:	230b      	movs	r3, #11
 8000b1a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	4619      	mov	r1, r3
 8000b22:	4837      	ldr	r0, [pc, #220]	@ (8000c00 <MX_GPIO_Init+0x1bc>)
 8000b24:	f001 f95e 	bl	8001de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000b28:	2386      	movs	r3, #134	@ 0x86
 8000b2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b34:	2300      	movs	r3, #0
 8000b36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b38:	230b      	movs	r3, #11
 8000b3a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3c:	f107 0314 	add.w	r3, r7, #20
 8000b40:	4619      	mov	r1, r3
 8000b42:	4830      	ldr	r0, [pc, #192]	@ (8000c04 <MX_GPIO_Init+0x1c0>)
 8000b44:	f001 f94e 	bl	8001de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE15 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1;
 8000b48:	f248 0302 	movw	r3, #32770	@ 0x8002
 8000b4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b56:	2300      	movs	r3, #0
 8000b58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b5a:	f107 0314 	add.w	r3, r7, #20
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4825      	ldr	r0, [pc, #148]	@ (8000bf8 <MX_GPIO_Init+0x1b4>)
 8000b62:	f001 f93f 	bl	8001de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : tCE_Pin */
  GPIO_InitStruct.Pin = tCE_Pin;
 8000b66:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000b6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b74:	2300      	movs	r3, #0
 8000b76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(tCE_GPIO_Port, &GPIO_InitStruct);
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	481f      	ldr	r0, [pc, #124]	@ (8000bfc <MX_GPIO_Init+0x1b8>)
 8000b80:	f001 f930 	bl	8001de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b84:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b92:	2300      	movs	r3, #0
 8000b94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b96:	230b      	movs	r3, #11
 8000b98:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b9a:	f107 0314 	add.w	r3, r7, #20
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4816      	ldr	r0, [pc, #88]	@ (8000bfc <MX_GPIO_Init+0x1b8>)
 8000ba2:	f001 f91f 	bl	8001de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000ba6:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000baa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bac:	2302      	movs	r3, #2
 8000bae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000bb8:	230a      	movs	r3, #10
 8000bba:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bbc:	f107 0314 	add.w	r3, r7, #20
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4810      	ldr	r0, [pc, #64]	@ (8000c04 <MX_GPIO_Init+0x1c0>)
 8000bc4:	f001 f90e 	bl	8001de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000bc8:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000bcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bda:	230b      	movs	r3, #11
 8000bdc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bde:	f107 0314 	add.w	r3, r7, #20
 8000be2:	4619      	mov	r1, r3
 8000be4:	4808      	ldr	r0, [pc, #32]	@ (8000c08 <MX_GPIO_Init+0x1c4>)
 8000be6:	f001 f8fd 	bl	8001de4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bea:	bf00      	nop
 8000bec:	3728      	adds	r7, #40	@ 0x28
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	58024400 	.word	0x58024400
 8000bf8:	58021000 	.word	0x58021000
 8000bfc:	58020400 	.word	0x58020400
 8000c00:	58020800 	.word	0x58020800
 8000c04:	58020000 	.word	0x58020000
 8000c08:	58021800 	.word	0x58021800

08000c0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c10:	b672      	cpsid	i
}
 8000c12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c14:	bf00      	nop
 8000c16:	e7fd      	b.n	8000c14 <Error_Handler+0x8>

08000c18 <wait>:
uint16_t NRF_CE_Pin;//Pino do CE do NRF
uint32_t CPU_Freq = 0x00; //Variável para salvar a frequência da CPU
int current_mode = NRF_MODE_POWERDOWN; // Modo atual do NRF


void wait(uint64_t us) {
 8000c18:	b5b0      	push	{r4, r5, r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	e9c7 0100 	strd	r0, r1, [r7]
	uint32_t volatile cycles = CPU_Freq * us / 1000000; //Quantos ciclos de CPU deverão ser esperados para alcancar tal tempo
 8000c22:	4915      	ldr	r1, [pc, #84]	@ (8000c78 <wait+0x60>)
 8000c24:	6809      	ldr	r1, [r1, #0]
 8000c26:	2000      	movs	r0, #0
 8000c28:	460a      	mov	r2, r1
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	6839      	ldr	r1, [r7, #0]
 8000c2e:	fb03 f001 	mul.w	r0, r3, r1
 8000c32:	6879      	ldr	r1, [r7, #4]
 8000c34:	fb02 f101 	mul.w	r1, r2, r1
 8000c38:	4401      	add	r1, r0
 8000c3a:	6838      	ldr	r0, [r7, #0]
 8000c3c:	fba0 4502 	umull	r4, r5, r0, r2
 8000c40:	194b      	adds	r3, r1, r5
 8000c42:	461d      	mov	r5, r3
 8000c44:	4a0d      	ldr	r2, [pc, #52]	@ (8000c7c <wait+0x64>)
 8000c46:	f04f 0300 	mov.w	r3, #0
 8000c4a:	4620      	mov	r0, r4
 8000c4c:	4629      	mov	r1, r5
 8000c4e:	f7ff fb43 	bl	80002d8 <__aeabi_uldivmod>
 8000c52:	4602      	mov	r2, r0
 8000c54:	460b      	mov	r3, r1
 8000c56:	4613      	mov	r3, r2
 8000c58:	60fb      	str	r3, [r7, #12]
	uint32_t volatile current = 0; //Quantos se passaram
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60bb      	str	r3, [r7, #8]
	while (current <= cycles) {
 8000c5e:	e002      	b.n	8000c66 <wait+0x4e>
		current++;
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	3301      	adds	r3, #1
 8000c64:	60bb      	str	r3, [r7, #8]
	while (current <= cycles) {
 8000c66:	68ba      	ldr	r2, [r7, #8]
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	d9f8      	bls.n	8000c60 <wait+0x48>
	}
}
 8000c6e:	bf00      	nop
 8000c70:	bf00      	nop
 8000c72:	3710      	adds	r7, #16
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bdb0      	pop	{r4, r5, r7, pc}
 8000c78:	24000100 	.word	0x24000100
 8000c7c:	000f4240 	.word	0x000f4240

08000c80 <Set_NRF24>:

void Set_NRF24(NRF24 *nrf, SPI_HandleTypeDef *handle, GPIO_TypeDef *PortCS,
		uint16_t PinCS, GPIO_TypeDef *PortCE, uint16_t PinCE) {
 8000c80:	b480      	push	{r7}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	60f8      	str	r0, [r7, #12]
 8000c88:	60b9      	str	r1, [r7, #8]
 8000c8a:	607a      	str	r2, [r7, #4]
 8000c8c:	807b      	strh	r3, [r7, #2]
	nrf->spiHandle = handle;
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	68ba      	ldr	r2, [r7, #8]
 8000c92:	601a      	str	r2, [r3, #0]
	nrf->csPinBank = PortCS;
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	605a      	str	r2, [r3, #4]
	nrf->cePinBank = PortCE;
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	69ba      	ldr	r2, [r7, #24]
 8000c9e:	609a      	str	r2, [r3, #8]
	nrf->csPin = PinCS;
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	887a      	ldrh	r2, [r7, #2]
 8000ca4:	819a      	strh	r2, [r3, #12]
	nrf->cePin = PinCE;
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	8bba      	ldrh	r2, [r7, #28]
 8000caa:	81da      	strh	r2, [r3, #14]
	nrf->mode = NRF_MODE_POWERDOWN;
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	2200      	movs	r2, #0
 8000cb0:	821a      	strh	r2, [r3, #16]
}
 8000cb2:	bf00      	nop
 8000cb4:	3714      	adds	r7, #20
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr

08000cbe <NRF24_SendCommand>:

//nao sei se vc esqueceu ou tinha a intencao de mudar msm mas coloquei
NRF_Status NRF24_SendCommand(NRF24 *nrf, uint8_t cmd) {
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b086      	sub	sp, #24
 8000cc2:	af02      	add	r7, sp, #8
 8000cc4:	6078      	str	r0, [r7, #4]
 8000cc6:	460b      	mov	r3, r1
 8000cc8:	70fb      	strb	r3, [r7, #3]
	NRF_Status ret = NRF_OK;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	73fb      	strb	r3, [r7, #15]
	uint8_t status;

	HAL_GPIO_WritePin(nrf->csPinBank, nrf->csPin, GPIO_PIN_RESET); //csn_reset()
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6858      	ldr	r0, [r3, #4]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	899b      	ldrh	r3, [r3, #12]
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	4619      	mov	r1, r3
 8000cda:	f001 fa33 	bl	8002144 <HAL_GPIO_WritePin>
	ret = (NRF_Status) HAL_SPI_TransmitReceive(nrf->spiHandle, &cmd, &status, 1,
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6818      	ldr	r0, [r3, #0]
 8000ce2:	f107 020e 	add.w	r2, r7, #14
 8000ce6:	1cf9      	adds	r1, r7, #3
 8000ce8:	2303      	movs	r3, #3
 8000cea:	9300      	str	r3, [sp, #0]
 8000cec:	2301      	movs	r3, #1
 8000cee:	f004 fe7b 	bl	80059e8 <HAL_SPI_TransmitReceive>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	73fb      	strb	r3, [r7, #15]
			NRF_SPI_TIMEOUT); //Envia o comando e retorna o status ********************************************
	if (ret != NRF_OK) { //Verifica se o comando foi enviado corretamente
 8000cf6:	7bfb      	ldrb	r3, [r7, #15]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <NRF24_SendCommand+0x42>
		return ret;
 8000cfc:	7bfb      	ldrb	r3, [r7, #15]
 8000cfe:	e008      	b.n	8000d12 <NRF24_SendCommand+0x54>
	}
	HAL_GPIO_WritePin(nrf->csPinBank, nrf->csPin, GPIO_PIN_SET); //csn_set()
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	6858      	ldr	r0, [r3, #4]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	899b      	ldrh	r3, [r3, #12]
 8000d08:	2201      	movs	r2, #1
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	f001 fa1a 	bl	8002144 <HAL_GPIO_WritePin>

	return ret;
 8000d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3710      	adds	r7, #16
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <NRF24_SendWriteCommand>:

NRF_Status NRF24_SendWriteCommand(NRF24 *nrf, uint8_t cmd, uint8_t *write,
		uint8_t length) {
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b088      	sub	sp, #32
 8000d1e:	af02      	add	r7, sp, #8
 8000d20:	60f8      	str	r0, [r7, #12]
 8000d22:	607a      	str	r2, [r7, #4]
 8000d24:	461a      	mov	r2, r3
 8000d26:	460b      	mov	r3, r1
 8000d28:	72fb      	strb	r3, [r7, #11]
 8000d2a:	4613      	mov	r3, r2
 8000d2c:	72bb      	strb	r3, [r7, #10]
	NRF_Status ret = NRF_OK;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	75fb      	strb	r3, [r7, #23]
	uint8_t status;

	HAL_GPIO_WritePin(nrf->csPinBank, nrf->csPin, GPIO_PIN_RESET); //seleciona o dispositivo
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	6858      	ldr	r0, [r3, #4]
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	899b      	ldrh	r3, [r3, #12]
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	f001 fa01 	bl	8002144 <HAL_GPIO_WritePin>
	ret = (NRF_Status) HAL_SPI_TransmitReceive(nrf->spiHandle, &cmd, &status, 1,
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	6818      	ldr	r0, [r3, #0]
 8000d46:	f107 0216 	add.w	r2, r7, #22
 8000d4a:	f107 010b 	add.w	r1, r7, #11
 8000d4e:	230a      	movs	r3, #10
 8000d50:	9300      	str	r3, [sp, #0]
 8000d52:	2301      	movs	r3, #1
 8000d54:	f004 fe48 	bl	80059e8 <HAL_SPI_TransmitReceive>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	75fb      	strb	r3, [r7, #23]
	NRF_SPI_TIMEOUT_TIME);
	if(ret != NRF_OK){
 8000d5c:	7dfb      	ldrb	r3, [r7, #23]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d009      	beq.n	8000d76 <NRF24_SendWriteCommand+0x5c>
		HAL_GPIO_WritePin(nrf->csPinBank, nrf->csPin, GPIO_PIN_SET);
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	6858      	ldr	r0, [r3, #4]
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	899b      	ldrh	r3, [r3, #12]
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	f001 f9e9 	bl	8002144 <HAL_GPIO_WritePin>
		return ret;
 8000d72:	7dfb      	ldrb	r3, [r7, #23]
 8000d74:	e012      	b.n	8000d9c <NRF24_SendWriteCommand+0x82>
	}
	ret = (NRF_Status) HAL_SPI_Transmit(nrf->spiHandle, write, length,
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	6818      	ldr	r0, [r3, #0]
 8000d7a:	7abb      	ldrb	r3, [r7, #10]
 8000d7c:	b29a      	uxth	r2, r3
 8000d7e:	230a      	movs	r3, #10
 8000d80:	6879      	ldr	r1, [r7, #4]
 8000d82:	f004 f9d1 	bl	8005128 <HAL_SPI_Transmit>
 8000d86:	4603      	mov	r3, r0
 8000d88:	75fb      	strb	r3, [r7, #23]
	NRF_SPI_TIMEOUT_TIME);
	HAL_GPIO_WritePin(nrf->csPinBank, nrf->csPin, GPIO_PIN_SET);
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	6858      	ldr	r0, [r3, #4]
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	899b      	ldrh	r3, [r3, #12]
 8000d92:	2201      	movs	r2, #1
 8000d94:	4619      	mov	r1, r3
 8000d96:	f001 f9d5 	bl	8002144 <HAL_GPIO_WritePin>
	return ret;
 8000d9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	3718      	adds	r7, #24
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <NRF24_SendReadCommand>:

NRF_Status NRF24_SendReadCommand(NRF24 *nrf, uint8_t cmd, uint8_t *read,
		uint8_t length) {
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b088      	sub	sp, #32
 8000da8:	af02      	add	r7, sp, #8
 8000daa:	60f8      	str	r0, [r7, #12]
 8000dac:	607a      	str	r2, [r7, #4]
 8000dae:	461a      	mov	r2, r3
 8000db0:	460b      	mov	r3, r1
 8000db2:	72fb      	strb	r3, [r7, #11]
 8000db4:	4613      	mov	r3, r2
 8000db6:	72bb      	strb	r3, [r7, #10]
	NRF_Status ret = NRF_OK;
 8000db8:	2300      	movs	r3, #0
 8000dba:	75fb      	strb	r3, [r7, #23]
	uint8_t status;

	HAL_GPIO_WritePin(nrf->csPinBank, nrf->csPin, GPIO_PIN_RESET);
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	6858      	ldr	r0, [r3, #4]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	899b      	ldrh	r3, [r3, #12]
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	f001 f9bc 	bl	8002144 <HAL_GPIO_WritePin>

	ret = (NRF_Status) HAL_SPI_TransmitReceive(nrf->spiHandle, &cmd, &status, 1,
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	6818      	ldr	r0, [r3, #0]
 8000dd0:	f107 0216 	add.w	r2, r7, #22
 8000dd4:	f107 010b 	add.w	r1, r7, #11
 8000dd8:	230a      	movs	r3, #10
 8000dda:	9300      	str	r3, [sp, #0]
 8000ddc:	2301      	movs	r3, #1
 8000dde:	f004 fe03 	bl	80059e8 <HAL_SPI_TransmitReceive>
 8000de2:	4603      	mov	r3, r0
 8000de4:	75fb      	strb	r3, [r7, #23]
	NRF_SPI_TIMEOUT_TIME);
	if(ret != NRF_OK){
 8000de6:	7dfb      	ldrb	r3, [r7, #23]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d009      	beq.n	8000e00 <NRF24_SendReadCommand+0x5c>
		HAL_GPIO_WritePin(nrf->csPinBank, nrf->csPin, GPIO_PIN_SET);
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	6858      	ldr	r0, [r3, #4]
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	899b      	ldrh	r3, [r3, #12]
 8000df4:	2201      	movs	r2, #1
 8000df6:	4619      	mov	r1, r3
 8000df8:	f001 f9a4 	bl	8002144 <HAL_GPIO_WritePin>
		return ret;
 8000dfc:	7dfb      	ldrb	r3, [r7, #23]
 8000dfe:	e012      	b.n	8000e26 <NRF24_SendReadCommand+0x82>
	}
	ret = (NRF_Status) HAL_SPI_Receive(nrf->spiHandle, read, length,
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	6818      	ldr	r0, [r3, #0]
 8000e04:	7abb      	ldrb	r3, [r7, #10]
 8000e06:	b29a      	uxth	r2, r3
 8000e08:	230a      	movs	r3, #10
 8000e0a:	6879      	ldr	r1, [r7, #4]
 8000e0c:	f004 fb7a 	bl	8005504 <HAL_SPI_Receive>
 8000e10:	4603      	mov	r3, r0
 8000e12:	75fb      	strb	r3, [r7, #23]
	NRF_SPI_TIMEOUT_TIME);
	HAL_GPIO_WritePin(nrf->csPinBank, nrf->csPin, GPIO_PIN_SET);
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	6858      	ldr	r0, [r3, #4]
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	899b      	ldrh	r3, [r3, #12]
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	4619      	mov	r1, r3
 8000e20:	f001 f990 	bl	8002144 <HAL_GPIO_WritePin>
	return ret;
 8000e24:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3718      	adds	r7, #24
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <NRF24_WriteRegister>:

NRF_Status NRF24_WriteRegister(NRF24 *nrf, uint8_t reg, uint8_t *write,
		uint8_t Length) {
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b084      	sub	sp, #16
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	60f8      	str	r0, [r7, #12]
 8000e36:	607a      	str	r2, [r7, #4]
 8000e38:	461a      	mov	r2, r3
 8000e3a:	460b      	mov	r3, r1
 8000e3c:	72fb      	strb	r3, [r7, #11]
 8000e3e:	4613      	mov	r3, r2
 8000e40:	72bb      	strb	r3, [r7, #10]
	return NRF24_SendWriteCommand(nrf, NRF_CMD_W_REGISTER | reg, write, Length);
 8000e42:	7afb      	ldrb	r3, [r7, #11]
 8000e44:	f043 0320 	orr.w	r3, r3, #32
 8000e48:	b2d9      	uxtb	r1, r3
 8000e4a:	7abb      	ldrb	r3, [r7, #10]
 8000e4c:	687a      	ldr	r2, [r7, #4]
 8000e4e:	68f8      	ldr	r0, [r7, #12]
 8000e50:	f7ff ff63 	bl	8000d1a <NRF24_SendWriteCommand>
 8000e54:	4603      	mov	r3, r0
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3710      	adds	r7, #16
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <NRF24_WriteRegisterByte>:

NRF_Status NRF24_WriteRegisterByte(NRF24 *nrf, uint8_t reg, uint8_t byte) {
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b084      	sub	sp, #16
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
 8000e66:	460b      	mov	r3, r1
 8000e68:	70fb      	strb	r3, [r7, #3]
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	70bb      	strb	r3, [r7, #2]
	uint8_t write = byte;
 8000e6e:	78bb      	ldrb	r3, [r7, #2]
 8000e70:	73fb      	strb	r3, [r7, #15]
	return NRF24_WriteRegister(nrf, reg, &write, 1);
 8000e72:	f107 020f 	add.w	r2, r7, #15
 8000e76:	78f9      	ldrb	r1, [r7, #3]
 8000e78:	2301      	movs	r3, #1
 8000e7a:	6878      	ldr	r0, [r7, #4]
 8000e7c:	f7ff ffd7 	bl	8000e2e <NRF24_WriteRegister>
 8000e80:	4603      	mov	r3, r0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3710      	adds	r7, #16
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <NRF24_ReadRegister>:

NRF_Status NRF24_ReadRegister(NRF24 *nrf, uint8_t reg, uint8_t *read,
		uint8_t Length) {
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b084      	sub	sp, #16
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	60f8      	str	r0, [r7, #12]
 8000e92:	607a      	str	r2, [r7, #4]
 8000e94:	461a      	mov	r2, r3
 8000e96:	460b      	mov	r3, r1
 8000e98:	72fb      	strb	r3, [r7, #11]
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	72bb      	strb	r3, [r7, #10]
	return NRF24_SendReadCommand(nrf, NRF_CMD_R_REGISTER | reg, read, Length);
 8000e9e:	7abb      	ldrb	r3, [r7, #10]
 8000ea0:	7af9      	ldrb	r1, [r7, #11]
 8000ea2:	687a      	ldr	r2, [r7, #4]
 8000ea4:	68f8      	ldr	r0, [r7, #12]
 8000ea6:	f7ff ff7d 	bl	8000da4 <NRF24_SendReadCommand>
 8000eaa:	4603      	mov	r3, r0
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3710      	adds	r7, #16
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <NRF24_ReadStatus>:
	uint8_t read;
	NRF24_SendReadCommand(nrf, NRF_CMD_R_REGISTER | reg, &read, 1);
	return read;
}

uint8_t NRF24_ReadStatus(NRF24 *nrf) {
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b086      	sub	sp, #24
 8000eb8:	af02      	add	r7, sp, #8
 8000eba:	6078      	str	r0, [r7, #4]
	uint8_t status = 0x00;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	73fb      	strb	r3, [r7, #15]
	uint8_t cmd = NRF_CMD_NOP;
 8000ec0:	23ff      	movs	r3, #255	@ 0xff
 8000ec2:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(nrf->csPinBank, nrf->csPin, GPIO_PIN_RESET);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6858      	ldr	r0, [r3, #4]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	899b      	ldrh	r3, [r3, #12]
 8000ecc:	2200      	movs	r2, #0
 8000ece:	4619      	mov	r1, r3
 8000ed0:	f001 f938 	bl	8002144 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(nrf->spiHandle, &cmd, &status, 1,
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6818      	ldr	r0, [r3, #0]
 8000ed8:	f107 020f 	add.w	r2, r7, #15
 8000edc:	f107 010e 	add.w	r1, r7, #14
 8000ee0:	230a      	movs	r3, #10
 8000ee2:	9300      	str	r3, [sp, #0]
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	f004 fd7f 	bl	80059e8 <HAL_SPI_TransmitReceive>
	NRF_SPI_TIMEOUT_TIME);
	HAL_GPIO_WritePin(nrf->csPinBank, nrf->csPin, GPIO_PIN_SET);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6858      	ldr	r0, [r3, #4]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	899b      	ldrh	r3, [r3, #12]
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	f001 f925 	bl	8002144 <HAL_GPIO_WritePin>

	return status;
 8000efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3710      	adds	r7, #16
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <NRF24_SetRegisterBit>:

NRF_Status NRF24_SetRegisterBit(NRF24 *nrf, uint8_t reg, uint8_t bit) {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	70fb      	strb	r3, [r7, #3]
 8000f10:	4613      	mov	r3, r2
 8000f12:	70bb      	strb	r3, [r7, #2]
	NRF_Status ret = NRF_OK;
 8000f14:	2300      	movs	r3, #0
 8000f16:	73fb      	strb	r3, [r7, #15]
	uint8_t cfg = 0x00;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	73bb      	strb	r3, [r7, #14]

	ret = NRF24_ReadRegister(nrf, reg, &cfg, 1);
 8000f1c:	f107 020e 	add.w	r2, r7, #14
 8000f20:	78f9      	ldrb	r1, [r7, #3]
 8000f22:	2301      	movs	r3, #1
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f7ff ffb0 	bl	8000e8a <NRF24_ReadRegister>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	73fb      	strb	r3, [r7, #15]
	if (ret != NRF_OK) {
 8000f2e:	7bfb      	ldrb	r3, [r7, #15]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <NRF24_SetRegisterBit+0x34>
		return ret;
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
 8000f36:	e012      	b.n	8000f5e <NRF24_SetRegisterBit+0x5a>
	}
	cfg = cfg | (1 << bit);
 8000f38:	78bb      	ldrb	r3, [r7, #2]
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	b25a      	sxtb	r2, r3
 8000f42:	7bbb      	ldrb	r3, [r7, #14]
 8000f44:	b25b      	sxtb	r3, r3
 8000f46:	4313      	orrs	r3, r2
 8000f48:	b25b      	sxtb	r3, r3
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	73bb      	strb	r3, [r7, #14]
	return NRF24_WriteRegister(nrf, reg, &cfg, 1);
 8000f4e:	f107 020e 	add.w	r2, r7, #14
 8000f52:	78f9      	ldrb	r1, [r7, #3]
 8000f54:	2301      	movs	r3, #1
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f7ff ff69 	bl	8000e2e <NRF24_WriteRegister>
 8000f5c:	4603      	mov	r3, r0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3710      	adds	r7, #16
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <NRF24_ResetRegisterBit>:

NRF_Status NRF24_ResetRegisterBit(NRF24 *nrf, uint8_t reg, uint8_t bit) {
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b084      	sub	sp, #16
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
 8000f6e:	460b      	mov	r3, r1
 8000f70:	70fb      	strb	r3, [r7, #3]
 8000f72:	4613      	mov	r3, r2
 8000f74:	70bb      	strb	r3, [r7, #2]
	NRF_Status ret = NRF_OK;
 8000f76:	2300      	movs	r3, #0
 8000f78:	73fb      	strb	r3, [r7, #15]
	uint8_t cfg = 0x00;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	73bb      	strb	r3, [r7, #14]

	ret = NRF24_ReadRegister(nrf, reg, &cfg, 1); //Pega a informação do byte do registro
 8000f7e:	f107 020e 	add.w	r2, r7, #14
 8000f82:	78f9      	ldrb	r1, [r7, #3]
 8000f84:	2301      	movs	r3, #1
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f7ff ff7f 	bl	8000e8a <NRF24_ReadRegister>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	73fb      	strb	r3, [r7, #15]
	if (ret != NRF_OK) {
 8000f90:	7bfb      	ldrb	r3, [r7, #15]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <NRF24_ResetRegisterBit+0x34>
		return ret;
 8000f96:	7bfb      	ldrb	r3, [r7, #15]
 8000f98:	e014      	b.n	8000fc4 <NRF24_ResetRegisterBit+0x5e>
	}

	cfg = cfg & ~(1 << bit); //Altera o bit por meio de um E binário
 8000f9a:	78bb      	ldrb	r3, [r7, #2]
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	b25b      	sxtb	r3, r3
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	b25a      	sxtb	r2, r3
 8000fa8:	7bbb      	ldrb	r3, [r7, #14]
 8000faa:	b25b      	sxtb	r3, r3
 8000fac:	4013      	ands	r3, r2
 8000fae:	b25b      	sxtb	r3, r3
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	73bb      	strb	r3, [r7, #14]
	return NRF24_WriteRegister(nrf, reg, &cfg, 1); //Escreve o registro de volta
 8000fb4:	f107 020e 	add.w	r2, r7, #14
 8000fb8:	78f9      	ldrb	r1, [r7, #3]
 8000fba:	2301      	movs	r3, #1
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f7ff ff36 	bl	8000e2e <NRF24_WriteRegister>
 8000fc2:	4603      	mov	r3, r0
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3710      	adds	r7, #16
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <NRF24_EnterMode>:

//eu mudei isto ent acho que tem erros kkk

NRF_Status NRF24_EnterMode(NRF24 *nrf, uint8_t mode) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	70fb      	strb	r3, [r7, #3]
	NRF_Status ret = NRF_OK;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	73fb      	strb	r3, [r7, #15]

	switch (mode) {
 8000fdc:	78fb      	ldrb	r3, [r7, #3]
 8000fde:	2b03      	cmp	r3, #3
 8000fe0:	f200 8083 	bhi.w	80010ea <NRF24_EnterMode+0x11e>
 8000fe4:	a201      	add	r2, pc, #4	@ (adr r2, 8000fec <NRF24_EnterMode+0x20>)
 8000fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fea:	bf00      	nop
 8000fec:	08000ffd 	.word	0x08000ffd
 8000ff0:	0800102d 	.word	0x0800102d
 8000ff4:	08001093 	.word	0x08001093
 8000ff8:	080010bf 	.word	0x080010bf
	case NRF_MODE_POWERDOWN:
		HAL_GPIO_WritePin(nrf->csPinBank, nrf->csPin, GPIO_PIN_SET); //csn_set();
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6858      	ldr	r0, [r3, #4]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	899b      	ldrh	r3, [r3, #12]
 8001004:	2201      	movs	r2, #1
 8001006:	4619      	mov	r1, r3
 8001008:	f001 f89c 	bl	8002144 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(nrf->cePinBank, nrf->cePin, GPIO_PIN_RESET); //ce_reset();
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6898      	ldr	r0, [r3, #8]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	89db      	ldrh	r3, [r3, #14]
 8001014:	2200      	movs	r2, #0
 8001016:	4619      	mov	r1, r3
 8001018:	f001 f894 	bl	8002144 <HAL_GPIO_WritePin>
		ret = NRF24_ResetRegisterBit(nrf, NRF_REG_CONFIG, CFG_BIT_PWR_UP); //Seta o bit de Power up em 0 *****************************************8
 800101c:	2201      	movs	r2, #1
 800101e:	2100      	movs	r1, #0
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f7ff ffa0 	bl	8000f66 <NRF24_ResetRegisterBit>
 8001026:	4603      	mov	r3, r0
 8001028:	73fb      	strb	r3, [r7, #15]
		break;
 800102a:	e062      	b.n	80010f2 <NRF24_EnterMode+0x126>

	case NRF_MODE_STANDBY1:
		if (nrf->mode == NRF_MODE_POWERDOWN) {
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	8a1b      	ldrh	r3, [r3, #16]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d10d      	bne.n	8001050 <NRF24_EnterMode+0x84>
			ret = NRF24_SetRegisterBit(nrf, NRF_REG_CONFIG, CFG_BIT_PWR_UP); //Seta o bit de Power up em 1
 8001034:	2201      	movs	r2, #1
 8001036:	2100      	movs	r1, #0
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f7ff ff63 	bl	8000f04 <NRF24_SetRegisterBit>
 800103e:	4603      	mov	r3, r0
 8001040:	73fb      	strb	r3, [r7, #15]
			wait(1500);
 8001042:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8001046:	f04f 0100 	mov.w	r1, #0
 800104a:	f7ff fde5 	bl	8000c18 <wait>
			ret = NRF24_ResetRegisterBit(nrf, NRF_REG_CONFIG, CFG_BIT_PRIM_RX);
			HAL_GPIO_WritePin(nrf->cePinBank, nrf->cePin, GPIO_PIN_RESET); //ce_reset();
		} else if (nrf->mode == NRF_MODE_TX) {
			HAL_GPIO_WritePin(nrf->cePinBank, nrf->cePin, GPIO_PIN_RESET);
		}
		break;
 800104e:	e04f      	b.n	80010f0 <NRF24_EnterMode+0x124>
		} else if (nrf->mode == NRF_MODE_RX) {
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	8a1b      	ldrh	r3, [r3, #16]
 8001054:	2b02      	cmp	r3, #2
 8001056:	d10f      	bne.n	8001078 <NRF24_EnterMode+0xac>
			ret = NRF24_ResetRegisterBit(nrf, NRF_REG_CONFIG, CFG_BIT_PRIM_RX);
 8001058:	2200      	movs	r2, #0
 800105a:	2100      	movs	r1, #0
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f7ff ff82 	bl	8000f66 <NRF24_ResetRegisterBit>
 8001062:	4603      	mov	r3, r0
 8001064:	73fb      	strb	r3, [r7, #15]
			HAL_GPIO_WritePin(nrf->cePinBank, nrf->cePin, GPIO_PIN_RESET); //ce_reset();
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6898      	ldr	r0, [r3, #8]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	89db      	ldrh	r3, [r3, #14]
 800106e:	2200      	movs	r2, #0
 8001070:	4619      	mov	r1, r3
 8001072:	f001 f867 	bl	8002144 <HAL_GPIO_WritePin>
		break;
 8001076:	e03b      	b.n	80010f0 <NRF24_EnterMode+0x124>
		} else if (nrf->mode == NRF_MODE_TX) {
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	8a1b      	ldrh	r3, [r3, #16]
 800107c:	2b03      	cmp	r3, #3
 800107e:	d137      	bne.n	80010f0 <NRF24_EnterMode+0x124>
			HAL_GPIO_WritePin(nrf->cePinBank, nrf->cePin, GPIO_PIN_RESET);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6898      	ldr	r0, [r3, #8]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	89db      	ldrh	r3, [r3, #14]
 8001088:	2200      	movs	r2, #0
 800108a:	4619      	mov	r1, r3
 800108c:	f001 f85a 	bl	8002144 <HAL_GPIO_WritePin>
		break;
 8001090:	e02e      	b.n	80010f0 <NRF24_EnterMode+0x124>

	case NRF_MODE_RX:
		if (nrf->mode != NRF_MODE_STANDBY1) { //O dispositivo deve estar em standby para passar para o modo Rx
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	8a1b      	ldrh	r3, [r3, #16]
 8001096:	2b01      	cmp	r3, #1
 8001098:	d001      	beq.n	800109e <NRF24_EnterMode+0xd2>
			return NRF_BAD_TRANSITION;
 800109a:	2306      	movs	r3, #6
 800109c:	e031      	b.n	8001102 <NRF24_EnterMode+0x136>
		}
		ret = NRF24_SetRegisterBit(nrf, NRF_REG_CONFIG, CFG_BIT_PRIM_RX); // 1 = Rx
 800109e:	2200      	movs	r2, #0
 80010a0:	2100      	movs	r1, #0
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f7ff ff2e 	bl	8000f04 <NRF24_SetRegisterBit>
 80010a8:	4603      	mov	r3, r0
 80010aa:	73fb      	strb	r3, [r7, #15]
		HAL_GPIO_WritePin(nrf->cePinBank, nrf->cePin, GPIO_PIN_SET); //ce_set();
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6898      	ldr	r0, [r3, #8]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	89db      	ldrh	r3, [r3, #14]
 80010b4:	2201      	movs	r2, #1
 80010b6:	4619      	mov	r1, r3
 80010b8:	f001 f844 	bl	8002144 <HAL_GPIO_WritePin>
		break;
 80010bc:	e019      	b.n	80010f2 <NRF24_EnterMode+0x126>

	case NRF_MODE_TX:
		if (nrf->mode != NRF_MODE_STANDBY1) {
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	8a1b      	ldrh	r3, [r3, #16]
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d001      	beq.n	80010ca <NRF24_EnterMode+0xfe>
			return NRF_BAD_TRANSITION;
 80010c6:	2306      	movs	r3, #6
 80010c8:	e01b      	b.n	8001102 <NRF24_EnterMode+0x136>
		}
		ret = NRF24_ResetRegisterBit(nrf, NRF_REG_CONFIG, CFG_BIT_PRIM_RX); // 0 = Tx
 80010ca:	2200      	movs	r2, #0
 80010cc:	2100      	movs	r1, #0
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f7ff ff49 	bl	8000f66 <NRF24_ResetRegisterBit>
 80010d4:	4603      	mov	r3, r0
 80010d6:	73fb      	strb	r3, [r7, #15]
		HAL_GPIO_WritePin(nrf->cePinBank, nrf->cePin, GPIO_PIN_SET);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6898      	ldr	r0, [r3, #8]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	89db      	ldrh	r3, [r3, #14]
 80010e0:	2201      	movs	r2, #1
 80010e2:	4619      	mov	r1, r3
 80010e4:	f001 f82e 	bl	8002144 <HAL_GPIO_WritePin>
		break;
 80010e8:	e003      	b.n	80010f2 <NRF24_EnterMode+0x126>

	default:
		ret = NRF_ERROR;
 80010ea:	2304      	movs	r3, #4
 80010ec:	73fb      	strb	r3, [r7, #15]
		break;
 80010ee:	e000      	b.n	80010f2 <NRF24_EnterMode+0x126>
		break;
 80010f0:	bf00      	nop
	}

	if (ret == NRF_OK) {
 80010f2:	7bfb      	ldrb	r3, [r7, #15]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d103      	bne.n	8001100 <NRF24_EnterMode+0x134>
		nrf->mode = mode;
 80010f8:	78fb      	ldrb	r3, [r7, #3]
 80010fa:	b29a      	uxth	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	821a      	strh	r2, [r3, #16]
	}

	return ret;
 8001100:	7bfb      	ldrb	r3, [r7, #15]
}
 8001102:	4618      	mov	r0, r3
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop

0800110c <NRF24_Init>:

NRF_Status NRF24_Init(NRF24 *nrf, SPI_HandleTypeDef *handle,
		GPIO_TypeDef *PortCS, uint16_t PinCS, GPIO_TypeDef *PortCE,
		uint16_t PinCE) {
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	60b9      	str	r1, [r7, #8]
 8001116:	607a      	str	r2, [r7, #4]
 8001118:	807b      	strh	r3, [r7, #2]

	CPU_Freq = HAL_RCC_GetSysClockFreq();
 800111a:	f001 fedf 	bl	8002edc <HAL_RCC_GetSysClockFreq>
 800111e:	4603      	mov	r3, r0
 8001120:	4a0d      	ldr	r2, [pc, #52]	@ (8001158 <NRF24_Init+0x4c>)
 8001122:	6013      	str	r3, [r2, #0]
	if (CPU_Freq == 0x00) {
 8001124:	4b0c      	ldr	r3, [pc, #48]	@ (8001158 <NRF24_Init+0x4c>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d101      	bne.n	8001130 <NRF24_Init+0x24>
		return NRF_ERROR;
 800112c:	2304      	movs	r3, #4
 800112e:	e00f      	b.n	8001150 <NRF24_Init+0x44>
	}

	// Make sure CSN is pulled high
	HAL_GPIO_WritePin(nrf->csPinBank, nrf->csPin, GPIO_PIN_SET);
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	6858      	ldr	r0, [r3, #4]
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	899b      	ldrh	r3, [r3, #12]
 8001138:	2201      	movs	r2, #1
 800113a:	4619      	mov	r1, r3
 800113c:	f001 f802 	bl	8002144 <HAL_GPIO_WritePin>

	// Takes ~100ms from power on to start up
	HAL_Delay(100);
 8001140:	2064      	movs	r0, #100	@ 0x64
 8001142:	f000 fc8b 	bl	8001a5c <HAL_Delay>

	return NRF24_EnterMode(nrf, NRF_MODE_STANDBY1);
 8001146:	2101      	movs	r1, #1
 8001148:	68f8      	ldr	r0, [r7, #12]
 800114a:	f7ff ff3f 	bl	8000fcc <NRF24_EnterMode>
 800114e:	4603      	mov	r3, r0
}
 8001150:	4618      	mov	r0, r3
 8001152:	3710      	adds	r7, #16
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	24000100 	.word	0x24000100

0800115c <NRF24_Reset>:

void NRF24_Reset(NRF24 *nrf) {
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
	NRF24_EnterMode(nrf, NRF_MODE_POWERDOWN);
 8001164:	2100      	movs	r1, #0
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f7ff ff30 	bl	8000fcc <NRF24_EnterMode>
	NRF24_EnterMode(nrf, NRF_MODE_STANDBY1);
 800116c:	2101      	movs	r1, #1
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f7ff ff2c 	bl	8000fcc <NRF24_EnterMode>

	// Flush FIFOs
	NRF24_EnterMode(nrf, NRF_MODE_TX);
 8001174:	2103      	movs	r1, #3
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f7ff ff28 	bl	8000fcc <NRF24_EnterMode>
	NRF24_SendCommand(nrf, NRF_CMD_FLUSH_TX);
 800117c:	21e1      	movs	r1, #225	@ 0xe1
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f7ff fd9d 	bl	8000cbe <NRF24_SendCommand>
	NRF24_EnterMode(nrf, NRF_MODE_STANDBY1);
 8001184:	2101      	movs	r1, #1
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f7ff ff20 	bl	8000fcc <NRF24_EnterMode>
	NRF24_EnterMode(nrf, NRF_MODE_RX);
 800118c:	2102      	movs	r1, #2
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f7ff ff1c 	bl	8000fcc <NRF24_EnterMode>
	NRF24_SendCommand(nrf, NRF_CMD_FLUSH_RX);
 8001194:	21e2      	movs	r1, #226	@ 0xe2
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f7ff fd91 	bl	8000cbe <NRF24_SendCommand>
	NRF24_EnterMode(nrf, NRF_MODE_STANDBY1);
 800119c:	2101      	movs	r1, #1
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f7ff ff14 	bl	8000fcc <NRF24_EnterMode>

	// Flush register -> LER DATASHEET!!!!!!!!!!!!!!
	NRF24_WriteRegisterByte(nrf, NRF_REG_CONFIG, 0x0A); // 00001010
 80011a4:	220a      	movs	r2, #10
 80011a6:	2100      	movs	r1, #0
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f7ff fe58 	bl	8000e5e <NRF24_WriteRegisterByte>
	NRF24_WriteRegisterByte(nrf, NRF_REG_EN_AA, 0x03); // 00000000 = AutoAcknologment desligado em todos os Pipes
 80011ae:	2203      	movs	r2, #3
 80011b0:	2101      	movs	r1, #1
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f7ff fe53 	bl	8000e5e <NRF24_WriteRegisterByte>
	NRF24_WriteRegisterByte(nrf, NRF_REG_EN_RXADDR, 0x03); //00000011 -> Pipes 0 e 1 no Rx
 80011b8:	2203      	movs	r2, #3
 80011ba:	2102      	movs	r1, #2
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f7ff fe4e 	bl	8000e5e <NRF24_WriteRegisterByte>
	NRF24_WriteRegisterByte(nrf, NRF_REG_SETUP_AW, 0x03); //00000011 -> 5 bytes no adresss
 80011c2:	2203      	movs	r2, #3
 80011c4:	2103      	movs	r1, #3
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f7ff fe49 	bl	8000e5e <NRF24_WriteRegisterByte>
	NRF24_WriteRegisterByte(nrf, NRF_REG_SETUP_RETR, 0x03); //00000000 -> re-transmit desabilitado
 80011cc:	2203      	movs	r2, #3
 80011ce:	2104      	movs	r1, #4
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f7ff fe44 	bl	8000e5e <NRF24_WriteRegisterByte>
	NRF24_WriteRegisterByte(nrf, NRF_REG_RF_CH, 0x02); //00000010 -> Canal 3
 80011d6:	2202      	movs	r2, #2
 80011d8:	2105      	movs	r1, #5
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f7ff fe3f 	bl	8000e5e <NRF24_WriteRegisterByte>
	NRF24_WriteRegisterByte(nrf, NRF_REG_RF_SETUP, 0x0e); //00001110 -> LNA desligado, 0dBm, 2MBs
 80011e0:	220e      	movs	r2, #14
 80011e2:	2106      	movs	r1, #6
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f7ff fe3a 	bl	8000e5e <NRF24_WriteRegisterByte>
	NRF24_WriteRegisterByte(nrf, NRF_REG_STATUS, 0x70); // clear flags
 80011ea:	2270      	movs	r2, #112	@ 0x70
 80011ec:	2107      	movs	r1, #7
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f7ff fe35 	bl	8000e5e <NRF24_WriteRegisterByte>

	uint8_t address[5] = { 0xE7, 0xE7, 0xE7, 0xE7, 0xE7 };
 80011f4:	4a34      	ldr	r2, [pc, #208]	@ (80012c8 <NRF24_Reset+0x16c>)
 80011f6:	f107 0310 	add.w	r3, r7, #16
 80011fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011fe:	6018      	str	r0, [r3, #0]
 8001200:	3304      	adds	r3, #4
 8001202:	7019      	strb	r1, [r3, #0]
	uint8_t address2[5] = { 0xC2, 0xC2, 0xC2, 0xC2, 0xC2 };
 8001204:	4a31      	ldr	r2, [pc, #196]	@ (80012cc <NRF24_Reset+0x170>)
 8001206:	f107 0308 	add.w	r3, r7, #8
 800120a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800120e:	6018      	str	r0, [r3, #0]
 8001210:	3304      	adds	r3, #4
 8001212:	7019      	strb	r1, [r3, #0]
	NRF24_WriteRegister(nrf, NRF_REG_RX_ADDR_P0, address, 5); //Adress do pipe 0
 8001214:	f107 0210 	add.w	r2, r7, #16
 8001218:	2305      	movs	r3, #5
 800121a:	210a      	movs	r1, #10
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f7ff fe06 	bl	8000e2e <NRF24_WriteRegister>
	NRF24_WriteRegister(nrf, NRF_REG_RX_ADDR_P1, address2, 5); //Adress pipe 1
 8001222:	f107 0208 	add.w	r2, r7, #8
 8001226:	2305      	movs	r3, #5
 8001228:	210b      	movs	r1, #11
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f7ff fdff 	bl	8000e2e <NRF24_WriteRegister>
	NRF24_WriteRegisterByte(nrf, NRF_REG_RX_ADDR_P2, 0xC3);
 8001230:	22c3      	movs	r2, #195	@ 0xc3
 8001232:	210c      	movs	r1, #12
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f7ff fe12 	bl	8000e5e <NRF24_WriteRegisterByte>
	NRF24_WriteRegisterByte(nrf, NRF_REG_RX_ADDR_P3, 0xC4);
 800123a:	22c4      	movs	r2, #196	@ 0xc4
 800123c:	210d      	movs	r1, #13
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f7ff fe0d 	bl	8000e5e <NRF24_WriteRegisterByte>
	NRF24_WriteRegisterByte(nrf, NRF_REG_RX_ADDR_P4, 0xC5);
 8001244:	22c5      	movs	r2, #197	@ 0xc5
 8001246:	210e      	movs	r1, #14
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f7ff fe08 	bl	8000e5e <NRF24_WriteRegisterByte>
	NRF24_WriteRegisterByte(nrf, NRF_REG_RX_ADDR_P5, 0xC6);
 800124e:	22c6      	movs	r2, #198	@ 0xc6
 8001250:	210f      	movs	r1, #15
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f7ff fe03 	bl	8000e5e <NRF24_WriteRegisterByte>
	NRF24_WriteRegister(nrf, NRF_REG_TX_ADDR, address, 5);
 8001258:	f107 0210 	add.w	r2, r7, #16
 800125c:	2305      	movs	r3, #5
 800125e:	2110      	movs	r1, #16
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f7ff fde4 	bl	8000e2e <NRF24_WriteRegister>
	NRF24_WriteRegisterByte(nrf, NRF_REG_RX_PW_P0, 0x00);
 8001266:	2200      	movs	r2, #0
 8001268:	2111      	movs	r1, #17
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f7ff fdf7 	bl	8000e5e <NRF24_WriteRegisterByte>
	NRF24_WriteRegisterByte(nrf, NRF_REG_RX_PW_P1, 0x00);
 8001270:	2200      	movs	r2, #0
 8001272:	2112      	movs	r1, #18
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7ff fdf2 	bl	8000e5e <NRF24_WriteRegisterByte>
	NRF24_WriteRegisterByte(nrf, NRF_REG_RX_PW_P2, 0x00);
 800127a:	2200      	movs	r2, #0
 800127c:	2113      	movs	r1, #19
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f7ff fded 	bl	8000e5e <NRF24_WriteRegisterByte>
	NRF24_WriteRegisterByte(nrf, NRF_REG_RX_PW_P3, 0x00);
 8001284:	2200      	movs	r2, #0
 8001286:	2114      	movs	r1, #20
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f7ff fde8 	bl	8000e5e <NRF24_WriteRegisterByte>
	NRF24_WriteRegisterByte(nrf, NRF_REG_RX_PW_P4, 0x00);
 800128e:	2200      	movs	r2, #0
 8001290:	2115      	movs	r1, #21
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f7ff fde3 	bl	8000e5e <NRF24_WriteRegisterByte>
	NRF24_WriteRegisterByte(nrf, NRF_REG_RX_PW_P5, 0x00);
 8001298:	2200      	movs	r2, #0
 800129a:	2116      	movs	r1, #22
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f7ff fdde 	bl	8000e5e <NRF24_WriteRegisterByte>

	NRF24_WriteRegisterByte(nrf, NRF_REG_FIFO_STATUS, 0x00);
 80012a2:	2200      	movs	r2, #0
 80012a4:	2117      	movs	r1, #23
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f7ff fdd9 	bl	8000e5e <NRF24_WriteRegisterByte>
	NRF24_WriteRegisterByte(nrf, NRF_REG_DYNPD, 0x00);
 80012ac:	2200      	movs	r2, #0
 80012ae:	211c      	movs	r1, #28
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f7ff fdd4 	bl	8000e5e <NRF24_WriteRegisterByte>
	NRF24_WriteRegisterByte(nrf, NRF_REG_FEATURE, 0x00);
 80012b6:	2200      	movs	r2, #0
 80012b8:	211d      	movs	r1, #29
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7ff fdcf 	bl	8000e5e <NRF24_WriteRegisterByte>
}
 80012c0:	bf00      	nop
 80012c2:	3718      	adds	r7, #24
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	08007264 	.word	0x08007264
 80012cc:	0800726c 	.word	0x0800726c

080012d0 <NRF24_WritePayload>:

NRF_Status NRF24_WritePayload(NRF24 *nrf, uint8_t *payload, uint8_t length) {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	60f8      	str	r0, [r7, #12]
 80012d8:	60b9      	str	r1, [r7, #8]
 80012da:	4613      	mov	r3, r2
 80012dc:	71fb      	strb	r3, [r7, #7]
	return NRF24_SendWriteCommand(nrf, NRF_CMD_W_TX_PAYLOAD, payload, length);
 80012de:	79fb      	ldrb	r3, [r7, #7]
 80012e0:	68ba      	ldr	r2, [r7, #8]
 80012e2:	21a0      	movs	r1, #160	@ 0xa0
 80012e4:	68f8      	ldr	r0, [r7, #12]
 80012e6:	f7ff fd18 	bl	8000d1a <NRF24_SendWriteCommand>
 80012ea:	4603      	mov	r3, r0
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3710      	adds	r7, #16
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <NRF24_TransmitAndWait>:
	HAL_GPIO_WritePin(nrf->cePinBank, nrf->cePin, GPIO_PIN_SET); //ce_set();
	wait(10);
	HAL_GPIO_WritePin(nrf->cePinBank, nrf->cePin, GPIO_PIN_RESET); //ce_reset();
}

NRF_Status NRF24_TransmitAndWait(NRF24 *nrf, uint8_t *payload, uint8_t length) {
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	4613      	mov	r3, r2
 8001300:	71fb      	strb	r3, [r7, #7]
	NRF_Status ret = NRF_OK;
 8001302:	2300      	movs	r3, #0
 8001304:	75fb      	strb	r3, [r7, #23]

	ret = NRF24_WritePayload(nrf, payload, length);
 8001306:	79fb      	ldrb	r3, [r7, #7]
 8001308:	461a      	mov	r2, r3
 800130a:	68b9      	ldr	r1, [r7, #8]
 800130c:	68f8      	ldr	r0, [r7, #12]
 800130e:	f7ff ffdf 	bl	80012d0 <NRF24_WritePayload>
 8001312:	4603      	mov	r3, r0
 8001314:	75fb      	strb	r3, [r7, #23]
	if (ret != NRF_OK) {
 8001316:	7dfb      	ldrb	r3, [r7, #23]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <NRF24_TransmitAndWait+0x2c>

		return ret;
 800131c:	7dfb      	ldrb	r3, [r7, #23]
 800131e:	e02e      	b.n	800137e <NRF24_TransmitAndWait+0x8a>
	}

	// Transmit
	HAL_GPIO_WritePin(nrf->cePinBank, nrf->cePin, GPIO_PIN_SET); //ce_set();
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	6898      	ldr	r0, [r3, #8]
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	89db      	ldrh	r3, [r3, #14]
 8001328:	2201      	movs	r2, #1
 800132a:	4619      	mov	r1, r3
 800132c:	f000 ff0a 	bl	8002144 <HAL_GPIO_WritePin>

	// Wait for status update
	uint8_t status;
	for (;;) {
		status = NRF24_ReadStatus(nrf);
 8001330:	68f8      	ldr	r0, [r7, #12]
 8001332:	f7ff fdbf 	bl	8000eb4 <NRF24_ReadStatus>
 8001336:	4603      	mov	r3, r0
 8001338:	75bb      	strb	r3, [r7, #22]
		if (status & (1 << STATUS_BIT_TX_DS)) {
 800133a:	7dbb      	ldrb	r3, [r7, #22]
 800133c:	f003 0320 	and.w	r3, r3, #32
 8001340:	2b00      	cmp	r3, #0
 8001342:	d007      	beq.n	8001354 <NRF24_TransmitAndWait+0x60>
			// Packet transmitted
			ret = NRF24_SetRegisterBit(nrf, NRF_REG_STATUS, STATUS_BIT_TX_DS); // clear flag
 8001344:	2205      	movs	r2, #5
 8001346:	2107      	movs	r1, #7
 8001348:	68f8      	ldr	r0, [r7, #12]
 800134a:	f7ff fddb 	bl	8000f04 <NRF24_SetRegisterBit>
 800134e:	4603      	mov	r3, r0
 8001350:	75fb      	strb	r3, [r7, #23]
			break;
 8001352:	e00b      	b.n	800136c <NRF24_TransmitAndWait+0x78>
		} else if (status & (1 << STATUS_BIT_MAX_RT)) {
 8001354:	7dbb      	ldrb	r3, [r7, #22]
 8001356:	f003 0310 	and.w	r3, r3, #16
 800135a:	2b00      	cmp	r3, #0
 800135c:	d0e8      	beq.n	8001330 <NRF24_TransmitAndWait+0x3c>
			// Max retransmits reached
			NRF24_SetRegisterBit(nrf, NRF_REG_STATUS, STATUS_BIT_MAX_RT); // clear flag
 800135e:	2204      	movs	r2, #4
 8001360:	2107      	movs	r1, #7
 8001362:	68f8      	ldr	r0, [r7, #12]
 8001364:	f7ff fdce 	bl	8000f04 <NRF24_SetRegisterBit>
			ret = NRF_MAX_RT;
 8001368:	2305      	movs	r3, #5
 800136a:	75fb      	strb	r3, [r7, #23]
			break;
		}
	}
	HAL_GPIO_WritePin(nrf->cePinBank, nrf->cePin, GPIO_PIN_RESET); //ce_reset();
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	6898      	ldr	r0, [r3, #8]
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	89db      	ldrh	r3, [r3, #14]
 8001374:	2200      	movs	r2, #0
 8001376:	4619      	mov	r1, r3
 8001378:	f000 fee4 	bl	8002144 <HAL_GPIO_WritePin>

	return ret;
 800137c:	7dfb      	ldrb	r3, [r7, #23]
}
 800137e:	4618      	mov	r0, r3
 8001380:	3718      	adds	r7, #24
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <Tx_mode>:

void Tx_mode(NRF24 *nrf, uint8_t Adress[5]) {
 8001386:	b590      	push	{r4, r7, lr}
 8001388:	b085      	sub	sp, #20
 800138a:	af02      	add	r7, sp, #8
 800138c:	6078      	str	r0, [r7, #4]
 800138e:	6039      	str	r1, [r7, #0]
	if (NRF24_Init(nrf, nrf->spiHandle, nrf->csPin, nrf->csPinBank, nrf->cePin, nrf->cePinBank) != NRF_OK) {
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6819      	ldr	r1, [r3, #0]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	899b      	ldrh	r3, [r3, #12]
 8001398:	461c      	mov	r4, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	b29a      	uxth	r2, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	89db      	ldrh	r3, [r3, #14]
 80013a4:	4618      	mov	r0, r3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	b29b      	uxth	r3, r3
 80013ac:	9301      	str	r3, [sp, #4]
 80013ae:	9000      	str	r0, [sp, #0]
 80013b0:	4613      	mov	r3, r2
 80013b2:	4622      	mov	r2, r4
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f7ff fea9 	bl	800110c <NRF24_Init>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <Tx_mode+0x3e>
		Error_Handler();
 80013c0:	f7ff fc24 	bl	8000c0c <Error_Handler>
	}
	NRF24_Reset(nrf);
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f7ff fec9 	bl	800115c <NRF24_Reset>
	NRF24_WriteRegister(nrf, NRF_REG_TX_ADDR, Adress, 5);
 80013ca:	2305      	movs	r3, #5
 80013cc:	683a      	ldr	r2, [r7, #0]
 80013ce:	2110      	movs	r1, #16
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f7ff fd2c 	bl	8000e2e <NRF24_WriteRegister>
}
 80013d6:	bf00      	nop
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd90      	pop	{r4, r7, pc}
	...

080013e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001410 <HAL_MspInit+0x30>)
 80013e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80013ec:	4a08      	ldr	r2, [pc, #32]	@ (8001410 <HAL_MspInit+0x30>)
 80013ee:	f043 0302 	orr.w	r3, r3, #2
 80013f2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80013f6:	4b06      	ldr	r3, [pc, #24]	@ (8001410 <HAL_MspInit+0x30>)
 80013f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80013fc:	f003 0302 	and.w	r3, r3, #2
 8001400:	607b      	str	r3, [r7, #4]
 8001402:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001404:	bf00      	nop
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr
 8001410:	58024400 	.word	0x58024400

08001414 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b08a      	sub	sp, #40	@ 0x28
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]
 8001428:	60da      	str	r2, [r3, #12]
 800142a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a29      	ldr	r2, [pc, #164]	@ (80014d8 <HAL_SPI_MspInit+0xc4>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d14c      	bne.n	80014d0 <HAL_SPI_MspInit+0xbc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001436:	4b29      	ldr	r3, [pc, #164]	@ (80014dc <HAL_SPI_MspInit+0xc8>)
 8001438:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800143c:	4a27      	ldr	r2, [pc, #156]	@ (80014dc <HAL_SPI_MspInit+0xc8>)
 800143e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001442:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001446:	4b25      	ldr	r3, [pc, #148]	@ (80014dc <HAL_SPI_MspInit+0xc8>)
 8001448:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800144c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001450:	613b      	str	r3, [r7, #16]
 8001452:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001454:	4b21      	ldr	r3, [pc, #132]	@ (80014dc <HAL_SPI_MspInit+0xc8>)
 8001456:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800145a:	4a20      	ldr	r2, [pc, #128]	@ (80014dc <HAL_SPI_MspInit+0xc8>)
 800145c:	f043 0301 	orr.w	r3, r3, #1
 8001460:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001464:	4b1d      	ldr	r3, [pc, #116]	@ (80014dc <HAL_SPI_MspInit+0xc8>)
 8001466:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800146a:	f003 0301 	and.w	r3, r3, #1
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001472:	4b1a      	ldr	r3, [pc, #104]	@ (80014dc <HAL_SPI_MspInit+0xc8>)
 8001474:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001478:	4a18      	ldr	r2, [pc, #96]	@ (80014dc <HAL_SPI_MspInit+0xc8>)
 800147a:	f043 0302 	orr.w	r3, r3, #2
 800147e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001482:	4b16      	ldr	r3, [pc, #88]	@ (80014dc <HAL_SPI_MspInit+0xc8>)
 8001484:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001488:	f003 0302 	and.w	r3, r3, #2
 800148c:	60bb      	str	r3, [r7, #8]
 800148e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001490:	2360      	movs	r3, #96	@ 0x60
 8001492:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001494:	2302      	movs	r3, #2
 8001496:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149c:	2300      	movs	r3, #0
 800149e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014a0:	2305      	movs	r3, #5
 80014a2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a4:	f107 0314 	add.w	r3, r7, #20
 80014a8:	4619      	mov	r1, r3
 80014aa:	480d      	ldr	r0, [pc, #52]	@ (80014e0 <HAL_SPI_MspInit+0xcc>)
 80014ac:	f000 fc9a 	bl	8001de4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80014b0:	2320      	movs	r3, #32
 80014b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b4:	2302      	movs	r3, #2
 80014b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014bc:	2300      	movs	r3, #0
 80014be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014c0:	2305      	movs	r3, #5
 80014c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	4619      	mov	r1, r3
 80014ca:	4806      	ldr	r0, [pc, #24]	@ (80014e4 <HAL_SPI_MspInit+0xd0>)
 80014cc:	f000 fc8a 	bl	8001de4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80014d0:	bf00      	nop
 80014d2:	3728      	adds	r7, #40	@ 0x28
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40013000 	.word	0x40013000
 80014dc:	58024400 	.word	0x58024400
 80014e0:	58020000 	.word	0x58020000
 80014e4:	58020400 	.word	0x58020400

080014e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014ec:	bf00      	nop
 80014ee:	e7fd      	b.n	80014ec <NMI_Handler+0x4>

080014f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014f4:	bf00      	nop
 80014f6:	e7fd      	b.n	80014f4 <HardFault_Handler+0x4>

080014f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014fc:	bf00      	nop
 80014fe:	e7fd      	b.n	80014fc <MemManage_Handler+0x4>

08001500 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001504:	bf00      	nop
 8001506:	e7fd      	b.n	8001504 <BusFault_Handler+0x4>

08001508 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800150c:	bf00      	nop
 800150e:	e7fd      	b.n	800150c <UsageFault_Handler+0x4>

08001510 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr

0800151e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001530:	bf00      	nop
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr

0800153a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800153e:	f000 fa6d 	bl	8001a1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}

08001546 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 800154a:	2000      	movs	r0, #0
 800154c:	f000 f914 	bl	8001778 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001550:	bf00      	nop
 8001552:	bd80      	pop	{r7, pc}

08001554 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001554:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800158c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001558:	f7ff f836 	bl	80005c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800155c:	480c      	ldr	r0, [pc, #48]	@ (8001590 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800155e:	490d      	ldr	r1, [pc, #52]	@ (8001594 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001560:	4a0d      	ldr	r2, [pc, #52]	@ (8001598 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001562:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001564:	e002      	b.n	800156c <LoopCopyDataInit>

08001566 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001566:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001568:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800156a:	3304      	adds	r3, #4

0800156c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800156c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800156e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001570:	d3f9      	bcc.n	8001566 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001572:	4a0a      	ldr	r2, [pc, #40]	@ (800159c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001574:	4c0a      	ldr	r4, [pc, #40]	@ (80015a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001576:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001578:	e001      	b.n	800157e <LoopFillZerobss>

0800157a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800157a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800157c:	3204      	adds	r2, #4

0800157e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800157e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001580:	d3fb      	bcc.n	800157a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001582:	f005 fe3f 	bl	8007204 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001586:	f7ff f8b5 	bl	80006f4 <main>
  bx  lr
 800158a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800158c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001590:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001594:	2400004c 	.word	0x2400004c
  ldr r2, =_sidata
 8001598:	080073ec 	.word	0x080073ec
  ldr r2, =_sbss
 800159c:	2400004c 	.word	0x2400004c
  ldr r4, =_ebss
 80015a0:	240001a4 	.word	0x240001a4

080015a4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015a4:	e7fe      	b.n	80015a4 <ADC3_IRQHandler>
	...

080015a8 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b08c      	sub	sp, #48	@ 0x30
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80015b2:	2300      	movs	r3, #0
 80015b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80015b6:	79fb      	ldrb	r3, [r7, #7]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d009      	beq.n	80015d0 <BSP_LED_Init+0x28>
 80015bc:	79fb      	ldrb	r3, [r7, #7]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d006      	beq.n	80015d0 <BSP_LED_Init+0x28>
 80015c2:	79fb      	ldrb	r3, [r7, #7]
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d003      	beq.n	80015d0 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80015c8:	f06f 0301 	mvn.w	r3, #1
 80015cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80015ce:	e055      	b.n	800167c <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 80015d0:	79fb      	ldrb	r3, [r7, #7]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d10f      	bne.n	80015f6 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 80015d6:	4b2c      	ldr	r3, [pc, #176]	@ (8001688 <BSP_LED_Init+0xe0>)
 80015d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015dc:	4a2a      	ldr	r2, [pc, #168]	@ (8001688 <BSP_LED_Init+0xe0>)
 80015de:	f043 0302 	orr.w	r3, r3, #2
 80015e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015e6:	4b28      	ldr	r3, [pc, #160]	@ (8001688 <BSP_LED_Init+0xe0>)
 80015e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	617b      	str	r3, [r7, #20]
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	e021      	b.n	800163a <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 80015f6:	79fb      	ldrb	r3, [r7, #7]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d10f      	bne.n	800161c <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 80015fc:	4b22      	ldr	r3, [pc, #136]	@ (8001688 <BSP_LED_Init+0xe0>)
 80015fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001602:	4a21      	ldr	r2, [pc, #132]	@ (8001688 <BSP_LED_Init+0xe0>)
 8001604:	f043 0310 	orr.w	r3, r3, #16
 8001608:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800160c:	4b1e      	ldr	r3, [pc, #120]	@ (8001688 <BSP_LED_Init+0xe0>)
 800160e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001612:	f003 0310 	and.w	r3, r3, #16
 8001616:	613b      	str	r3, [r7, #16]
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	e00e      	b.n	800163a <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 800161c:	4b1a      	ldr	r3, [pc, #104]	@ (8001688 <BSP_LED_Init+0xe0>)
 800161e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001622:	4a19      	ldr	r2, [pc, #100]	@ (8001688 <BSP_LED_Init+0xe0>)
 8001624:	f043 0302 	orr.w	r3, r3, #2
 8001628:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800162c:	4b16      	ldr	r3, [pc, #88]	@ (8001688 <BSP_LED_Init+0xe0>)
 800162e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 800163a:	79fb      	ldrb	r3, [r7, #7]
 800163c:	4a13      	ldr	r2, [pc, #76]	@ (800168c <BSP_LED_Init+0xe4>)
 800163e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001642:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001644:	2301      	movs	r3, #1
 8001646:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001648:	2300      	movs	r3, #0
 800164a:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800164c:	2303      	movs	r3, #3
 800164e:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001650:	79fb      	ldrb	r3, [r7, #7]
 8001652:	4a0f      	ldr	r2, [pc, #60]	@ (8001690 <BSP_LED_Init+0xe8>)
 8001654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001658:	f107 0218 	add.w	r2, r7, #24
 800165c:	4611      	mov	r1, r2
 800165e:	4618      	mov	r0, r3
 8001660:	f000 fbc0 	bl	8001de4 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001664:	79fb      	ldrb	r3, [r7, #7]
 8001666:	4a0a      	ldr	r2, [pc, #40]	@ (8001690 <BSP_LED_Init+0xe8>)
 8001668:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800166c:	79fb      	ldrb	r3, [r7, #7]
 800166e:	4a07      	ldr	r2, [pc, #28]	@ (800168c <BSP_LED_Init+0xe4>)
 8001670:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001674:	2200      	movs	r2, #0
 8001676:	4619      	mov	r1, r3
 8001678:	f000 fd64 	bl	8002144 <HAL_GPIO_WritePin>
  }

  return ret;
 800167c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800167e:	4618      	mov	r0, r3
 8001680:	3730      	adds	r7, #48	@ 0x30
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	58024400 	.word	0x58024400
 800168c:	080073b8 	.word	0x080073b8
 8001690:	2400002c 	.word	0x2400002c

08001694 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b088      	sub	sp, #32
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	460a      	mov	r2, r1
 800169e:	71fb      	strb	r3, [r7, #7]
 80016a0:	4613      	mov	r3, r2
 80016a2:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 80016a4:	4b2e      	ldr	r3, [pc, #184]	@ (8001760 <BSP_PB_Init+0xcc>)
 80016a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016aa:	4a2d      	ldr	r2, [pc, #180]	@ (8001760 <BSP_PB_Init+0xcc>)
 80016ac:	f043 0304 	orr.w	r3, r3, #4
 80016b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016b4:	4b2a      	ldr	r3, [pc, #168]	@ (8001760 <BSP_PB_Init+0xcc>)
 80016b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016ba:	f003 0304 	and.w	r3, r3, #4
 80016be:	60bb      	str	r3, [r7, #8]
 80016c0:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 80016c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016c6:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80016c8:	2302      	movs	r3, #2
 80016ca:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80016cc:	2302      	movs	r3, #2
 80016ce:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 80016d0:	79bb      	ldrb	r3, [r7, #6]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d10c      	bne.n	80016f0 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80016d6:	2300      	movs	r3, #0
 80016d8:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 80016da:	79fb      	ldrb	r3, [r7, #7]
 80016dc:	4a21      	ldr	r2, [pc, #132]	@ (8001764 <BSP_PB_Init+0xd0>)
 80016de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016e2:	f107 020c 	add.w	r2, r7, #12
 80016e6:	4611      	mov	r1, r2
 80016e8:	4618      	mov	r0, r3
 80016ea:	f000 fb7b 	bl	8001de4 <HAL_GPIO_Init>
 80016ee:	e031      	b.n	8001754 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80016f0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80016f4:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80016f6:	79fb      	ldrb	r3, [r7, #7]
 80016f8:	4a1a      	ldr	r2, [pc, #104]	@ (8001764 <BSP_PB_Init+0xd0>)
 80016fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016fe:	f107 020c 	add.w	r2, r7, #12
 8001702:	4611      	mov	r1, r2
 8001704:	4618      	mov	r0, r3
 8001706:	f000 fb6d 	bl	8001de4 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 800170a:	79fb      	ldrb	r3, [r7, #7]
 800170c:	00db      	lsls	r3, r3, #3
 800170e:	4a16      	ldr	r2, [pc, #88]	@ (8001768 <BSP_PB_Init+0xd4>)
 8001710:	441a      	add	r2, r3
 8001712:	79fb      	ldrb	r3, [r7, #7]
 8001714:	4915      	ldr	r1, [pc, #84]	@ (800176c <BSP_PB_Init+0xd8>)
 8001716:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800171a:	4619      	mov	r1, r3
 800171c:	4610      	mov	r0, r2
 800171e:	f000 fb10 	bl	8001d42 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001722:	79fb      	ldrb	r3, [r7, #7]
 8001724:	00db      	lsls	r3, r3, #3
 8001726:	4a10      	ldr	r2, [pc, #64]	@ (8001768 <BSP_PB_Init+0xd4>)
 8001728:	1898      	adds	r0, r3, r2
 800172a:	79fb      	ldrb	r3, [r7, #7]
 800172c:	4a10      	ldr	r2, [pc, #64]	@ (8001770 <BSP_PB_Init+0xdc>)
 800172e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001732:	461a      	mov	r2, r3
 8001734:	2100      	movs	r1, #0
 8001736:	f000 fae5 	bl	8001d04 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 800173a:	2028      	movs	r0, #40	@ 0x28
 800173c:	79fb      	ldrb	r3, [r7, #7]
 800173e:	4a0d      	ldr	r2, [pc, #52]	@ (8001774 <BSP_PB_Init+0xe0>)
 8001740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001744:	2200      	movs	r2, #0
 8001746:	4619      	mov	r1, r3
 8001748:	f000 fa93 	bl	8001c72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800174c:	2328      	movs	r3, #40	@ 0x28
 800174e:	4618      	mov	r0, r3
 8001750:	f000 faa9 	bl	8001ca6 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001754:	2300      	movs	r3, #0
}
 8001756:	4618      	mov	r0, r3
 8001758:	3720      	adds	r7, #32
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	58024400 	.word	0x58024400
 8001764:	24000038 	.word	0x24000038
 8001768:	24000104 	.word	0x24000104
 800176c:	080073c0 	.word	0x080073c0
 8001770:	2400003c 	.word	0x2400003c
 8001774:	24000040 	.word	0x24000040

08001778 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	4603      	mov	r3, r0
 8001780:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001782:	79fb      	ldrb	r3, [r7, #7]
 8001784:	00db      	lsls	r3, r3, #3
 8001786:	4a04      	ldr	r2, [pc, #16]	@ (8001798 <BSP_PB_IRQHandler+0x20>)
 8001788:	4413      	add	r3, r2
 800178a:	4618      	mov	r0, r3
 800178c:	f000 faee 	bl	8001d6c <HAL_EXTI_IRQHandler>
}
 8001790:	bf00      	nop
 8001792:	3708      	adds	r7, #8
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	24000104 	.word	0x24000104

0800179c <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 80017a6:	bf00      	nop
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
	...

080017b4 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	6039      	str	r1, [r7, #0]
 80017be:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80017c0:	2300      	movs	r3, #0
 80017c2:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 80017c4:	79fb      	ldrb	r3, [r7, #7]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d003      	beq.n	80017d2 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80017ca:	f06f 0301 	mvn.w	r3, #1
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	e018      	b.n	8001804 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 80017d2:	79fb      	ldrb	r3, [r7, #7]
 80017d4:	2294      	movs	r2, #148	@ 0x94
 80017d6:	fb02 f303 	mul.w	r3, r2, r3
 80017da:	4a0d      	ldr	r2, [pc, #52]	@ (8001810 <BSP_COM_Init+0x5c>)
 80017dc:	4413      	add	r3, r2
 80017de:	4618      	mov	r0, r3
 80017e0:	f000 f852 	bl	8001888 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 80017e4:	79fb      	ldrb	r3, [r7, #7]
 80017e6:	2294      	movs	r2, #148	@ 0x94
 80017e8:	fb02 f303 	mul.w	r3, r2, r3
 80017ec:	4a08      	ldr	r2, [pc, #32]	@ (8001810 <BSP_COM_Init+0x5c>)
 80017ee:	4413      	add	r3, r2
 80017f0:	6839      	ldr	r1, [r7, #0]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f000 f80e 	bl	8001814 <MX_USART3_Init>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d002      	beq.n	8001804 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80017fe:	f06f 0303 	mvn.w	r3, #3
 8001802:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001804:	68fb      	ldr	r3, [r7, #12]
}
 8001806:	4618      	mov	r0, r3
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	2400010c 	.word	0x2400010c

08001814 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 800181e:	4b15      	ldr	r3, [pc, #84]	@ (8001874 <MX_USART3_Init+0x60>)
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	220c      	movs	r2, #12
 8001832:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	895b      	ldrh	r3, [r3, #10]
 8001838:	461a      	mov	r2, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685a      	ldr	r2, [r3, #4]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	891b      	ldrh	r3, [r3, #8]
 800184a:	461a      	mov	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	899b      	ldrh	r3, [r3, #12]
 8001854:	461a      	mov	r2, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001860:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f004 fce3 	bl	800622e <HAL_UART_Init>
 8001868:	4603      	mov	r3, r0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	24000028 	.word	0x24000028

08001878 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 800187c:	2000      	movs	r0, #0
 800187e:	f7ff ff8d 	bl	800179c <BSP_PB_Callback>
}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
	...

08001888 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b08a      	sub	sp, #40	@ 0x28
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001890:	4b27      	ldr	r3, [pc, #156]	@ (8001930 <COM1_MspInit+0xa8>)
 8001892:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001896:	4a26      	ldr	r2, [pc, #152]	@ (8001930 <COM1_MspInit+0xa8>)
 8001898:	f043 0308 	orr.w	r3, r3, #8
 800189c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018a0:	4b23      	ldr	r3, [pc, #140]	@ (8001930 <COM1_MspInit+0xa8>)
 80018a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018a6:	f003 0308 	and.w	r3, r3, #8
 80018aa:	613b      	str	r3, [r7, #16]
 80018ac:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 80018ae:	4b20      	ldr	r3, [pc, #128]	@ (8001930 <COM1_MspInit+0xa8>)
 80018b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018b4:	4a1e      	ldr	r2, [pc, #120]	@ (8001930 <COM1_MspInit+0xa8>)
 80018b6:	f043 0308 	orr.w	r3, r3, #8
 80018ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018be:	4b1c      	ldr	r3, [pc, #112]	@ (8001930 <COM1_MspInit+0xa8>)
 80018c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018c4:	f003 0308 	and.w	r3, r3, #8
 80018c8:	60fb      	str	r3, [r7, #12]
 80018ca:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 80018cc:	4b18      	ldr	r3, [pc, #96]	@ (8001930 <COM1_MspInit+0xa8>)
 80018ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80018d2:	4a17      	ldr	r2, [pc, #92]	@ (8001930 <COM1_MspInit+0xa8>)
 80018d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018d8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80018dc:	4b14      	ldr	r3, [pc, #80]	@ (8001930 <COM1_MspInit+0xa8>)
 80018de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80018e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018e6:	60bb      	str	r3, [r7, #8]
 80018e8:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 80018ea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018ee:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80018f0:	2302      	movs	r3, #2
 80018f2:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80018f4:	2302      	movs	r3, #2
 80018f6:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80018f8:	2301      	movs	r3, #1
 80018fa:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 80018fc:	2307      	movs	r3, #7
 80018fe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001900:	f107 0314 	add.w	r3, r7, #20
 8001904:	4619      	mov	r1, r3
 8001906:	480b      	ldr	r0, [pc, #44]	@ (8001934 <COM1_MspInit+0xac>)
 8001908:	f000 fa6c 	bl	8001de4 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 800190c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001910:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001912:	2302      	movs	r3, #2
 8001914:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001916:	2307      	movs	r3, #7
 8001918:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 800191a:	f107 0314 	add.w	r3, r7, #20
 800191e:	4619      	mov	r1, r3
 8001920:	4804      	ldr	r0, [pc, #16]	@ (8001934 <COM1_MspInit+0xac>)
 8001922:	f000 fa5f 	bl	8001de4 <HAL_GPIO_Init>
}
 8001926:	bf00      	nop
 8001928:	3728      	adds	r7, #40	@ 0x28
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	58024400 	.word	0x58024400
 8001934:	58020c00 	.word	0x58020c00

08001938 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800193e:	2003      	movs	r0, #3
 8001940:	f000 f98c 	bl	8001c5c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001944:	f001 faca 	bl	8002edc <HAL_RCC_GetSysClockFreq>
 8001948:	4602      	mov	r2, r0
 800194a:	4b15      	ldr	r3, [pc, #84]	@ (80019a0 <HAL_Init+0x68>)
 800194c:	699b      	ldr	r3, [r3, #24]
 800194e:	0a1b      	lsrs	r3, r3, #8
 8001950:	f003 030f 	and.w	r3, r3, #15
 8001954:	4913      	ldr	r1, [pc, #76]	@ (80019a4 <HAL_Init+0x6c>)
 8001956:	5ccb      	ldrb	r3, [r1, r3]
 8001958:	f003 031f 	and.w	r3, r3, #31
 800195c:	fa22 f303 	lsr.w	r3, r2, r3
 8001960:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001962:	4b0f      	ldr	r3, [pc, #60]	@ (80019a0 <HAL_Init+0x68>)
 8001964:	699b      	ldr	r3, [r3, #24]
 8001966:	f003 030f 	and.w	r3, r3, #15
 800196a:	4a0e      	ldr	r2, [pc, #56]	@ (80019a4 <HAL_Init+0x6c>)
 800196c:	5cd3      	ldrb	r3, [r2, r3]
 800196e:	f003 031f 	and.w	r3, r3, #31
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	fa22 f303 	lsr.w	r3, r2, r3
 8001978:	4a0b      	ldr	r2, [pc, #44]	@ (80019a8 <HAL_Init+0x70>)
 800197a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800197c:	4a0b      	ldr	r2, [pc, #44]	@ (80019ac <HAL_Init+0x74>)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001982:	2000      	movs	r0, #0
 8001984:	f000 f814 	bl	80019b0 <HAL_InitTick>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e002      	b.n	8001998 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001992:	f7ff fd25 	bl	80013e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001996:	2300      	movs	r3, #0
}
 8001998:	4618      	mov	r0, r3
 800199a:	3708      	adds	r7, #8
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	58024400 	.word	0x58024400
 80019a4:	080073a8 	.word	0x080073a8
 80019a8:	24000004 	.word	0x24000004
 80019ac:	24000000 	.word	0x24000000

080019b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80019b8:	4b15      	ldr	r3, [pc, #84]	@ (8001a10 <HAL_InitTick+0x60>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d101      	bne.n	80019c4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e021      	b.n	8001a08 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80019c4:	4b13      	ldr	r3, [pc, #76]	@ (8001a14 <HAL_InitTick+0x64>)
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	4b11      	ldr	r3, [pc, #68]	@ (8001a10 <HAL_InitTick+0x60>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	4619      	mov	r1, r3
 80019ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80019d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019da:	4618      	mov	r0, r3
 80019dc:	f000 f971 	bl	8001cc2 <HAL_SYSTICK_Config>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e00e      	b.n	8001a08 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2b0f      	cmp	r3, #15
 80019ee:	d80a      	bhi.n	8001a06 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019f0:	2200      	movs	r2, #0
 80019f2:	6879      	ldr	r1, [r7, #4]
 80019f4:	f04f 30ff 	mov.w	r0, #4294967295
 80019f8:	f000 f93b 	bl	8001c72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019fc:	4a06      	ldr	r2, [pc, #24]	@ (8001a18 <HAL_InitTick+0x68>)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a02:	2300      	movs	r3, #0
 8001a04:	e000      	b.n	8001a08 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3708      	adds	r7, #8
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	24000048 	.word	0x24000048
 8001a14:	24000000 	.word	0x24000000
 8001a18:	24000044 	.word	0x24000044

08001a1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a20:	4b06      	ldr	r3, [pc, #24]	@ (8001a3c <HAL_IncTick+0x20>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	461a      	mov	r2, r3
 8001a26:	4b06      	ldr	r3, [pc, #24]	@ (8001a40 <HAL_IncTick+0x24>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	4a04      	ldr	r2, [pc, #16]	@ (8001a40 <HAL_IncTick+0x24>)
 8001a2e:	6013      	str	r3, [r2, #0]
}
 8001a30:	bf00      	nop
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	24000048 	.word	0x24000048
 8001a40:	240001a0 	.word	0x240001a0

08001a44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  return uwTick;
 8001a48:	4b03      	ldr	r3, [pc, #12]	@ (8001a58 <HAL_GetTick+0x14>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	240001a0 	.word	0x240001a0

08001a5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a64:	f7ff ffee 	bl	8001a44 <HAL_GetTick>
 8001a68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a74:	d005      	beq.n	8001a82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a76:	4b0a      	ldr	r3, [pc, #40]	@ (8001aa0 <HAL_Delay+0x44>)
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	4413      	add	r3, r2
 8001a80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a82:	bf00      	nop
 8001a84:	f7ff ffde 	bl	8001a44 <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	68fa      	ldr	r2, [r7, #12]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d8f7      	bhi.n	8001a84 <HAL_Delay+0x28>
  {
  }
}
 8001a94:	bf00      	nop
 8001a96:	bf00      	nop
 8001a98:	3710      	adds	r7, #16
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	24000048 	.word	0x24000048

08001aa4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001aa8:	4b03      	ldr	r3, [pc, #12]	@ (8001ab8 <HAL_GetREVID+0x14>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	0c1b      	lsrs	r3, r3, #16
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	5c001000 	.word	0x5c001000

08001abc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f003 0307 	and.w	r3, r3, #7
 8001aca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001acc:	4b0b      	ldr	r3, [pc, #44]	@ (8001afc <__NVIC_SetPriorityGrouping+0x40>)
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ad2:	68ba      	ldr	r2, [r7, #8]
 8001ad4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ad8:	4013      	ands	r3, r2
 8001ada:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ae4:	4b06      	ldr	r3, [pc, #24]	@ (8001b00 <__NVIC_SetPriorityGrouping+0x44>)
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aea:	4a04      	ldr	r2, [pc, #16]	@ (8001afc <__NVIC_SetPriorityGrouping+0x40>)
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	60d3      	str	r3, [r2, #12]
}
 8001af0:	bf00      	nop
 8001af2:	3714      	adds	r7, #20
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	e000ed00 	.word	0xe000ed00
 8001b00:	05fa0000 	.word	0x05fa0000

08001b04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b08:	4b04      	ldr	r3, [pc, #16]	@ (8001b1c <__NVIC_GetPriorityGrouping+0x18>)
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	0a1b      	lsrs	r3, r3, #8
 8001b0e:	f003 0307 	and.w	r3, r3, #7
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	e000ed00 	.word	0xe000ed00

08001b20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	4603      	mov	r3, r0
 8001b28:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	db0b      	blt.n	8001b4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b32:	88fb      	ldrh	r3, [r7, #6]
 8001b34:	f003 021f 	and.w	r2, r3, #31
 8001b38:	4907      	ldr	r1, [pc, #28]	@ (8001b58 <__NVIC_EnableIRQ+0x38>)
 8001b3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b3e:	095b      	lsrs	r3, r3, #5
 8001b40:	2001      	movs	r0, #1
 8001b42:	fa00 f202 	lsl.w	r2, r0, r2
 8001b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b4a:	bf00      	nop
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	e000e100 	.word	0xe000e100

08001b5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	6039      	str	r1, [r7, #0]
 8001b66:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	db0a      	blt.n	8001b86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	b2da      	uxtb	r2, r3
 8001b74:	490c      	ldr	r1, [pc, #48]	@ (8001ba8 <__NVIC_SetPriority+0x4c>)
 8001b76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b7a:	0112      	lsls	r2, r2, #4
 8001b7c:	b2d2      	uxtb	r2, r2
 8001b7e:	440b      	add	r3, r1
 8001b80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b84:	e00a      	b.n	8001b9c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	b2da      	uxtb	r2, r3
 8001b8a:	4908      	ldr	r1, [pc, #32]	@ (8001bac <__NVIC_SetPriority+0x50>)
 8001b8c:	88fb      	ldrh	r3, [r7, #6]
 8001b8e:	f003 030f 	and.w	r3, r3, #15
 8001b92:	3b04      	subs	r3, #4
 8001b94:	0112      	lsls	r2, r2, #4
 8001b96:	b2d2      	uxtb	r2, r2
 8001b98:	440b      	add	r3, r1
 8001b9a:	761a      	strb	r2, [r3, #24]
}
 8001b9c:	bf00      	nop
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr
 8001ba8:	e000e100 	.word	0xe000e100
 8001bac:	e000ed00 	.word	0xe000ed00

08001bb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b089      	sub	sp, #36	@ 0x24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f003 0307 	and.w	r3, r3, #7
 8001bc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	f1c3 0307 	rsb	r3, r3, #7
 8001bca:	2b04      	cmp	r3, #4
 8001bcc:	bf28      	it	cs
 8001bce:	2304      	movcs	r3, #4
 8001bd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	3304      	adds	r3, #4
 8001bd6:	2b06      	cmp	r3, #6
 8001bd8:	d902      	bls.n	8001be0 <NVIC_EncodePriority+0x30>
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	3b03      	subs	r3, #3
 8001bde:	e000      	b.n	8001be2 <NVIC_EncodePriority+0x32>
 8001be0:	2300      	movs	r3, #0
 8001be2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be4:	f04f 32ff 	mov.w	r2, #4294967295
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	43da      	mvns	r2, r3
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	401a      	ands	r2, r3
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bf8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8001c02:	43d9      	mvns	r1, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c08:	4313      	orrs	r3, r2
         );
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3724      	adds	r7, #36	@ 0x24
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
	...

08001c18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	3b01      	subs	r3, #1
 8001c24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c28:	d301      	bcc.n	8001c2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e00f      	b.n	8001c4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c2e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c58 <SysTick_Config+0x40>)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	3b01      	subs	r3, #1
 8001c34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c36:	210f      	movs	r1, #15
 8001c38:	f04f 30ff 	mov.w	r0, #4294967295
 8001c3c:	f7ff ff8e 	bl	8001b5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c40:	4b05      	ldr	r3, [pc, #20]	@ (8001c58 <SysTick_Config+0x40>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c46:	4b04      	ldr	r3, [pc, #16]	@ (8001c58 <SysTick_Config+0x40>)
 8001c48:	2207      	movs	r2, #7
 8001c4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	e000e010 	.word	0xe000e010

08001c5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f7ff ff29 	bl	8001abc <__NVIC_SetPriorityGrouping>
}
 8001c6a:	bf00      	nop
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b086      	sub	sp, #24
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	4603      	mov	r3, r0
 8001c7a:	60b9      	str	r1, [r7, #8]
 8001c7c:	607a      	str	r2, [r7, #4]
 8001c7e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c80:	f7ff ff40 	bl	8001b04 <__NVIC_GetPriorityGrouping>
 8001c84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	68b9      	ldr	r1, [r7, #8]
 8001c8a:	6978      	ldr	r0, [r7, #20]
 8001c8c:	f7ff ff90 	bl	8001bb0 <NVIC_EncodePriority>
 8001c90:	4602      	mov	r2, r0
 8001c92:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c96:	4611      	mov	r1, r2
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff ff5f 	bl	8001b5c <__NVIC_SetPriority>
}
 8001c9e:	bf00      	nop
 8001ca0:	3718      	adds	r7, #24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b082      	sub	sp, #8
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	4603      	mov	r3, r0
 8001cae:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff ff33 	bl	8001b20 <__NVIC_EnableIRQ>
}
 8001cba:	bf00      	nop
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b082      	sub	sp, #8
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f7ff ffa4 	bl	8001c18 <SysTick_Config>
 8001cd0:	4603      	mov	r3, r0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
	...

08001cdc <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8001ce0:	4b07      	ldr	r3, [pc, #28]	@ (8001d00 <HAL_GetCurrentCPUID+0x24>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	091b      	lsrs	r3, r3, #4
 8001ce6:	f003 030f 	and.w	r3, r3, #15
 8001cea:	2b07      	cmp	r3, #7
 8001cec:	d101      	bne.n	8001cf2 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e000      	b.n	8001cf4 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8001cf2:	2301      	movs	r3, #1
  }
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	e000ed00 	.word	0xe000ed00

08001d04 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8001d04:	b480      	push	{r7}
 8001d06:	b087      	sub	sp, #28
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	607a      	str	r2, [r7, #4]
 8001d10:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001d12:	2300      	movs	r3, #0
 8001d14:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d101      	bne.n	8001d20 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e00a      	b.n	8001d36 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8001d20:	7afb      	ldrb	r3, [r7, #11]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d103      	bne.n	8001d2e <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	605a      	str	r2, [r3, #4]
      break;
 8001d2c:	e002      	b.n	8001d34 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	75fb      	strb	r3, [r7, #23]
      break;
 8001d32:	bf00      	nop
  }

  return status;
 8001d34:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	371c      	adds	r7, #28
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr

08001d42 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8001d42:	b480      	push	{r7}
 8001d44:	b083      	sub	sp, #12
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
 8001d4a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d101      	bne.n	8001d56 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e003      	b.n	8001d5e <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	683a      	ldr	r2, [r7, #0]
 8001d5a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
  }
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
	...

08001d6c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	0c1b      	lsrs	r3, r3, #16
 8001d7a:	f003 0303 	and.w	r3, r3, #3
 8001d7e:	613b      	str	r3, [r7, #16]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 031f 	and.w	r3, r3, #31
 8001d88:	2201      	movs	r2, #1
 8001d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8e:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8001d90:	f7ff ffa4 	bl	8001cdc <HAL_GetCurrentCPUID>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b03      	cmp	r3, #3
 8001d98:	d105      	bne.n	8001da6 <HAL_EXTI_IRQHandler+0x3a>
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	011a      	lsls	r2, r3, #4
 8001d9e:	4b0f      	ldr	r3, [pc, #60]	@ (8001ddc <HAL_EXTI_IRQHandler+0x70>)
 8001da0:	4413      	add	r3, r2
 8001da2:	617b      	str	r3, [r7, #20]
 8001da4:	e004      	b.n	8001db0 <HAL_EXTI_IRQHandler+0x44>
  }
  else /* Cortex-M4*/
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	011a      	lsls	r2, r3, #4
 8001daa:	4b0d      	ldr	r3, [pc, #52]	@ (8001de0 <HAL_EXTI_IRQHandler+0x74>)
 8001dac:	4413      	add	r3, r2
 8001dae:	617b      	str	r3, [r7, #20]
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	68fa      	ldr	r2, [r7, #12]
 8001db6:	4013      	ands	r3, r2
 8001db8:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d009      	beq.n	8001dd4 <HAL_EXTI_IRQHandler+0x68>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	68fa      	ldr	r2, [r7, #12]
 8001dc4:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d002      	beq.n	8001dd4 <HAL_EXTI_IRQHandler+0x68>
    {
      hexti->PendingCallback();
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	4798      	blx	r3
    }
  }
}
 8001dd4:	bf00      	nop
 8001dd6:	3718      	adds	r7, #24
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	58000088 	.word	0x58000088
 8001de0:	580000c8 	.word	0x580000c8

08001de4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b089      	sub	sp, #36	@ 0x24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001dee:	2300      	movs	r3, #0
 8001df0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001df2:	4b89      	ldr	r3, [pc, #548]	@ (8002018 <HAL_GPIO_Init+0x234>)
 8001df4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001df6:	e194      	b.n	8002122 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	2101      	movs	r1, #1
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	fa01 f303 	lsl.w	r3, r1, r3
 8001e04:	4013      	ands	r3, r2
 8001e06:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	f000 8186 	beq.w	800211c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f003 0303 	and.w	r3, r3, #3
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d005      	beq.n	8001e28 <HAL_GPIO_Init+0x44>
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f003 0303 	and.w	r3, r3, #3
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d130      	bne.n	8001e8a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	2203      	movs	r2, #3
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	68da      	ldr	r2, [r3, #12]
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e5e:	2201      	movs	r2, #1
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	fa02 f303 	lsl.w	r3, r2, r3
 8001e66:	43db      	mvns	r3, r3
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	091b      	lsrs	r3, r3, #4
 8001e74:	f003 0201 	and.w	r2, r3, #1
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f003 0303 	and.w	r3, r3, #3
 8001e92:	2b03      	cmp	r3, #3
 8001e94:	d017      	beq.n	8001ec6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	2203      	movs	r2, #3
 8001ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea6:	43db      	mvns	r3, r3
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	689a      	ldr	r2, [r3, #8]
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f003 0303 	and.w	r3, r3, #3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d123      	bne.n	8001f1a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	08da      	lsrs	r2, r3, #3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	3208      	adds	r2, #8
 8001eda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	f003 0307 	and.w	r3, r3, #7
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	220f      	movs	r2, #15
 8001eea:	fa02 f303 	lsl.w	r3, r2, r3
 8001eee:	43db      	mvns	r3, r3
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	691a      	ldr	r2, [r3, #16]
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	f003 0307 	and.w	r3, r3, #7
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	08da      	lsrs	r2, r3, #3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	3208      	adds	r2, #8
 8001f14:	69b9      	ldr	r1, [r7, #24]
 8001f16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	2203      	movs	r2, #3
 8001f26:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2a:	43db      	mvns	r3, r3
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f003 0203 	and.w	r2, r3, #3
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	f000 80e0 	beq.w	800211c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f5c:	4b2f      	ldr	r3, [pc, #188]	@ (800201c <HAL_GPIO_Init+0x238>)
 8001f5e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001f62:	4a2e      	ldr	r2, [pc, #184]	@ (800201c <HAL_GPIO_Init+0x238>)
 8001f64:	f043 0302 	orr.w	r3, r3, #2
 8001f68:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001f6c:	4b2b      	ldr	r3, [pc, #172]	@ (800201c <HAL_GPIO_Init+0x238>)
 8001f6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	60fb      	str	r3, [r7, #12]
 8001f78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f7a:	4a29      	ldr	r2, [pc, #164]	@ (8002020 <HAL_GPIO_Init+0x23c>)
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	089b      	lsrs	r3, r3, #2
 8001f80:	3302      	adds	r3, #2
 8001f82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	f003 0303 	and.w	r3, r3, #3
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	220f      	movs	r2, #15
 8001f92:	fa02 f303 	lsl.w	r3, r2, r3
 8001f96:	43db      	mvns	r3, r3
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a20      	ldr	r2, [pc, #128]	@ (8002024 <HAL_GPIO_Init+0x240>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d052      	beq.n	800204c <HAL_GPIO_Init+0x268>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a1f      	ldr	r2, [pc, #124]	@ (8002028 <HAL_GPIO_Init+0x244>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d031      	beq.n	8002012 <HAL_GPIO_Init+0x22e>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a1e      	ldr	r2, [pc, #120]	@ (800202c <HAL_GPIO_Init+0x248>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d02b      	beq.n	800200e <HAL_GPIO_Init+0x22a>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a1d      	ldr	r2, [pc, #116]	@ (8002030 <HAL_GPIO_Init+0x24c>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d025      	beq.n	800200a <HAL_GPIO_Init+0x226>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a1c      	ldr	r2, [pc, #112]	@ (8002034 <HAL_GPIO_Init+0x250>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d01f      	beq.n	8002006 <HAL_GPIO_Init+0x222>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a1b      	ldr	r2, [pc, #108]	@ (8002038 <HAL_GPIO_Init+0x254>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d019      	beq.n	8002002 <HAL_GPIO_Init+0x21e>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a1a      	ldr	r2, [pc, #104]	@ (800203c <HAL_GPIO_Init+0x258>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d013      	beq.n	8001ffe <HAL_GPIO_Init+0x21a>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a19      	ldr	r2, [pc, #100]	@ (8002040 <HAL_GPIO_Init+0x25c>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d00d      	beq.n	8001ffa <HAL_GPIO_Init+0x216>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a18      	ldr	r2, [pc, #96]	@ (8002044 <HAL_GPIO_Init+0x260>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d007      	beq.n	8001ff6 <HAL_GPIO_Init+0x212>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a17      	ldr	r2, [pc, #92]	@ (8002048 <HAL_GPIO_Init+0x264>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d101      	bne.n	8001ff2 <HAL_GPIO_Init+0x20e>
 8001fee:	2309      	movs	r3, #9
 8001ff0:	e02d      	b.n	800204e <HAL_GPIO_Init+0x26a>
 8001ff2:	230a      	movs	r3, #10
 8001ff4:	e02b      	b.n	800204e <HAL_GPIO_Init+0x26a>
 8001ff6:	2308      	movs	r3, #8
 8001ff8:	e029      	b.n	800204e <HAL_GPIO_Init+0x26a>
 8001ffa:	2307      	movs	r3, #7
 8001ffc:	e027      	b.n	800204e <HAL_GPIO_Init+0x26a>
 8001ffe:	2306      	movs	r3, #6
 8002000:	e025      	b.n	800204e <HAL_GPIO_Init+0x26a>
 8002002:	2305      	movs	r3, #5
 8002004:	e023      	b.n	800204e <HAL_GPIO_Init+0x26a>
 8002006:	2304      	movs	r3, #4
 8002008:	e021      	b.n	800204e <HAL_GPIO_Init+0x26a>
 800200a:	2303      	movs	r3, #3
 800200c:	e01f      	b.n	800204e <HAL_GPIO_Init+0x26a>
 800200e:	2302      	movs	r3, #2
 8002010:	e01d      	b.n	800204e <HAL_GPIO_Init+0x26a>
 8002012:	2301      	movs	r3, #1
 8002014:	e01b      	b.n	800204e <HAL_GPIO_Init+0x26a>
 8002016:	bf00      	nop
 8002018:	58000080 	.word	0x58000080
 800201c:	58024400 	.word	0x58024400
 8002020:	58000400 	.word	0x58000400
 8002024:	58020000 	.word	0x58020000
 8002028:	58020400 	.word	0x58020400
 800202c:	58020800 	.word	0x58020800
 8002030:	58020c00 	.word	0x58020c00
 8002034:	58021000 	.word	0x58021000
 8002038:	58021400 	.word	0x58021400
 800203c:	58021800 	.word	0x58021800
 8002040:	58021c00 	.word	0x58021c00
 8002044:	58022000 	.word	0x58022000
 8002048:	58022400 	.word	0x58022400
 800204c:	2300      	movs	r3, #0
 800204e:	69fa      	ldr	r2, [r7, #28]
 8002050:	f002 0203 	and.w	r2, r2, #3
 8002054:	0092      	lsls	r2, r2, #2
 8002056:	4093      	lsls	r3, r2
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	4313      	orrs	r3, r2
 800205c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800205e:	4938      	ldr	r1, [pc, #224]	@ (8002140 <HAL_GPIO_Init+0x35c>)
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	089b      	lsrs	r3, r3, #2
 8002064:	3302      	adds	r3, #2
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800206c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	43db      	mvns	r3, r3
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	4013      	ands	r3, r2
 800207c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d003      	beq.n	8002092 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	4313      	orrs	r3, r2
 8002090:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002092:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800209a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	43db      	mvns	r3, r3
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	4013      	ands	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d003      	beq.n	80020c0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	4313      	orrs	r3, r2
 80020be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80020c0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	43db      	mvns	r3, r3
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	4013      	ands	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d003      	beq.n	80020ec <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	43db      	mvns	r3, r3
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	4013      	ands	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d003      	beq.n	8002116 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	4313      	orrs	r3, r2
 8002114:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	3301      	adds	r3, #1
 8002120:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	fa22 f303 	lsr.w	r3, r2, r3
 800212c:	2b00      	cmp	r3, #0
 800212e:	f47f ae63 	bne.w	8001df8 <HAL_GPIO_Init+0x14>
  }
}
 8002132:	bf00      	nop
 8002134:	bf00      	nop
 8002136:	3724      	adds	r7, #36	@ 0x24
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr
 8002140:	58000400 	.word	0x58000400

08002144 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	460b      	mov	r3, r1
 800214e:	807b      	strh	r3, [r7, #2]
 8002150:	4613      	mov	r3, r2
 8002152:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002154:	787b      	ldrb	r3, [r7, #1]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d003      	beq.n	8002162 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800215a:	887a      	ldrh	r2, [r7, #2]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002160:	e003      	b.n	800216a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002162:	887b      	ldrh	r3, [r7, #2]
 8002164:	041a      	lsls	r2, r3, #16
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	619a      	str	r2, [r3, #24]
}
 800216a:	bf00      	nop
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr

08002176 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002176:	b480      	push	{r7}
 8002178:	b085      	sub	sp, #20
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
 800217e:	460b      	mov	r3, r1
 8002180:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	695b      	ldr	r3, [r3, #20]
 8002186:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002188:	887a      	ldrh	r2, [r7, #2]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	4013      	ands	r3, r2
 800218e:	041a      	lsls	r2, r3, #16
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	43d9      	mvns	r1, r3
 8002194:	887b      	ldrh	r3, [r7, #2]
 8002196:	400b      	ands	r3, r1
 8002198:	431a      	orrs	r2, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	619a      	str	r2, [r3, #24]
}
 800219e:	bf00      	nop
 80021a0:	3714      	adds	r7, #20
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
	...

080021ac <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80021b4:	4a08      	ldr	r2, [pc, #32]	@ (80021d8 <HAL_HSEM_FastTake+0x2c>)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	3320      	adds	r3, #32
 80021ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021be:	4a07      	ldr	r2, [pc, #28]	@ (80021dc <HAL_HSEM_FastTake+0x30>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d101      	bne.n	80021c8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80021c4:	2300      	movs	r3, #0
 80021c6:	e000      	b.n	80021ca <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	58026400 	.word	0x58026400
 80021dc:	80000300 	.word	0x80000300

080021e0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80021ea:	4906      	ldr	r1, [pc, #24]	@ (8002204 <HAL_HSEM_Release+0x24>)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr
 8002204:	58026400 	.word	0x58026400

08002208 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002210:	4b29      	ldr	r3, [pc, #164]	@ (80022b8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	f003 0307 	and.w	r3, r3, #7
 8002218:	2b06      	cmp	r3, #6
 800221a:	d00a      	beq.n	8002232 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800221c:	4b26      	ldr	r3, [pc, #152]	@ (80022b8 <HAL_PWREx_ConfigSupply+0xb0>)
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	429a      	cmp	r2, r3
 8002228:	d001      	beq.n	800222e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e040      	b.n	80022b0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800222e:	2300      	movs	r3, #0
 8002230:	e03e      	b.n	80022b0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002232:	4b21      	ldr	r3, [pc, #132]	@ (80022b8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800223a:	491f      	ldr	r1, [pc, #124]	@ (80022b8 <HAL_PWREx_ConfigSupply+0xb0>)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	4313      	orrs	r3, r2
 8002240:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002242:	f7ff fbff 	bl	8001a44 <HAL_GetTick>
 8002246:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002248:	e009      	b.n	800225e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800224a:	f7ff fbfb 	bl	8001a44 <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002258:	d901      	bls.n	800225e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e028      	b.n	80022b0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800225e:	4b16      	ldr	r3, [pc, #88]	@ (80022b8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002266:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800226a:	d1ee      	bne.n	800224a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2b1e      	cmp	r3, #30
 8002270:	d008      	beq.n	8002284 <HAL_PWREx_ConfigSupply+0x7c>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2b2e      	cmp	r3, #46	@ 0x2e
 8002276:	d005      	beq.n	8002284 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2b1d      	cmp	r3, #29
 800227c:	d002      	beq.n	8002284 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2b2d      	cmp	r3, #45	@ 0x2d
 8002282:	d114      	bne.n	80022ae <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002284:	f7ff fbde 	bl	8001a44 <HAL_GetTick>
 8002288:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800228a:	e009      	b.n	80022a0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800228c:	f7ff fbda 	bl	8001a44 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800229a:	d901      	bls.n	80022a0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e007      	b.n	80022b0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80022a0:	4b05      	ldr	r3, [pc, #20]	@ (80022b8 <HAL_PWREx_ConfigSupply+0xb0>)
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022ac:	d1ee      	bne.n	800228c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80022ae:	2300      	movs	r3, #0
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3710      	adds	r7, #16
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	58024800 	.word	0x58024800

080022bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b08c      	sub	sp, #48	@ 0x30
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d102      	bne.n	80022d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	f000 bc48 	b.w	8002b60 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0301 	and.w	r3, r3, #1
 80022d8:	2b00      	cmp	r3, #0
 80022da:	f000 8088 	beq.w	80023ee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022de:	4b99      	ldr	r3, [pc, #612]	@ (8002544 <HAL_RCC_OscConfig+0x288>)
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80022e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80022e8:	4b96      	ldr	r3, [pc, #600]	@ (8002544 <HAL_RCC_OscConfig+0x288>)
 80022ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80022ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022f0:	2b10      	cmp	r3, #16
 80022f2:	d007      	beq.n	8002304 <HAL_RCC_OscConfig+0x48>
 80022f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022f6:	2b18      	cmp	r3, #24
 80022f8:	d111      	bne.n	800231e <HAL_RCC_OscConfig+0x62>
 80022fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022fc:	f003 0303 	and.w	r3, r3, #3
 8002300:	2b02      	cmp	r3, #2
 8002302:	d10c      	bne.n	800231e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002304:	4b8f      	ldr	r3, [pc, #572]	@ (8002544 <HAL_RCC_OscConfig+0x288>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d06d      	beq.n	80023ec <HAL_RCC_OscConfig+0x130>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d169      	bne.n	80023ec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	f000 bc21 	b.w	8002b60 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002326:	d106      	bne.n	8002336 <HAL_RCC_OscConfig+0x7a>
 8002328:	4b86      	ldr	r3, [pc, #536]	@ (8002544 <HAL_RCC_OscConfig+0x288>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a85      	ldr	r2, [pc, #532]	@ (8002544 <HAL_RCC_OscConfig+0x288>)
 800232e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002332:	6013      	str	r3, [r2, #0]
 8002334:	e02e      	b.n	8002394 <HAL_RCC_OscConfig+0xd8>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d10c      	bne.n	8002358 <HAL_RCC_OscConfig+0x9c>
 800233e:	4b81      	ldr	r3, [pc, #516]	@ (8002544 <HAL_RCC_OscConfig+0x288>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a80      	ldr	r2, [pc, #512]	@ (8002544 <HAL_RCC_OscConfig+0x288>)
 8002344:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002348:	6013      	str	r3, [r2, #0]
 800234a:	4b7e      	ldr	r3, [pc, #504]	@ (8002544 <HAL_RCC_OscConfig+0x288>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a7d      	ldr	r2, [pc, #500]	@ (8002544 <HAL_RCC_OscConfig+0x288>)
 8002350:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002354:	6013      	str	r3, [r2, #0]
 8002356:	e01d      	b.n	8002394 <HAL_RCC_OscConfig+0xd8>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002360:	d10c      	bne.n	800237c <HAL_RCC_OscConfig+0xc0>
 8002362:	4b78      	ldr	r3, [pc, #480]	@ (8002544 <HAL_RCC_OscConfig+0x288>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a77      	ldr	r2, [pc, #476]	@ (8002544 <HAL_RCC_OscConfig+0x288>)
 8002368:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800236c:	6013      	str	r3, [r2, #0]
 800236e:	4b75      	ldr	r3, [pc, #468]	@ (8002544 <HAL_RCC_OscConfig+0x288>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a74      	ldr	r2, [pc, #464]	@ (8002544 <HAL_RCC_OscConfig+0x288>)
 8002374:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002378:	6013      	str	r3, [r2, #0]
 800237a:	e00b      	b.n	8002394 <HAL_RCC_OscConfig+0xd8>
 800237c:	4b71      	ldr	r3, [pc, #452]	@ (8002544 <HAL_RCC_OscConfig+0x288>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a70      	ldr	r2, [pc, #448]	@ (8002544 <HAL_RCC_OscConfig+0x288>)
 8002382:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002386:	6013      	str	r3, [r2, #0]
 8002388:	4b6e      	ldr	r3, [pc, #440]	@ (8002544 <HAL_RCC_OscConfig+0x288>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a6d      	ldr	r2, [pc, #436]	@ (8002544 <HAL_RCC_OscConfig+0x288>)
 800238e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002392:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d013      	beq.n	80023c4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800239c:	f7ff fb52 	bl	8001a44 <HAL_GetTick>
 80023a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023a2:	e008      	b.n	80023b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023a4:	f7ff fb4e 	bl	8001a44 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	2b64      	cmp	r3, #100	@ 0x64
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e3d4      	b.n	8002b60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023b6:	4b63      	ldr	r3, [pc, #396]	@ (8002544 <HAL_RCC_OscConfig+0x288>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d0f0      	beq.n	80023a4 <HAL_RCC_OscConfig+0xe8>
 80023c2:	e014      	b.n	80023ee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c4:	f7ff fb3e 	bl	8001a44 <HAL_GetTick>
 80023c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80023ca:	e008      	b.n	80023de <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023cc:	f7ff fb3a 	bl	8001a44 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	2b64      	cmp	r3, #100	@ 0x64
 80023d8:	d901      	bls.n	80023de <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e3c0      	b.n	8002b60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80023de:	4b59      	ldr	r3, [pc, #356]	@ (8002544 <HAL_RCC_OscConfig+0x288>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d1f0      	bne.n	80023cc <HAL_RCC_OscConfig+0x110>
 80023ea:	e000      	b.n	80023ee <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	f000 80ca 	beq.w	8002590 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023fc:	4b51      	ldr	r3, [pc, #324]	@ (8002544 <HAL_RCC_OscConfig+0x288>)
 80023fe:	691b      	ldr	r3, [r3, #16]
 8002400:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002404:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002406:	4b4f      	ldr	r3, [pc, #316]	@ (8002544 <HAL_RCC_OscConfig+0x288>)
 8002408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800240a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800240c:	6a3b      	ldr	r3, [r7, #32]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d007      	beq.n	8002422 <HAL_RCC_OscConfig+0x166>
 8002412:	6a3b      	ldr	r3, [r7, #32]
 8002414:	2b18      	cmp	r3, #24
 8002416:	d156      	bne.n	80024c6 <HAL_RCC_OscConfig+0x20a>
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	f003 0303 	and.w	r3, r3, #3
 800241e:	2b00      	cmp	r3, #0
 8002420:	d151      	bne.n	80024c6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002422:	4b48      	ldr	r3, [pc, #288]	@ (8002544 <HAL_RCC_OscConfig+0x288>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0304 	and.w	r3, r3, #4
 800242a:	2b00      	cmp	r3, #0
 800242c:	d005      	beq.n	800243a <HAL_RCC_OscConfig+0x17e>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d101      	bne.n	800243a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e392      	b.n	8002b60 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800243a:	4b42      	ldr	r3, [pc, #264]	@ (8002544 <HAL_RCC_OscConfig+0x288>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f023 0219 	bic.w	r2, r3, #25
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	493f      	ldr	r1, [pc, #252]	@ (8002544 <HAL_RCC_OscConfig+0x288>)
 8002448:	4313      	orrs	r3, r2
 800244a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800244c:	f7ff fafa 	bl	8001a44 <HAL_GetTick>
 8002450:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002452:	e008      	b.n	8002466 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002454:	f7ff faf6 	bl	8001a44 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b02      	cmp	r3, #2
 8002460:	d901      	bls.n	8002466 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e37c      	b.n	8002b60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002466:	4b37      	ldr	r3, [pc, #220]	@ (8002544 <HAL_RCC_OscConfig+0x288>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0304 	and.w	r3, r3, #4
 800246e:	2b00      	cmp	r3, #0
 8002470:	d0f0      	beq.n	8002454 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002472:	f7ff fb17 	bl	8001aa4 <HAL_GetREVID>
 8002476:	4603      	mov	r3, r0
 8002478:	f241 0203 	movw	r2, #4099	@ 0x1003
 800247c:	4293      	cmp	r3, r2
 800247e:	d817      	bhi.n	80024b0 <HAL_RCC_OscConfig+0x1f4>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	2b40      	cmp	r3, #64	@ 0x40
 8002486:	d108      	bne.n	800249a <HAL_RCC_OscConfig+0x1de>
 8002488:	4b2e      	ldr	r3, [pc, #184]	@ (8002544 <HAL_RCC_OscConfig+0x288>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002490:	4a2c      	ldr	r2, [pc, #176]	@ (8002544 <HAL_RCC_OscConfig+0x288>)
 8002492:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002496:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002498:	e07a      	b.n	8002590 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800249a:	4b2a      	ldr	r3, [pc, #168]	@ (8002544 <HAL_RCC_OscConfig+0x288>)
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	031b      	lsls	r3, r3, #12
 80024a8:	4926      	ldr	r1, [pc, #152]	@ (8002544 <HAL_RCC_OscConfig+0x288>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024ae:	e06f      	b.n	8002590 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024b0:	4b24      	ldr	r3, [pc, #144]	@ (8002544 <HAL_RCC_OscConfig+0x288>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	691b      	ldr	r3, [r3, #16]
 80024bc:	061b      	lsls	r3, r3, #24
 80024be:	4921      	ldr	r1, [pc, #132]	@ (8002544 <HAL_RCC_OscConfig+0x288>)
 80024c0:	4313      	orrs	r3, r2
 80024c2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024c4:	e064      	b.n	8002590 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d047      	beq.n	800255e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80024ce:	4b1d      	ldr	r3, [pc, #116]	@ (8002544 <HAL_RCC_OscConfig+0x288>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f023 0219 	bic.w	r2, r3, #25
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	491a      	ldr	r1, [pc, #104]	@ (8002544 <HAL_RCC_OscConfig+0x288>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e0:	f7ff fab0 	bl	8001a44 <HAL_GetTick>
 80024e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024e6:	e008      	b.n	80024fa <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024e8:	f7ff faac 	bl	8001a44 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e332      	b.n	8002b60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024fa:	4b12      	ldr	r3, [pc, #72]	@ (8002544 <HAL_RCC_OscConfig+0x288>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0304 	and.w	r3, r3, #4
 8002502:	2b00      	cmp	r3, #0
 8002504:	d0f0      	beq.n	80024e8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002506:	f7ff facd 	bl	8001aa4 <HAL_GetREVID>
 800250a:	4603      	mov	r3, r0
 800250c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002510:	4293      	cmp	r3, r2
 8002512:	d819      	bhi.n	8002548 <HAL_RCC_OscConfig+0x28c>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	691b      	ldr	r3, [r3, #16]
 8002518:	2b40      	cmp	r3, #64	@ 0x40
 800251a:	d108      	bne.n	800252e <HAL_RCC_OscConfig+0x272>
 800251c:	4b09      	ldr	r3, [pc, #36]	@ (8002544 <HAL_RCC_OscConfig+0x288>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002524:	4a07      	ldr	r2, [pc, #28]	@ (8002544 <HAL_RCC_OscConfig+0x288>)
 8002526:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800252a:	6053      	str	r3, [r2, #4]
 800252c:	e030      	b.n	8002590 <HAL_RCC_OscConfig+0x2d4>
 800252e:	4b05      	ldr	r3, [pc, #20]	@ (8002544 <HAL_RCC_OscConfig+0x288>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	031b      	lsls	r3, r3, #12
 800253c:	4901      	ldr	r1, [pc, #4]	@ (8002544 <HAL_RCC_OscConfig+0x288>)
 800253e:	4313      	orrs	r3, r2
 8002540:	604b      	str	r3, [r1, #4]
 8002542:	e025      	b.n	8002590 <HAL_RCC_OscConfig+0x2d4>
 8002544:	58024400 	.word	0x58024400
 8002548:	4b9a      	ldr	r3, [pc, #616]	@ (80027b4 <HAL_RCC_OscConfig+0x4f8>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	691b      	ldr	r3, [r3, #16]
 8002554:	061b      	lsls	r3, r3, #24
 8002556:	4997      	ldr	r1, [pc, #604]	@ (80027b4 <HAL_RCC_OscConfig+0x4f8>)
 8002558:	4313      	orrs	r3, r2
 800255a:	604b      	str	r3, [r1, #4]
 800255c:	e018      	b.n	8002590 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800255e:	4b95      	ldr	r3, [pc, #596]	@ (80027b4 <HAL_RCC_OscConfig+0x4f8>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a94      	ldr	r2, [pc, #592]	@ (80027b4 <HAL_RCC_OscConfig+0x4f8>)
 8002564:	f023 0301 	bic.w	r3, r3, #1
 8002568:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800256a:	f7ff fa6b 	bl	8001a44 <HAL_GetTick>
 800256e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002570:	e008      	b.n	8002584 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002572:	f7ff fa67 	bl	8001a44 <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	2b02      	cmp	r3, #2
 800257e:	d901      	bls.n	8002584 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e2ed      	b.n	8002b60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002584:	4b8b      	ldr	r3, [pc, #556]	@ (80027b4 <HAL_RCC_OscConfig+0x4f8>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0304 	and.w	r3, r3, #4
 800258c:	2b00      	cmp	r3, #0
 800258e:	d1f0      	bne.n	8002572 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0310 	and.w	r3, r3, #16
 8002598:	2b00      	cmp	r3, #0
 800259a:	f000 80a9 	beq.w	80026f0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800259e:	4b85      	ldr	r3, [pc, #532]	@ (80027b4 <HAL_RCC_OscConfig+0x4f8>)
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80025a6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80025a8:	4b82      	ldr	r3, [pc, #520]	@ (80027b4 <HAL_RCC_OscConfig+0x4f8>)
 80025aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ac:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	2b08      	cmp	r3, #8
 80025b2:	d007      	beq.n	80025c4 <HAL_RCC_OscConfig+0x308>
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	2b18      	cmp	r3, #24
 80025b8:	d13a      	bne.n	8002630 <HAL_RCC_OscConfig+0x374>
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	f003 0303 	and.w	r3, r3, #3
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d135      	bne.n	8002630 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80025c4:	4b7b      	ldr	r3, [pc, #492]	@ (80027b4 <HAL_RCC_OscConfig+0x4f8>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d005      	beq.n	80025dc <HAL_RCC_OscConfig+0x320>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	69db      	ldr	r3, [r3, #28]
 80025d4:	2b80      	cmp	r3, #128	@ 0x80
 80025d6:	d001      	beq.n	80025dc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e2c1      	b.n	8002b60 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80025dc:	f7ff fa62 	bl	8001aa4 <HAL_GetREVID>
 80025e0:	4603      	mov	r3, r0
 80025e2:	f241 0203 	movw	r2, #4099	@ 0x1003
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d817      	bhi.n	800261a <HAL_RCC_OscConfig+0x35e>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a1b      	ldr	r3, [r3, #32]
 80025ee:	2b20      	cmp	r3, #32
 80025f0:	d108      	bne.n	8002604 <HAL_RCC_OscConfig+0x348>
 80025f2:	4b70      	ldr	r3, [pc, #448]	@ (80027b4 <HAL_RCC_OscConfig+0x4f8>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80025fa:	4a6e      	ldr	r2, [pc, #440]	@ (80027b4 <HAL_RCC_OscConfig+0x4f8>)
 80025fc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002600:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002602:	e075      	b.n	80026f0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002604:	4b6b      	ldr	r3, [pc, #428]	@ (80027b4 <HAL_RCC_OscConfig+0x4f8>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	069b      	lsls	r3, r3, #26
 8002612:	4968      	ldr	r1, [pc, #416]	@ (80027b4 <HAL_RCC_OscConfig+0x4f8>)
 8002614:	4313      	orrs	r3, r2
 8002616:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002618:	e06a      	b.n	80026f0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800261a:	4b66      	ldr	r3, [pc, #408]	@ (80027b4 <HAL_RCC_OscConfig+0x4f8>)
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a1b      	ldr	r3, [r3, #32]
 8002626:	061b      	lsls	r3, r3, #24
 8002628:	4962      	ldr	r1, [pc, #392]	@ (80027b4 <HAL_RCC_OscConfig+0x4f8>)
 800262a:	4313      	orrs	r3, r2
 800262c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800262e:	e05f      	b.n	80026f0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	69db      	ldr	r3, [r3, #28]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d042      	beq.n	80026be <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002638:	4b5e      	ldr	r3, [pc, #376]	@ (80027b4 <HAL_RCC_OscConfig+0x4f8>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a5d      	ldr	r2, [pc, #372]	@ (80027b4 <HAL_RCC_OscConfig+0x4f8>)
 800263e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002642:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002644:	f7ff f9fe 	bl	8001a44 <HAL_GetTick>
 8002648:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800264a:	e008      	b.n	800265e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800264c:	f7ff f9fa 	bl	8001a44 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b02      	cmp	r3, #2
 8002658:	d901      	bls.n	800265e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e280      	b.n	8002b60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800265e:	4b55      	ldr	r3, [pc, #340]	@ (80027b4 <HAL_RCC_OscConfig+0x4f8>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002666:	2b00      	cmp	r3, #0
 8002668:	d0f0      	beq.n	800264c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800266a:	f7ff fa1b 	bl	8001aa4 <HAL_GetREVID>
 800266e:	4603      	mov	r3, r0
 8002670:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002674:	4293      	cmp	r3, r2
 8002676:	d817      	bhi.n	80026a8 <HAL_RCC_OscConfig+0x3ec>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a1b      	ldr	r3, [r3, #32]
 800267c:	2b20      	cmp	r3, #32
 800267e:	d108      	bne.n	8002692 <HAL_RCC_OscConfig+0x3d6>
 8002680:	4b4c      	ldr	r3, [pc, #304]	@ (80027b4 <HAL_RCC_OscConfig+0x4f8>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002688:	4a4a      	ldr	r2, [pc, #296]	@ (80027b4 <HAL_RCC_OscConfig+0x4f8>)
 800268a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800268e:	6053      	str	r3, [r2, #4]
 8002690:	e02e      	b.n	80026f0 <HAL_RCC_OscConfig+0x434>
 8002692:	4b48      	ldr	r3, [pc, #288]	@ (80027b4 <HAL_RCC_OscConfig+0x4f8>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a1b      	ldr	r3, [r3, #32]
 800269e:	069b      	lsls	r3, r3, #26
 80026a0:	4944      	ldr	r1, [pc, #272]	@ (80027b4 <HAL_RCC_OscConfig+0x4f8>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	604b      	str	r3, [r1, #4]
 80026a6:	e023      	b.n	80026f0 <HAL_RCC_OscConfig+0x434>
 80026a8:	4b42      	ldr	r3, [pc, #264]	@ (80027b4 <HAL_RCC_OscConfig+0x4f8>)
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a1b      	ldr	r3, [r3, #32]
 80026b4:	061b      	lsls	r3, r3, #24
 80026b6:	493f      	ldr	r1, [pc, #252]	@ (80027b4 <HAL_RCC_OscConfig+0x4f8>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	60cb      	str	r3, [r1, #12]
 80026bc:	e018      	b.n	80026f0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80026be:	4b3d      	ldr	r3, [pc, #244]	@ (80027b4 <HAL_RCC_OscConfig+0x4f8>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a3c      	ldr	r2, [pc, #240]	@ (80027b4 <HAL_RCC_OscConfig+0x4f8>)
 80026c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80026c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ca:	f7ff f9bb 	bl	8001a44 <HAL_GetTick>
 80026ce:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80026d0:	e008      	b.n	80026e4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80026d2:	f7ff f9b7 	bl	8001a44 <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d901      	bls.n	80026e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e23d      	b.n	8002b60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80026e4:	4b33      	ldr	r3, [pc, #204]	@ (80027b4 <HAL_RCC_OscConfig+0x4f8>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d1f0      	bne.n	80026d2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0308 	and.w	r3, r3, #8
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d036      	beq.n	800276a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	695b      	ldr	r3, [r3, #20]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d019      	beq.n	8002738 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002704:	4b2b      	ldr	r3, [pc, #172]	@ (80027b4 <HAL_RCC_OscConfig+0x4f8>)
 8002706:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002708:	4a2a      	ldr	r2, [pc, #168]	@ (80027b4 <HAL_RCC_OscConfig+0x4f8>)
 800270a:	f043 0301 	orr.w	r3, r3, #1
 800270e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002710:	f7ff f998 	bl	8001a44 <HAL_GetTick>
 8002714:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002716:	e008      	b.n	800272a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002718:	f7ff f994 	bl	8001a44 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b02      	cmp	r3, #2
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e21a      	b.n	8002b60 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800272a:	4b22      	ldr	r3, [pc, #136]	@ (80027b4 <HAL_RCC_OscConfig+0x4f8>)
 800272c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d0f0      	beq.n	8002718 <HAL_RCC_OscConfig+0x45c>
 8002736:	e018      	b.n	800276a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002738:	4b1e      	ldr	r3, [pc, #120]	@ (80027b4 <HAL_RCC_OscConfig+0x4f8>)
 800273a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800273c:	4a1d      	ldr	r2, [pc, #116]	@ (80027b4 <HAL_RCC_OscConfig+0x4f8>)
 800273e:	f023 0301 	bic.w	r3, r3, #1
 8002742:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002744:	f7ff f97e 	bl	8001a44 <HAL_GetTick>
 8002748:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800274a:	e008      	b.n	800275e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800274c:	f7ff f97a 	bl	8001a44 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b02      	cmp	r3, #2
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e200      	b.n	8002b60 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800275e:	4b15      	ldr	r3, [pc, #84]	@ (80027b4 <HAL_RCC_OscConfig+0x4f8>)
 8002760:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1f0      	bne.n	800274c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0320 	and.w	r3, r3, #32
 8002772:	2b00      	cmp	r3, #0
 8002774:	d039      	beq.n	80027ea <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d01c      	beq.n	80027b8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800277e:	4b0d      	ldr	r3, [pc, #52]	@ (80027b4 <HAL_RCC_OscConfig+0x4f8>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a0c      	ldr	r2, [pc, #48]	@ (80027b4 <HAL_RCC_OscConfig+0x4f8>)
 8002784:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002788:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800278a:	f7ff f95b 	bl	8001a44 <HAL_GetTick>
 800278e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002790:	e008      	b.n	80027a4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002792:	f7ff f957 	bl	8001a44 <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	2b02      	cmp	r3, #2
 800279e:	d901      	bls.n	80027a4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e1dd      	b.n	8002b60 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80027a4:	4b03      	ldr	r3, [pc, #12]	@ (80027b4 <HAL_RCC_OscConfig+0x4f8>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d0f0      	beq.n	8002792 <HAL_RCC_OscConfig+0x4d6>
 80027b0:	e01b      	b.n	80027ea <HAL_RCC_OscConfig+0x52e>
 80027b2:	bf00      	nop
 80027b4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80027b8:	4b9b      	ldr	r3, [pc, #620]	@ (8002a28 <HAL_RCC_OscConfig+0x76c>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a9a      	ldr	r2, [pc, #616]	@ (8002a28 <HAL_RCC_OscConfig+0x76c>)
 80027be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80027c2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80027c4:	f7ff f93e 	bl	8001a44 <HAL_GetTick>
 80027c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80027ca:	e008      	b.n	80027de <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027cc:	f7ff f93a 	bl	8001a44 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e1c0      	b.n	8002b60 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80027de:	4b92      	ldr	r3, [pc, #584]	@ (8002a28 <HAL_RCC_OscConfig+0x76c>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d1f0      	bne.n	80027cc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0304 	and.w	r3, r3, #4
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	f000 8081 	beq.w	80028fa <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80027f8:	4b8c      	ldr	r3, [pc, #560]	@ (8002a2c <HAL_RCC_OscConfig+0x770>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a8b      	ldr	r2, [pc, #556]	@ (8002a2c <HAL_RCC_OscConfig+0x770>)
 80027fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002802:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002804:	f7ff f91e 	bl	8001a44 <HAL_GetTick>
 8002808:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800280a:	e008      	b.n	800281e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800280c:	f7ff f91a 	bl	8001a44 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b64      	cmp	r3, #100	@ 0x64
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e1a0      	b.n	8002b60 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800281e:	4b83      	ldr	r3, [pc, #524]	@ (8002a2c <HAL_RCC_OscConfig+0x770>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002826:	2b00      	cmp	r3, #0
 8002828:	d0f0      	beq.n	800280c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d106      	bne.n	8002840 <HAL_RCC_OscConfig+0x584>
 8002832:	4b7d      	ldr	r3, [pc, #500]	@ (8002a28 <HAL_RCC_OscConfig+0x76c>)
 8002834:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002836:	4a7c      	ldr	r2, [pc, #496]	@ (8002a28 <HAL_RCC_OscConfig+0x76c>)
 8002838:	f043 0301 	orr.w	r3, r3, #1
 800283c:	6713      	str	r3, [r2, #112]	@ 0x70
 800283e:	e02d      	b.n	800289c <HAL_RCC_OscConfig+0x5e0>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d10c      	bne.n	8002862 <HAL_RCC_OscConfig+0x5a6>
 8002848:	4b77      	ldr	r3, [pc, #476]	@ (8002a28 <HAL_RCC_OscConfig+0x76c>)
 800284a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800284c:	4a76      	ldr	r2, [pc, #472]	@ (8002a28 <HAL_RCC_OscConfig+0x76c>)
 800284e:	f023 0301 	bic.w	r3, r3, #1
 8002852:	6713      	str	r3, [r2, #112]	@ 0x70
 8002854:	4b74      	ldr	r3, [pc, #464]	@ (8002a28 <HAL_RCC_OscConfig+0x76c>)
 8002856:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002858:	4a73      	ldr	r2, [pc, #460]	@ (8002a28 <HAL_RCC_OscConfig+0x76c>)
 800285a:	f023 0304 	bic.w	r3, r3, #4
 800285e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002860:	e01c      	b.n	800289c <HAL_RCC_OscConfig+0x5e0>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	2b05      	cmp	r3, #5
 8002868:	d10c      	bne.n	8002884 <HAL_RCC_OscConfig+0x5c8>
 800286a:	4b6f      	ldr	r3, [pc, #444]	@ (8002a28 <HAL_RCC_OscConfig+0x76c>)
 800286c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800286e:	4a6e      	ldr	r2, [pc, #440]	@ (8002a28 <HAL_RCC_OscConfig+0x76c>)
 8002870:	f043 0304 	orr.w	r3, r3, #4
 8002874:	6713      	str	r3, [r2, #112]	@ 0x70
 8002876:	4b6c      	ldr	r3, [pc, #432]	@ (8002a28 <HAL_RCC_OscConfig+0x76c>)
 8002878:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800287a:	4a6b      	ldr	r2, [pc, #428]	@ (8002a28 <HAL_RCC_OscConfig+0x76c>)
 800287c:	f043 0301 	orr.w	r3, r3, #1
 8002880:	6713      	str	r3, [r2, #112]	@ 0x70
 8002882:	e00b      	b.n	800289c <HAL_RCC_OscConfig+0x5e0>
 8002884:	4b68      	ldr	r3, [pc, #416]	@ (8002a28 <HAL_RCC_OscConfig+0x76c>)
 8002886:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002888:	4a67      	ldr	r2, [pc, #412]	@ (8002a28 <HAL_RCC_OscConfig+0x76c>)
 800288a:	f023 0301 	bic.w	r3, r3, #1
 800288e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002890:	4b65      	ldr	r3, [pc, #404]	@ (8002a28 <HAL_RCC_OscConfig+0x76c>)
 8002892:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002894:	4a64      	ldr	r2, [pc, #400]	@ (8002a28 <HAL_RCC_OscConfig+0x76c>)
 8002896:	f023 0304 	bic.w	r3, r3, #4
 800289a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d015      	beq.n	80028d0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028a4:	f7ff f8ce 	bl	8001a44 <HAL_GetTick>
 80028a8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80028aa:	e00a      	b.n	80028c2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ac:	f7ff f8ca 	bl	8001a44 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e14e      	b.n	8002b60 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80028c2:	4b59      	ldr	r3, [pc, #356]	@ (8002a28 <HAL_RCC_OscConfig+0x76c>)
 80028c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d0ee      	beq.n	80028ac <HAL_RCC_OscConfig+0x5f0>
 80028ce:	e014      	b.n	80028fa <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028d0:	f7ff f8b8 	bl	8001a44 <HAL_GetTick>
 80028d4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80028d6:	e00a      	b.n	80028ee <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028d8:	f7ff f8b4 	bl	8001a44 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e138      	b.n	8002b60 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80028ee:	4b4e      	ldr	r3, [pc, #312]	@ (8002a28 <HAL_RCC_OscConfig+0x76c>)
 80028f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d1ee      	bne.n	80028d8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028fe:	2b00      	cmp	r3, #0
 8002900:	f000 812d 	beq.w	8002b5e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002904:	4b48      	ldr	r3, [pc, #288]	@ (8002a28 <HAL_RCC_OscConfig+0x76c>)
 8002906:	691b      	ldr	r3, [r3, #16]
 8002908:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800290c:	2b18      	cmp	r3, #24
 800290e:	f000 80bd 	beq.w	8002a8c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002916:	2b02      	cmp	r3, #2
 8002918:	f040 809e 	bne.w	8002a58 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800291c:	4b42      	ldr	r3, [pc, #264]	@ (8002a28 <HAL_RCC_OscConfig+0x76c>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a41      	ldr	r2, [pc, #260]	@ (8002a28 <HAL_RCC_OscConfig+0x76c>)
 8002922:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002926:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002928:	f7ff f88c 	bl	8001a44 <HAL_GetTick>
 800292c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800292e:	e008      	b.n	8002942 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002930:	f7ff f888 	bl	8001a44 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b02      	cmp	r3, #2
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e10e      	b.n	8002b60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002942:	4b39      	ldr	r3, [pc, #228]	@ (8002a28 <HAL_RCC_OscConfig+0x76c>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1f0      	bne.n	8002930 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800294e:	4b36      	ldr	r3, [pc, #216]	@ (8002a28 <HAL_RCC_OscConfig+0x76c>)
 8002950:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002952:	4b37      	ldr	r3, [pc, #220]	@ (8002a30 <HAL_RCC_OscConfig+0x774>)
 8002954:	4013      	ands	r3, r2
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800295e:	0112      	lsls	r2, r2, #4
 8002960:	430a      	orrs	r2, r1
 8002962:	4931      	ldr	r1, [pc, #196]	@ (8002a28 <HAL_RCC_OscConfig+0x76c>)
 8002964:	4313      	orrs	r3, r2
 8002966:	628b      	str	r3, [r1, #40]	@ 0x28
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800296c:	3b01      	subs	r3, #1
 800296e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002976:	3b01      	subs	r3, #1
 8002978:	025b      	lsls	r3, r3, #9
 800297a:	b29b      	uxth	r3, r3
 800297c:	431a      	orrs	r2, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002982:	3b01      	subs	r3, #1
 8002984:	041b      	lsls	r3, r3, #16
 8002986:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800298a:	431a      	orrs	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002990:	3b01      	subs	r3, #1
 8002992:	061b      	lsls	r3, r3, #24
 8002994:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002998:	4923      	ldr	r1, [pc, #140]	@ (8002a28 <HAL_RCC_OscConfig+0x76c>)
 800299a:	4313      	orrs	r3, r2
 800299c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800299e:	4b22      	ldr	r3, [pc, #136]	@ (8002a28 <HAL_RCC_OscConfig+0x76c>)
 80029a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029a2:	4a21      	ldr	r2, [pc, #132]	@ (8002a28 <HAL_RCC_OscConfig+0x76c>)
 80029a4:	f023 0301 	bic.w	r3, r3, #1
 80029a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80029aa:	4b1f      	ldr	r3, [pc, #124]	@ (8002a28 <HAL_RCC_OscConfig+0x76c>)
 80029ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029ae:	4b21      	ldr	r3, [pc, #132]	@ (8002a34 <HAL_RCC_OscConfig+0x778>)
 80029b0:	4013      	ands	r3, r2
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80029b6:	00d2      	lsls	r2, r2, #3
 80029b8:	491b      	ldr	r1, [pc, #108]	@ (8002a28 <HAL_RCC_OscConfig+0x76c>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80029be:	4b1a      	ldr	r3, [pc, #104]	@ (8002a28 <HAL_RCC_OscConfig+0x76c>)
 80029c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029c2:	f023 020c 	bic.w	r2, r3, #12
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ca:	4917      	ldr	r1, [pc, #92]	@ (8002a28 <HAL_RCC_OscConfig+0x76c>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80029d0:	4b15      	ldr	r3, [pc, #84]	@ (8002a28 <HAL_RCC_OscConfig+0x76c>)
 80029d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029d4:	f023 0202 	bic.w	r2, r3, #2
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029dc:	4912      	ldr	r1, [pc, #72]	@ (8002a28 <HAL_RCC_OscConfig+0x76c>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80029e2:	4b11      	ldr	r3, [pc, #68]	@ (8002a28 <HAL_RCC_OscConfig+0x76c>)
 80029e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029e6:	4a10      	ldr	r2, [pc, #64]	@ (8002a28 <HAL_RCC_OscConfig+0x76c>)
 80029e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002a28 <HAL_RCC_OscConfig+0x76c>)
 80029f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029f2:	4a0d      	ldr	r2, [pc, #52]	@ (8002a28 <HAL_RCC_OscConfig+0x76c>)
 80029f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80029fa:	4b0b      	ldr	r3, [pc, #44]	@ (8002a28 <HAL_RCC_OscConfig+0x76c>)
 80029fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029fe:	4a0a      	ldr	r2, [pc, #40]	@ (8002a28 <HAL_RCC_OscConfig+0x76c>)
 8002a00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a04:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002a06:	4b08      	ldr	r3, [pc, #32]	@ (8002a28 <HAL_RCC_OscConfig+0x76c>)
 8002a08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a0a:	4a07      	ldr	r2, [pc, #28]	@ (8002a28 <HAL_RCC_OscConfig+0x76c>)
 8002a0c:	f043 0301 	orr.w	r3, r3, #1
 8002a10:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a12:	4b05      	ldr	r3, [pc, #20]	@ (8002a28 <HAL_RCC_OscConfig+0x76c>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a04      	ldr	r2, [pc, #16]	@ (8002a28 <HAL_RCC_OscConfig+0x76c>)
 8002a18:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a1e:	f7ff f811 	bl	8001a44 <HAL_GetTick>
 8002a22:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a24:	e011      	b.n	8002a4a <HAL_RCC_OscConfig+0x78e>
 8002a26:	bf00      	nop
 8002a28:	58024400 	.word	0x58024400
 8002a2c:	58024800 	.word	0x58024800
 8002a30:	fffffc0c 	.word	0xfffffc0c
 8002a34:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a38:	f7ff f804 	bl	8001a44 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e08a      	b.n	8002b60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a4a:	4b47      	ldr	r3, [pc, #284]	@ (8002b68 <HAL_RCC_OscConfig+0x8ac>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d0f0      	beq.n	8002a38 <HAL_RCC_OscConfig+0x77c>
 8002a56:	e082      	b.n	8002b5e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a58:	4b43      	ldr	r3, [pc, #268]	@ (8002b68 <HAL_RCC_OscConfig+0x8ac>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a42      	ldr	r2, [pc, #264]	@ (8002b68 <HAL_RCC_OscConfig+0x8ac>)
 8002a5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a64:	f7fe ffee 	bl	8001a44 <HAL_GetTick>
 8002a68:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a6a:	e008      	b.n	8002a7e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a6c:	f7fe ffea 	bl	8001a44 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e070      	b.n	8002b60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a7e:	4b3a      	ldr	r3, [pc, #232]	@ (8002b68 <HAL_RCC_OscConfig+0x8ac>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d1f0      	bne.n	8002a6c <HAL_RCC_OscConfig+0x7b0>
 8002a8a:	e068      	b.n	8002b5e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002a8c:	4b36      	ldr	r3, [pc, #216]	@ (8002b68 <HAL_RCC_OscConfig+0x8ac>)
 8002a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a90:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002a92:	4b35      	ldr	r3, [pc, #212]	@ (8002b68 <HAL_RCC_OscConfig+0x8ac>)
 8002a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a96:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d031      	beq.n	8002b04 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	f003 0203 	and.w	r2, r3, #3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d12a      	bne.n	8002b04 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	091b      	lsrs	r3, r3, #4
 8002ab2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d122      	bne.n	8002b04 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d11a      	bne.n	8002b04 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	0a5b      	lsrs	r3, r3, #9
 8002ad2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ada:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d111      	bne.n	8002b04 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	0c1b      	lsrs	r3, r3, #16
 8002ae4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002aec:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d108      	bne.n	8002b04 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	0e1b      	lsrs	r3, r3, #24
 8002af6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002afe:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d001      	beq.n	8002b08 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e02b      	b.n	8002b60 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002b08:	4b17      	ldr	r3, [pc, #92]	@ (8002b68 <HAL_RCC_OscConfig+0x8ac>)
 8002b0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b0c:	08db      	lsrs	r3, r3, #3
 8002b0e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002b12:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b18:	693a      	ldr	r2, [r7, #16]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d01f      	beq.n	8002b5e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002b1e:	4b12      	ldr	r3, [pc, #72]	@ (8002b68 <HAL_RCC_OscConfig+0x8ac>)
 8002b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b22:	4a11      	ldr	r2, [pc, #68]	@ (8002b68 <HAL_RCC_OscConfig+0x8ac>)
 8002b24:	f023 0301 	bic.w	r3, r3, #1
 8002b28:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b2a:	f7fe ff8b 	bl	8001a44 <HAL_GetTick>
 8002b2e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002b30:	bf00      	nop
 8002b32:	f7fe ff87 	bl	8001a44 <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d0f9      	beq.n	8002b32 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002b3e:	4b0a      	ldr	r3, [pc, #40]	@ (8002b68 <HAL_RCC_OscConfig+0x8ac>)
 8002b40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b42:	4b0a      	ldr	r3, [pc, #40]	@ (8002b6c <HAL_RCC_OscConfig+0x8b0>)
 8002b44:	4013      	ands	r3, r2
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002b4a:	00d2      	lsls	r2, r2, #3
 8002b4c:	4906      	ldr	r1, [pc, #24]	@ (8002b68 <HAL_RCC_OscConfig+0x8ac>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002b52:	4b05      	ldr	r3, [pc, #20]	@ (8002b68 <HAL_RCC_OscConfig+0x8ac>)
 8002b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b56:	4a04      	ldr	r2, [pc, #16]	@ (8002b68 <HAL_RCC_OscConfig+0x8ac>)
 8002b58:	f043 0301 	orr.w	r3, r3, #1
 8002b5c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3730      	adds	r7, #48	@ 0x30
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	58024400 	.word	0x58024400
 8002b6c:	ffff0007 	.word	0xffff0007

08002b70 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b086      	sub	sp, #24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d101      	bne.n	8002b84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e19c      	b.n	8002ebe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b84:	4b8a      	ldr	r3, [pc, #552]	@ (8002db0 <HAL_RCC_ClockConfig+0x240>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 030f 	and.w	r3, r3, #15
 8002b8c:	683a      	ldr	r2, [r7, #0]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d910      	bls.n	8002bb4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b92:	4b87      	ldr	r3, [pc, #540]	@ (8002db0 <HAL_RCC_ClockConfig+0x240>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f023 020f 	bic.w	r2, r3, #15
 8002b9a:	4985      	ldr	r1, [pc, #532]	@ (8002db0 <HAL_RCC_ClockConfig+0x240>)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ba2:	4b83      	ldr	r3, [pc, #524]	@ (8002db0 <HAL_RCC_ClockConfig+0x240>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 030f 	and.w	r3, r3, #15
 8002baa:	683a      	ldr	r2, [r7, #0]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d001      	beq.n	8002bb4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e184      	b.n	8002ebe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0304 	and.w	r3, r3, #4
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d010      	beq.n	8002be2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	691a      	ldr	r2, [r3, #16]
 8002bc4:	4b7b      	ldr	r3, [pc, #492]	@ (8002db4 <HAL_RCC_ClockConfig+0x244>)
 8002bc6:	699b      	ldr	r3, [r3, #24]
 8002bc8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d908      	bls.n	8002be2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002bd0:	4b78      	ldr	r3, [pc, #480]	@ (8002db4 <HAL_RCC_ClockConfig+0x244>)
 8002bd2:	699b      	ldr	r3, [r3, #24]
 8002bd4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	4975      	ldr	r1, [pc, #468]	@ (8002db4 <HAL_RCC_ClockConfig+0x244>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0308 	and.w	r3, r3, #8
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d010      	beq.n	8002c10 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	695a      	ldr	r2, [r3, #20]
 8002bf2:	4b70      	ldr	r3, [pc, #448]	@ (8002db4 <HAL_RCC_ClockConfig+0x244>)
 8002bf4:	69db      	ldr	r3, [r3, #28]
 8002bf6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d908      	bls.n	8002c10 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002bfe:	4b6d      	ldr	r3, [pc, #436]	@ (8002db4 <HAL_RCC_ClockConfig+0x244>)
 8002c00:	69db      	ldr	r3, [r3, #28]
 8002c02:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	496a      	ldr	r1, [pc, #424]	@ (8002db4 <HAL_RCC_ClockConfig+0x244>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0310 	and.w	r3, r3, #16
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d010      	beq.n	8002c3e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	699a      	ldr	r2, [r3, #24]
 8002c20:	4b64      	ldr	r3, [pc, #400]	@ (8002db4 <HAL_RCC_ClockConfig+0x244>)
 8002c22:	69db      	ldr	r3, [r3, #28]
 8002c24:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d908      	bls.n	8002c3e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002c2c:	4b61      	ldr	r3, [pc, #388]	@ (8002db4 <HAL_RCC_ClockConfig+0x244>)
 8002c2e:	69db      	ldr	r3, [r3, #28]
 8002c30:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	495e      	ldr	r1, [pc, #376]	@ (8002db4 <HAL_RCC_ClockConfig+0x244>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0320 	and.w	r3, r3, #32
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d010      	beq.n	8002c6c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	69da      	ldr	r2, [r3, #28]
 8002c4e:	4b59      	ldr	r3, [pc, #356]	@ (8002db4 <HAL_RCC_ClockConfig+0x244>)
 8002c50:	6a1b      	ldr	r3, [r3, #32]
 8002c52:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d908      	bls.n	8002c6c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002c5a:	4b56      	ldr	r3, [pc, #344]	@ (8002db4 <HAL_RCC_ClockConfig+0x244>)
 8002c5c:	6a1b      	ldr	r3, [r3, #32]
 8002c5e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	69db      	ldr	r3, [r3, #28]
 8002c66:	4953      	ldr	r1, [pc, #332]	@ (8002db4 <HAL_RCC_ClockConfig+0x244>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d010      	beq.n	8002c9a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	68da      	ldr	r2, [r3, #12]
 8002c7c:	4b4d      	ldr	r3, [pc, #308]	@ (8002db4 <HAL_RCC_ClockConfig+0x244>)
 8002c7e:	699b      	ldr	r3, [r3, #24]
 8002c80:	f003 030f 	and.w	r3, r3, #15
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d908      	bls.n	8002c9a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c88:	4b4a      	ldr	r3, [pc, #296]	@ (8002db4 <HAL_RCC_ClockConfig+0x244>)
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	f023 020f 	bic.w	r2, r3, #15
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	4947      	ldr	r1, [pc, #284]	@ (8002db4 <HAL_RCC_ClockConfig+0x244>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d055      	beq.n	8002d52 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002ca6:	4b43      	ldr	r3, [pc, #268]	@ (8002db4 <HAL_RCC_ClockConfig+0x244>)
 8002ca8:	699b      	ldr	r3, [r3, #24]
 8002caa:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	4940      	ldr	r1, [pc, #256]	@ (8002db4 <HAL_RCC_ClockConfig+0x244>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d107      	bne.n	8002cd0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002cc0:	4b3c      	ldr	r3, [pc, #240]	@ (8002db4 <HAL_RCC_ClockConfig+0x244>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d121      	bne.n	8002d10 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e0f6      	b.n	8002ebe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	2b03      	cmp	r3, #3
 8002cd6:	d107      	bne.n	8002ce8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002cd8:	4b36      	ldr	r3, [pc, #216]	@ (8002db4 <HAL_RCC_ClockConfig+0x244>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d115      	bne.n	8002d10 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e0ea      	b.n	8002ebe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d107      	bne.n	8002d00 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002cf0:	4b30      	ldr	r3, [pc, #192]	@ (8002db4 <HAL_RCC_ClockConfig+0x244>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d109      	bne.n	8002d10 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e0de      	b.n	8002ebe <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d00:	4b2c      	ldr	r3, [pc, #176]	@ (8002db4 <HAL_RCC_ClockConfig+0x244>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0304 	and.w	r3, r3, #4
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d101      	bne.n	8002d10 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e0d6      	b.n	8002ebe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d10:	4b28      	ldr	r3, [pc, #160]	@ (8002db4 <HAL_RCC_ClockConfig+0x244>)
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	f023 0207 	bic.w	r2, r3, #7
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	4925      	ldr	r1, [pc, #148]	@ (8002db4 <HAL_RCC_ClockConfig+0x244>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d22:	f7fe fe8f 	bl	8001a44 <HAL_GetTick>
 8002d26:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d28:	e00a      	b.n	8002d40 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d2a:	f7fe fe8b 	bl	8001a44 <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d901      	bls.n	8002d40 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e0be      	b.n	8002ebe <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d40:	4b1c      	ldr	r3, [pc, #112]	@ (8002db4 <HAL_RCC_ClockConfig+0x244>)
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	00db      	lsls	r3, r3, #3
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d1eb      	bne.n	8002d2a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d010      	beq.n	8002d80 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	68da      	ldr	r2, [r3, #12]
 8002d62:	4b14      	ldr	r3, [pc, #80]	@ (8002db4 <HAL_RCC_ClockConfig+0x244>)
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	f003 030f 	and.w	r3, r3, #15
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d208      	bcs.n	8002d80 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d6e:	4b11      	ldr	r3, [pc, #68]	@ (8002db4 <HAL_RCC_ClockConfig+0x244>)
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	f023 020f 	bic.w	r2, r3, #15
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	490e      	ldr	r1, [pc, #56]	@ (8002db4 <HAL_RCC_ClockConfig+0x244>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d80:	4b0b      	ldr	r3, [pc, #44]	@ (8002db0 <HAL_RCC_ClockConfig+0x240>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 030f 	and.w	r3, r3, #15
 8002d88:	683a      	ldr	r2, [r7, #0]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d214      	bcs.n	8002db8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d8e:	4b08      	ldr	r3, [pc, #32]	@ (8002db0 <HAL_RCC_ClockConfig+0x240>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f023 020f 	bic.w	r2, r3, #15
 8002d96:	4906      	ldr	r1, [pc, #24]	@ (8002db0 <HAL_RCC_ClockConfig+0x240>)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d9e:	4b04      	ldr	r3, [pc, #16]	@ (8002db0 <HAL_RCC_ClockConfig+0x240>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 030f 	and.w	r3, r3, #15
 8002da6:	683a      	ldr	r2, [r7, #0]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d005      	beq.n	8002db8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e086      	b.n	8002ebe <HAL_RCC_ClockConfig+0x34e>
 8002db0:	52002000 	.word	0x52002000
 8002db4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0304 	and.w	r3, r3, #4
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d010      	beq.n	8002de6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	691a      	ldr	r2, [r3, #16]
 8002dc8:	4b3f      	ldr	r3, [pc, #252]	@ (8002ec8 <HAL_RCC_ClockConfig+0x358>)
 8002dca:	699b      	ldr	r3, [r3, #24]
 8002dcc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d208      	bcs.n	8002de6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002dd4:	4b3c      	ldr	r3, [pc, #240]	@ (8002ec8 <HAL_RCC_ClockConfig+0x358>)
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	691b      	ldr	r3, [r3, #16]
 8002de0:	4939      	ldr	r1, [pc, #228]	@ (8002ec8 <HAL_RCC_ClockConfig+0x358>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0308 	and.w	r3, r3, #8
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d010      	beq.n	8002e14 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	695a      	ldr	r2, [r3, #20]
 8002df6:	4b34      	ldr	r3, [pc, #208]	@ (8002ec8 <HAL_RCC_ClockConfig+0x358>)
 8002df8:	69db      	ldr	r3, [r3, #28]
 8002dfa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d208      	bcs.n	8002e14 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002e02:	4b31      	ldr	r3, [pc, #196]	@ (8002ec8 <HAL_RCC_ClockConfig+0x358>)
 8002e04:	69db      	ldr	r3, [r3, #28]
 8002e06:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	695b      	ldr	r3, [r3, #20]
 8002e0e:	492e      	ldr	r1, [pc, #184]	@ (8002ec8 <HAL_RCC_ClockConfig+0x358>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0310 	and.w	r3, r3, #16
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d010      	beq.n	8002e42 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	699a      	ldr	r2, [r3, #24]
 8002e24:	4b28      	ldr	r3, [pc, #160]	@ (8002ec8 <HAL_RCC_ClockConfig+0x358>)
 8002e26:	69db      	ldr	r3, [r3, #28]
 8002e28:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d208      	bcs.n	8002e42 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002e30:	4b25      	ldr	r3, [pc, #148]	@ (8002ec8 <HAL_RCC_ClockConfig+0x358>)
 8002e32:	69db      	ldr	r3, [r3, #28]
 8002e34:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	4922      	ldr	r1, [pc, #136]	@ (8002ec8 <HAL_RCC_ClockConfig+0x358>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0320 	and.w	r3, r3, #32
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d010      	beq.n	8002e70 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	69da      	ldr	r2, [r3, #28]
 8002e52:	4b1d      	ldr	r3, [pc, #116]	@ (8002ec8 <HAL_RCC_ClockConfig+0x358>)
 8002e54:	6a1b      	ldr	r3, [r3, #32]
 8002e56:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d208      	bcs.n	8002e70 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002e5e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ec8 <HAL_RCC_ClockConfig+0x358>)
 8002e60:	6a1b      	ldr	r3, [r3, #32]
 8002e62:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	69db      	ldr	r3, [r3, #28]
 8002e6a:	4917      	ldr	r1, [pc, #92]	@ (8002ec8 <HAL_RCC_ClockConfig+0x358>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002e70:	f000 f834 	bl	8002edc <HAL_RCC_GetSysClockFreq>
 8002e74:	4602      	mov	r2, r0
 8002e76:	4b14      	ldr	r3, [pc, #80]	@ (8002ec8 <HAL_RCC_ClockConfig+0x358>)
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	0a1b      	lsrs	r3, r3, #8
 8002e7c:	f003 030f 	and.w	r3, r3, #15
 8002e80:	4912      	ldr	r1, [pc, #72]	@ (8002ecc <HAL_RCC_ClockConfig+0x35c>)
 8002e82:	5ccb      	ldrb	r3, [r1, r3]
 8002e84:	f003 031f 	and.w	r3, r3, #31
 8002e88:	fa22 f303 	lsr.w	r3, r2, r3
 8002e8c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002e8e:	4b0e      	ldr	r3, [pc, #56]	@ (8002ec8 <HAL_RCC_ClockConfig+0x358>)
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	f003 030f 	and.w	r3, r3, #15
 8002e96:	4a0d      	ldr	r2, [pc, #52]	@ (8002ecc <HAL_RCC_ClockConfig+0x35c>)
 8002e98:	5cd3      	ldrb	r3, [r2, r3]
 8002e9a:	f003 031f 	and.w	r3, r3, #31
 8002e9e:	693a      	ldr	r2, [r7, #16]
 8002ea0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ea4:	4a0a      	ldr	r2, [pc, #40]	@ (8002ed0 <HAL_RCC_ClockConfig+0x360>)
 8002ea6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002ea8:	4a0a      	ldr	r2, [pc, #40]	@ (8002ed4 <HAL_RCC_ClockConfig+0x364>)
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002eae:	4b0a      	ldr	r3, [pc, #40]	@ (8002ed8 <HAL_RCC_ClockConfig+0x368>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7fe fd7c 	bl	80019b0 <HAL_InitTick>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3718      	adds	r7, #24
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	58024400 	.word	0x58024400
 8002ecc:	080073a8 	.word	0x080073a8
 8002ed0:	24000004 	.word	0x24000004
 8002ed4:	24000000 	.word	0x24000000
 8002ed8:	24000044 	.word	0x24000044

08002edc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b089      	sub	sp, #36	@ 0x24
 8002ee0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ee2:	4bb3      	ldr	r3, [pc, #716]	@ (80031b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002eea:	2b18      	cmp	r3, #24
 8002eec:	f200 8155 	bhi.w	800319a <HAL_RCC_GetSysClockFreq+0x2be>
 8002ef0:	a201      	add	r2, pc, #4	@ (adr r2, 8002ef8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ef6:	bf00      	nop
 8002ef8:	08002f5d 	.word	0x08002f5d
 8002efc:	0800319b 	.word	0x0800319b
 8002f00:	0800319b 	.word	0x0800319b
 8002f04:	0800319b 	.word	0x0800319b
 8002f08:	0800319b 	.word	0x0800319b
 8002f0c:	0800319b 	.word	0x0800319b
 8002f10:	0800319b 	.word	0x0800319b
 8002f14:	0800319b 	.word	0x0800319b
 8002f18:	08002f83 	.word	0x08002f83
 8002f1c:	0800319b 	.word	0x0800319b
 8002f20:	0800319b 	.word	0x0800319b
 8002f24:	0800319b 	.word	0x0800319b
 8002f28:	0800319b 	.word	0x0800319b
 8002f2c:	0800319b 	.word	0x0800319b
 8002f30:	0800319b 	.word	0x0800319b
 8002f34:	0800319b 	.word	0x0800319b
 8002f38:	08002f89 	.word	0x08002f89
 8002f3c:	0800319b 	.word	0x0800319b
 8002f40:	0800319b 	.word	0x0800319b
 8002f44:	0800319b 	.word	0x0800319b
 8002f48:	0800319b 	.word	0x0800319b
 8002f4c:	0800319b 	.word	0x0800319b
 8002f50:	0800319b 	.word	0x0800319b
 8002f54:	0800319b 	.word	0x0800319b
 8002f58:	08002f8f 	.word	0x08002f8f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f5c:	4b94      	ldr	r3, [pc, #592]	@ (80031b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0320 	and.w	r3, r3, #32
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d009      	beq.n	8002f7c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002f68:	4b91      	ldr	r3, [pc, #580]	@ (80031b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	08db      	lsrs	r3, r3, #3
 8002f6e:	f003 0303 	and.w	r3, r3, #3
 8002f72:	4a90      	ldr	r2, [pc, #576]	@ (80031b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002f74:	fa22 f303 	lsr.w	r3, r2, r3
 8002f78:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002f7a:	e111      	b.n	80031a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002f7c:	4b8d      	ldr	r3, [pc, #564]	@ (80031b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002f7e:	61bb      	str	r3, [r7, #24]
      break;
 8002f80:	e10e      	b.n	80031a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002f82:	4b8d      	ldr	r3, [pc, #564]	@ (80031b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002f84:	61bb      	str	r3, [r7, #24]
      break;
 8002f86:	e10b      	b.n	80031a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002f88:	4b8c      	ldr	r3, [pc, #560]	@ (80031bc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002f8a:	61bb      	str	r3, [r7, #24]
      break;
 8002f8c:	e108      	b.n	80031a0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002f8e:	4b88      	ldr	r3, [pc, #544]	@ (80031b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f92:	f003 0303 	and.w	r3, r3, #3
 8002f96:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002f98:	4b85      	ldr	r3, [pc, #532]	@ (80031b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f9c:	091b      	lsrs	r3, r3, #4
 8002f9e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002fa2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002fa4:	4b82      	ldr	r3, [pc, #520]	@ (80031b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fa8:	f003 0301 	and.w	r3, r3, #1
 8002fac:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002fae:	4b80      	ldr	r3, [pc, #512]	@ (80031b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fb2:	08db      	lsrs	r3, r3, #3
 8002fb4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002fb8:	68fa      	ldr	r2, [r7, #12]
 8002fba:	fb02 f303 	mul.w	r3, r2, r3
 8002fbe:	ee07 3a90 	vmov	s15, r3
 8002fc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fc6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	f000 80e1 	beq.w	8003194 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	f000 8083 	beq.w	80030e0 <HAL_RCC_GetSysClockFreq+0x204>
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	f200 80a1 	bhi.w	8003124 <HAL_RCC_GetSysClockFreq+0x248>
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d003      	beq.n	8002ff0 <HAL_RCC_GetSysClockFreq+0x114>
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d056      	beq.n	800309c <HAL_RCC_GetSysClockFreq+0x1c0>
 8002fee:	e099      	b.n	8003124 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ff0:	4b6f      	ldr	r3, [pc, #444]	@ (80031b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0320 	and.w	r3, r3, #32
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d02d      	beq.n	8003058 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002ffc:	4b6c      	ldr	r3, [pc, #432]	@ (80031b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	08db      	lsrs	r3, r3, #3
 8003002:	f003 0303 	and.w	r3, r3, #3
 8003006:	4a6b      	ldr	r2, [pc, #428]	@ (80031b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003008:	fa22 f303 	lsr.w	r3, r2, r3
 800300c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	ee07 3a90 	vmov	s15, r3
 8003014:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	ee07 3a90 	vmov	s15, r3
 800301e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003022:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003026:	4b62      	ldr	r3, [pc, #392]	@ (80031b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800302a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800302e:	ee07 3a90 	vmov	s15, r3
 8003032:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003036:	ed97 6a02 	vldr	s12, [r7, #8]
 800303a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80031c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800303e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003042:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003046:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800304a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800304e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003052:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003056:	e087      	b.n	8003168 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	ee07 3a90 	vmov	s15, r3
 800305e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003062:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80031c4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003066:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800306a:	4b51      	ldr	r3, [pc, #324]	@ (80031b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800306c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800306e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003072:	ee07 3a90 	vmov	s15, r3
 8003076:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800307a:	ed97 6a02 	vldr	s12, [r7, #8]
 800307e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80031c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003082:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003086:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800308a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800308e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003092:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003096:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800309a:	e065      	b.n	8003168 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	ee07 3a90 	vmov	s15, r3
 80030a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030a6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80031c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80030aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030ae:	4b40      	ldr	r3, [pc, #256]	@ (80031b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030b6:	ee07 3a90 	vmov	s15, r3
 80030ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030be:	ed97 6a02 	vldr	s12, [r7, #8]
 80030c2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80031c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80030c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80030d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80030de:	e043      	b.n	8003168 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	ee07 3a90 	vmov	s15, r3
 80030e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030ea:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80031cc <HAL_RCC_GetSysClockFreq+0x2f0>
 80030ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030f2:	4b2f      	ldr	r3, [pc, #188]	@ (80031b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030fa:	ee07 3a90 	vmov	s15, r3
 80030fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003102:	ed97 6a02 	vldr	s12, [r7, #8]
 8003106:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80031c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800310a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800310e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003112:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003116:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800311a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800311e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003122:	e021      	b.n	8003168 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	ee07 3a90 	vmov	s15, r3
 800312a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800312e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80031c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003132:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003136:	4b1e      	ldr	r3, [pc, #120]	@ (80031b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800313a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800313e:	ee07 3a90 	vmov	s15, r3
 8003142:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003146:	ed97 6a02 	vldr	s12, [r7, #8]
 800314a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80031c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800314e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003152:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003156:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800315a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800315e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003162:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003166:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003168:	4b11      	ldr	r3, [pc, #68]	@ (80031b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800316a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800316c:	0a5b      	lsrs	r3, r3, #9
 800316e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003172:	3301      	adds	r3, #1
 8003174:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	ee07 3a90 	vmov	s15, r3
 800317c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003180:	edd7 6a07 	vldr	s13, [r7, #28]
 8003184:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003188:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800318c:	ee17 3a90 	vmov	r3, s15
 8003190:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003192:	e005      	b.n	80031a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003194:	2300      	movs	r3, #0
 8003196:	61bb      	str	r3, [r7, #24]
      break;
 8003198:	e002      	b.n	80031a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800319a:	4b07      	ldr	r3, [pc, #28]	@ (80031b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800319c:	61bb      	str	r3, [r7, #24]
      break;
 800319e:	bf00      	nop
  }

  return sysclockfreq;
 80031a0:	69bb      	ldr	r3, [r7, #24]
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3724      	adds	r7, #36	@ 0x24
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	58024400 	.word	0x58024400
 80031b4:	03d09000 	.word	0x03d09000
 80031b8:	003d0900 	.word	0x003d0900
 80031bc:	017d7840 	.word	0x017d7840
 80031c0:	46000000 	.word	0x46000000
 80031c4:	4c742400 	.word	0x4c742400
 80031c8:	4a742400 	.word	0x4a742400
 80031cc:	4bbebc20 	.word	0x4bbebc20

080031d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80031d6:	f7ff fe81 	bl	8002edc <HAL_RCC_GetSysClockFreq>
 80031da:	4602      	mov	r2, r0
 80031dc:	4b10      	ldr	r3, [pc, #64]	@ (8003220 <HAL_RCC_GetHCLKFreq+0x50>)
 80031de:	699b      	ldr	r3, [r3, #24]
 80031e0:	0a1b      	lsrs	r3, r3, #8
 80031e2:	f003 030f 	and.w	r3, r3, #15
 80031e6:	490f      	ldr	r1, [pc, #60]	@ (8003224 <HAL_RCC_GetHCLKFreq+0x54>)
 80031e8:	5ccb      	ldrb	r3, [r1, r3]
 80031ea:	f003 031f 	and.w	r3, r3, #31
 80031ee:	fa22 f303 	lsr.w	r3, r2, r3
 80031f2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80031f4:	4b0a      	ldr	r3, [pc, #40]	@ (8003220 <HAL_RCC_GetHCLKFreq+0x50>)
 80031f6:	699b      	ldr	r3, [r3, #24]
 80031f8:	f003 030f 	and.w	r3, r3, #15
 80031fc:	4a09      	ldr	r2, [pc, #36]	@ (8003224 <HAL_RCC_GetHCLKFreq+0x54>)
 80031fe:	5cd3      	ldrb	r3, [r2, r3]
 8003200:	f003 031f 	and.w	r3, r3, #31
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	fa22 f303 	lsr.w	r3, r2, r3
 800320a:	4a07      	ldr	r2, [pc, #28]	@ (8003228 <HAL_RCC_GetHCLKFreq+0x58>)
 800320c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800320e:	4a07      	ldr	r2, [pc, #28]	@ (800322c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003214:	4b04      	ldr	r3, [pc, #16]	@ (8003228 <HAL_RCC_GetHCLKFreq+0x58>)
 8003216:	681b      	ldr	r3, [r3, #0]
}
 8003218:	4618      	mov	r0, r3
 800321a:	3708      	adds	r7, #8
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	58024400 	.word	0x58024400
 8003224:	080073a8 	.word	0x080073a8
 8003228:	24000004 	.word	0x24000004
 800322c:	24000000 	.word	0x24000000

08003230 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003234:	f7ff ffcc 	bl	80031d0 <HAL_RCC_GetHCLKFreq>
 8003238:	4602      	mov	r2, r0
 800323a:	4b06      	ldr	r3, [pc, #24]	@ (8003254 <HAL_RCC_GetPCLK1Freq+0x24>)
 800323c:	69db      	ldr	r3, [r3, #28]
 800323e:	091b      	lsrs	r3, r3, #4
 8003240:	f003 0307 	and.w	r3, r3, #7
 8003244:	4904      	ldr	r1, [pc, #16]	@ (8003258 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003246:	5ccb      	ldrb	r3, [r1, r3]
 8003248:	f003 031f 	and.w	r3, r3, #31
 800324c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003250:	4618      	mov	r0, r3
 8003252:	bd80      	pop	{r7, pc}
 8003254:	58024400 	.word	0x58024400
 8003258:	080073a8 	.word	0x080073a8

0800325c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003260:	f7ff ffb6 	bl	80031d0 <HAL_RCC_GetHCLKFreq>
 8003264:	4602      	mov	r2, r0
 8003266:	4b06      	ldr	r3, [pc, #24]	@ (8003280 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003268:	69db      	ldr	r3, [r3, #28]
 800326a:	0a1b      	lsrs	r3, r3, #8
 800326c:	f003 0307 	and.w	r3, r3, #7
 8003270:	4904      	ldr	r1, [pc, #16]	@ (8003284 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003272:	5ccb      	ldrb	r3, [r1, r3]
 8003274:	f003 031f 	and.w	r3, r3, #31
 8003278:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800327c:	4618      	mov	r0, r3
 800327e:	bd80      	pop	{r7, pc}
 8003280:	58024400 	.word	0x58024400
 8003284:	080073a8 	.word	0x080073a8

08003288 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003288:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800328c:	b0ca      	sub	sp, #296	@ 0x128
 800328e:	af00      	add	r7, sp, #0
 8003290:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003294:	2300      	movs	r3, #0
 8003296:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800329a:	2300      	movs	r3, #0
 800329c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80032a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80032ac:	2500      	movs	r5, #0
 80032ae:	ea54 0305 	orrs.w	r3, r4, r5
 80032b2:	d049      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80032b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80032ba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80032be:	d02f      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80032c0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80032c4:	d828      	bhi.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80032c6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80032ca:	d01a      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80032cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80032d0:	d822      	bhi.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d003      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x56>
 80032d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80032da:	d007      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x64>
 80032dc:	e01c      	b.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032de:	4bb8      	ldr	r3, [pc, #736]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032e2:	4ab7      	ldr	r2, [pc, #732]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80032ea:	e01a      	b.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80032ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032f0:	3308      	adds	r3, #8
 80032f2:	2102      	movs	r1, #2
 80032f4:	4618      	mov	r0, r3
 80032f6:	f001 fc8f 	bl	8004c18 <RCCEx_PLL2_Config>
 80032fa:	4603      	mov	r3, r0
 80032fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003300:	e00f      	b.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003302:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003306:	3328      	adds	r3, #40	@ 0x28
 8003308:	2102      	movs	r1, #2
 800330a:	4618      	mov	r0, r3
 800330c:	f001 fd36 	bl	8004d7c <RCCEx_PLL3_Config>
 8003310:	4603      	mov	r3, r0
 8003312:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003316:	e004      	b.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800331e:	e000      	b.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003320:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003322:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003326:	2b00      	cmp	r3, #0
 8003328:	d10a      	bne.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800332a:	4ba5      	ldr	r3, [pc, #660]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800332c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800332e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003332:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003336:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003338:	4aa1      	ldr	r2, [pc, #644]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800333a:	430b      	orrs	r3, r1
 800333c:	6513      	str	r3, [r2, #80]	@ 0x50
 800333e:	e003      	b.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003340:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003344:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003348:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800334c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003350:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003354:	f04f 0900 	mov.w	r9, #0
 8003358:	ea58 0309 	orrs.w	r3, r8, r9
 800335c:	d047      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800335e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003362:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003364:	2b04      	cmp	r3, #4
 8003366:	d82a      	bhi.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003368:	a201      	add	r2, pc, #4	@ (adr r2, 8003370 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800336a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800336e:	bf00      	nop
 8003370:	08003385 	.word	0x08003385
 8003374:	08003393 	.word	0x08003393
 8003378:	080033a9 	.word	0x080033a9
 800337c:	080033c7 	.word	0x080033c7
 8003380:	080033c7 	.word	0x080033c7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003384:	4b8e      	ldr	r3, [pc, #568]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003388:	4a8d      	ldr	r2, [pc, #564]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800338a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800338e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003390:	e01a      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003392:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003396:	3308      	adds	r3, #8
 8003398:	2100      	movs	r1, #0
 800339a:	4618      	mov	r0, r3
 800339c:	f001 fc3c 	bl	8004c18 <RCCEx_PLL2_Config>
 80033a0:	4603      	mov	r3, r0
 80033a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80033a6:	e00f      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80033a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033ac:	3328      	adds	r3, #40	@ 0x28
 80033ae:	2100      	movs	r1, #0
 80033b0:	4618      	mov	r0, r3
 80033b2:	f001 fce3 	bl	8004d7c <RCCEx_PLL3_Config>
 80033b6:	4603      	mov	r3, r0
 80033b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80033bc:	e004      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80033c4:	e000      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80033c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d10a      	bne.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033d0:	4b7b      	ldr	r3, [pc, #492]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033d4:	f023 0107 	bic.w	r1, r3, #7
 80033d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033de:	4a78      	ldr	r2, [pc, #480]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033e0:	430b      	orrs	r3, r1
 80033e2:	6513      	str	r3, [r2, #80]	@ 0x50
 80033e4:	e003      	b.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80033ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033f6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80033fa:	f04f 0b00 	mov.w	fp, #0
 80033fe:	ea5a 030b 	orrs.w	r3, sl, fp
 8003402:	d04c      	beq.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003404:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003408:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800340a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800340e:	d030      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003410:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003414:	d829      	bhi.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003416:	2bc0      	cmp	r3, #192	@ 0xc0
 8003418:	d02d      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800341a:	2bc0      	cmp	r3, #192	@ 0xc0
 800341c:	d825      	bhi.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800341e:	2b80      	cmp	r3, #128	@ 0x80
 8003420:	d018      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003422:	2b80      	cmp	r3, #128	@ 0x80
 8003424:	d821      	bhi.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003426:	2b00      	cmp	r3, #0
 8003428:	d002      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800342a:	2b40      	cmp	r3, #64	@ 0x40
 800342c:	d007      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800342e:	e01c      	b.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003430:	4b63      	ldr	r3, [pc, #396]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003434:	4a62      	ldr	r2, [pc, #392]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003436:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800343a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800343c:	e01c      	b.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800343e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003442:	3308      	adds	r3, #8
 8003444:	2100      	movs	r1, #0
 8003446:	4618      	mov	r0, r3
 8003448:	f001 fbe6 	bl	8004c18 <RCCEx_PLL2_Config>
 800344c:	4603      	mov	r3, r0
 800344e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003452:	e011      	b.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003454:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003458:	3328      	adds	r3, #40	@ 0x28
 800345a:	2100      	movs	r1, #0
 800345c:	4618      	mov	r0, r3
 800345e:	f001 fc8d 	bl	8004d7c <RCCEx_PLL3_Config>
 8003462:	4603      	mov	r3, r0
 8003464:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003468:	e006      	b.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003470:	e002      	b.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003472:	bf00      	nop
 8003474:	e000      	b.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003476:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003478:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800347c:	2b00      	cmp	r3, #0
 800347e:	d10a      	bne.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003480:	4b4f      	ldr	r3, [pc, #316]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003482:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003484:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003488:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800348c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800348e:	4a4c      	ldr	r2, [pc, #304]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003490:	430b      	orrs	r3, r1
 8003492:	6513      	str	r3, [r2, #80]	@ 0x50
 8003494:	e003      	b.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003496:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800349a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800349e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80034aa:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80034ae:	2300      	movs	r3, #0
 80034b0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80034b4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80034b8:	460b      	mov	r3, r1
 80034ba:	4313      	orrs	r3, r2
 80034bc:	d053      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80034be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034c2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80034c6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80034ca:	d035      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80034cc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80034d0:	d82e      	bhi.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80034d2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80034d6:	d031      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80034d8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80034dc:	d828      	bhi.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80034de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80034e2:	d01a      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x292>
 80034e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80034e8:	d822      	bhi.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d003      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80034ee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80034f2:	d007      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80034f4:	e01c      	b.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034f6:	4b32      	ldr	r3, [pc, #200]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034fa:	4a31      	ldr	r2, [pc, #196]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003500:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003502:	e01c      	b.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003504:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003508:	3308      	adds	r3, #8
 800350a:	2100      	movs	r1, #0
 800350c:	4618      	mov	r0, r3
 800350e:	f001 fb83 	bl	8004c18 <RCCEx_PLL2_Config>
 8003512:	4603      	mov	r3, r0
 8003514:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003518:	e011      	b.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800351a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800351e:	3328      	adds	r3, #40	@ 0x28
 8003520:	2100      	movs	r1, #0
 8003522:	4618      	mov	r0, r3
 8003524:	f001 fc2a 	bl	8004d7c <RCCEx_PLL3_Config>
 8003528:	4603      	mov	r3, r0
 800352a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800352e:	e006      	b.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003536:	e002      	b.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003538:	bf00      	nop
 800353a:	e000      	b.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800353c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800353e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003542:	2b00      	cmp	r3, #0
 8003544:	d10b      	bne.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003546:	4b1e      	ldr	r3, [pc, #120]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003548:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800354a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800354e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003552:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003556:	4a1a      	ldr	r2, [pc, #104]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003558:	430b      	orrs	r3, r1
 800355a:	6593      	str	r3, [r2, #88]	@ 0x58
 800355c:	e003      	b.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800355e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003562:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003566:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800356a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800356e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003572:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003576:	2300      	movs	r3, #0
 8003578:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800357c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003580:	460b      	mov	r3, r1
 8003582:	4313      	orrs	r3, r2
 8003584:	d056      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003586:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800358a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800358e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003592:	d038      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003594:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003598:	d831      	bhi.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x376>
 800359a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800359e:	d034      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x382>
 80035a0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80035a4:	d82b      	bhi.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x376>
 80035a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80035aa:	d01d      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80035ac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80035b0:	d825      	bhi.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x376>
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d006      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80035b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80035ba:	d00a      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80035bc:	e01f      	b.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x376>
 80035be:	bf00      	nop
 80035c0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035c4:	4ba2      	ldr	r3, [pc, #648]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035c8:	4aa1      	ldr	r2, [pc, #644]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035d0:	e01c      	b.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035d6:	3308      	adds	r3, #8
 80035d8:	2100      	movs	r1, #0
 80035da:	4618      	mov	r0, r3
 80035dc:	f001 fb1c 	bl	8004c18 <RCCEx_PLL2_Config>
 80035e0:	4603      	mov	r3, r0
 80035e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80035e6:	e011      	b.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80035e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035ec:	3328      	adds	r3, #40	@ 0x28
 80035ee:	2100      	movs	r1, #0
 80035f0:	4618      	mov	r0, r3
 80035f2:	f001 fbc3 	bl	8004d7c <RCCEx_PLL3_Config>
 80035f6:	4603      	mov	r3, r0
 80035f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035fc:	e006      	b.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003604:	e002      	b.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003606:	bf00      	nop
 8003608:	e000      	b.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800360a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800360c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003610:	2b00      	cmp	r3, #0
 8003612:	d10b      	bne.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003614:	4b8e      	ldr	r3, [pc, #568]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003616:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003618:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800361c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003620:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003624:	4a8a      	ldr	r2, [pc, #552]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003626:	430b      	orrs	r3, r1
 8003628:	6593      	str	r3, [r2, #88]	@ 0x58
 800362a:	e003      	b.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800362c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003630:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003634:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800363c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003640:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003644:	2300      	movs	r3, #0
 8003646:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800364a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800364e:	460b      	mov	r3, r1
 8003650:	4313      	orrs	r3, r2
 8003652:	d03a      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003654:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800365a:	2b30      	cmp	r3, #48	@ 0x30
 800365c:	d01f      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800365e:	2b30      	cmp	r3, #48	@ 0x30
 8003660:	d819      	bhi.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003662:	2b20      	cmp	r3, #32
 8003664:	d00c      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003666:	2b20      	cmp	r3, #32
 8003668:	d815      	bhi.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800366a:	2b00      	cmp	r3, #0
 800366c:	d019      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800366e:	2b10      	cmp	r3, #16
 8003670:	d111      	bne.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003672:	4b77      	ldr	r3, [pc, #476]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003676:	4a76      	ldr	r2, [pc, #472]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003678:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800367c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800367e:	e011      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003680:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003684:	3308      	adds	r3, #8
 8003686:	2102      	movs	r1, #2
 8003688:	4618      	mov	r0, r3
 800368a:	f001 fac5 	bl	8004c18 <RCCEx_PLL2_Config>
 800368e:	4603      	mov	r3, r0
 8003690:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003694:	e006      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800369c:	e002      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800369e:	bf00      	nop
 80036a0:	e000      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80036a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d10a      	bne.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80036ac:	4b68      	ldr	r3, [pc, #416]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036b0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80036b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036ba:	4a65      	ldr	r2, [pc, #404]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036bc:	430b      	orrs	r3, r1
 80036be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80036c0:	e003      	b.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80036ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80036d6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80036da:	2300      	movs	r3, #0
 80036dc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80036e0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80036e4:	460b      	mov	r3, r1
 80036e6:	4313      	orrs	r3, r2
 80036e8:	d051      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80036ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80036f4:	d035      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80036f6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80036fa:	d82e      	bhi.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80036fc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003700:	d031      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003702:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003706:	d828      	bhi.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003708:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800370c:	d01a      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800370e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003712:	d822      	bhi.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003714:	2b00      	cmp	r3, #0
 8003716:	d003      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003718:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800371c:	d007      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800371e:	e01c      	b.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003720:	4b4b      	ldr	r3, [pc, #300]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003724:	4a4a      	ldr	r2, [pc, #296]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003726:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800372a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800372c:	e01c      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800372e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003732:	3308      	adds	r3, #8
 8003734:	2100      	movs	r1, #0
 8003736:	4618      	mov	r0, r3
 8003738:	f001 fa6e 	bl	8004c18 <RCCEx_PLL2_Config>
 800373c:	4603      	mov	r3, r0
 800373e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003742:	e011      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003744:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003748:	3328      	adds	r3, #40	@ 0x28
 800374a:	2100      	movs	r1, #0
 800374c:	4618      	mov	r0, r3
 800374e:	f001 fb15 	bl	8004d7c <RCCEx_PLL3_Config>
 8003752:	4603      	mov	r3, r0
 8003754:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003758:	e006      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003760:	e002      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003762:	bf00      	nop
 8003764:	e000      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003766:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003768:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800376c:	2b00      	cmp	r3, #0
 800376e:	d10a      	bne.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003770:	4b37      	ldr	r3, [pc, #220]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003772:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003774:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003778:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800377c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800377e:	4a34      	ldr	r2, [pc, #208]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003780:	430b      	orrs	r3, r1
 8003782:	6513      	str	r3, [r2, #80]	@ 0x50
 8003784:	e003      	b.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003786:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800378a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800378e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003796:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800379a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800379e:	2300      	movs	r3, #0
 80037a0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80037a4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80037a8:	460b      	mov	r3, r1
 80037aa:	4313      	orrs	r3, r2
 80037ac:	d056      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80037ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80037b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037b8:	d033      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80037ba:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037be:	d82c      	bhi.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80037c0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80037c4:	d02f      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80037c6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80037ca:	d826      	bhi.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80037cc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80037d0:	d02b      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80037d2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80037d6:	d820      	bhi.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80037d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80037dc:	d012      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80037de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80037e2:	d81a      	bhi.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d022      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80037e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037ec:	d115      	bne.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80037ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037f2:	3308      	adds	r3, #8
 80037f4:	2101      	movs	r1, #1
 80037f6:	4618      	mov	r0, r3
 80037f8:	f001 fa0e 	bl	8004c18 <RCCEx_PLL2_Config>
 80037fc:	4603      	mov	r3, r0
 80037fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003802:	e015      	b.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003804:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003808:	3328      	adds	r3, #40	@ 0x28
 800380a:	2101      	movs	r1, #1
 800380c:	4618      	mov	r0, r3
 800380e:	f001 fab5 	bl	8004d7c <RCCEx_PLL3_Config>
 8003812:	4603      	mov	r3, r0
 8003814:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003818:	e00a      	b.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003820:	e006      	b.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003822:	bf00      	nop
 8003824:	e004      	b.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003826:	bf00      	nop
 8003828:	e002      	b.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800382a:	bf00      	nop
 800382c:	e000      	b.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800382e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003830:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003834:	2b00      	cmp	r3, #0
 8003836:	d10d      	bne.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003838:	4b05      	ldr	r3, [pc, #20]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800383a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800383c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003840:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003844:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003846:	4a02      	ldr	r2, [pc, #8]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003848:	430b      	orrs	r3, r1
 800384a:	6513      	str	r3, [r2, #80]	@ 0x50
 800384c:	e006      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800384e:	bf00      	nop
 8003850:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003854:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003858:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800385c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003864:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003868:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800386c:	2300      	movs	r3, #0
 800386e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003872:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003876:	460b      	mov	r3, r1
 8003878:	4313      	orrs	r3, r2
 800387a:	d055      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800387c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003880:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003884:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003888:	d033      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800388a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800388e:	d82c      	bhi.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003890:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003894:	d02f      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003896:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800389a:	d826      	bhi.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x662>
 800389c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80038a0:	d02b      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x672>
 80038a2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80038a6:	d820      	bhi.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x662>
 80038a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038ac:	d012      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80038ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038b2:	d81a      	bhi.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x662>
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d022      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x676>
 80038b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80038bc:	d115      	bne.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80038be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038c2:	3308      	adds	r3, #8
 80038c4:	2101      	movs	r1, #1
 80038c6:	4618      	mov	r0, r3
 80038c8:	f001 f9a6 	bl	8004c18 <RCCEx_PLL2_Config>
 80038cc:	4603      	mov	r3, r0
 80038ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80038d2:	e015      	b.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80038d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038d8:	3328      	adds	r3, #40	@ 0x28
 80038da:	2101      	movs	r1, #1
 80038dc:	4618      	mov	r0, r3
 80038de:	f001 fa4d 	bl	8004d7c <RCCEx_PLL3_Config>
 80038e2:	4603      	mov	r3, r0
 80038e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80038e8:	e00a      	b.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038f0:	e006      	b.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80038f2:	bf00      	nop
 80038f4:	e004      	b.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80038f6:	bf00      	nop
 80038f8:	e002      	b.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80038fa:	bf00      	nop
 80038fc:	e000      	b.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80038fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003900:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003904:	2b00      	cmp	r3, #0
 8003906:	d10b      	bne.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003908:	4ba3      	ldr	r3, [pc, #652]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800390a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800390c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003910:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003914:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003918:	4a9f      	ldr	r2, [pc, #636]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800391a:	430b      	orrs	r3, r1
 800391c:	6593      	str	r3, [r2, #88]	@ 0x58
 800391e:	e003      	b.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003920:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003924:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003928:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800392c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003930:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003934:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003938:	2300      	movs	r3, #0
 800393a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800393e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003942:	460b      	mov	r3, r1
 8003944:	4313      	orrs	r3, r2
 8003946:	d037      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003948:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800394c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800394e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003952:	d00e      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003954:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003958:	d816      	bhi.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800395a:	2b00      	cmp	r3, #0
 800395c:	d018      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800395e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003962:	d111      	bne.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003964:	4b8c      	ldr	r3, [pc, #560]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003968:	4a8b      	ldr	r2, [pc, #556]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800396a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800396e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003970:	e00f      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003972:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003976:	3308      	adds	r3, #8
 8003978:	2101      	movs	r1, #1
 800397a:	4618      	mov	r0, r3
 800397c:	f001 f94c 	bl	8004c18 <RCCEx_PLL2_Config>
 8003980:	4603      	mov	r3, r0
 8003982:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003986:	e004      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800398e:	e000      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003990:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003992:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003996:	2b00      	cmp	r3, #0
 8003998:	d10a      	bne.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800399a:	4b7f      	ldr	r3, [pc, #508]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800399c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800399e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80039a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039a8:	4a7b      	ldr	r2, [pc, #492]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039aa:	430b      	orrs	r3, r1
 80039ac:	6513      	str	r3, [r2, #80]	@ 0x50
 80039ae:	e003      	b.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80039b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80039c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80039c8:	2300      	movs	r3, #0
 80039ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80039ce:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80039d2:	460b      	mov	r3, r1
 80039d4:	4313      	orrs	r3, r2
 80039d6:	d039      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80039d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039de:	2b03      	cmp	r3, #3
 80039e0:	d81c      	bhi.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x794>
 80039e2:	a201      	add	r2, pc, #4	@ (adr r2, 80039e8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80039e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e8:	08003a25 	.word	0x08003a25
 80039ec:	080039f9 	.word	0x080039f9
 80039f0:	08003a07 	.word	0x08003a07
 80039f4:	08003a25 	.word	0x08003a25
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039f8:	4b67      	ldr	r3, [pc, #412]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039fc:	4a66      	ldr	r2, [pc, #408]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003a04:	e00f      	b.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003a06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a0a:	3308      	adds	r3, #8
 8003a0c:	2102      	movs	r1, #2
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f001 f902 	bl	8004c18 <RCCEx_PLL2_Config>
 8003a14:	4603      	mov	r3, r0
 8003a16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003a1a:	e004      	b.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a22:	e000      	b.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003a24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d10a      	bne.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003a2e:	4b5a      	ldr	r3, [pc, #360]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a32:	f023 0103 	bic.w	r1, r3, #3
 8003a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a3c:	4a56      	ldr	r2, [pc, #344]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a3e:	430b      	orrs	r3, r1
 8003a40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a42:	e003      	b.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a48:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a54:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003a58:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003a62:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003a66:	460b      	mov	r3, r1
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	f000 809f 	beq.w	8003bac <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a6e:	4b4b      	ldr	r3, [pc, #300]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a4a      	ldr	r2, [pc, #296]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003a74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a78:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a7a:	f7fd ffe3 	bl	8001a44 <HAL_GetTick>
 8003a7e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a82:	e00b      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a84:	f7fd ffde 	bl	8001a44 <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	2b64      	cmp	r3, #100	@ 0x64
 8003a92:	d903      	bls.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a9a:	e005      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a9c:	4b3f      	ldr	r3, [pc, #252]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d0ed      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003aa8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d179      	bne.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003ab0:	4b39      	ldr	r3, [pc, #228]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ab2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003ab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ab8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003abc:	4053      	eors	r3, r2
 8003abe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d015      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ac6:	4b34      	ldr	r3, [pc, #208]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ac8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ace:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ad2:	4b31      	ldr	r3, [pc, #196]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ad4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ad6:	4a30      	ldr	r2, [pc, #192]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ad8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003adc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ade:	4b2e      	ldr	r3, [pc, #184]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ae0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ae2:	4a2d      	ldr	r2, [pc, #180]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ae4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ae8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003aea:	4a2b      	ldr	r2, [pc, #172]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003aec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003af0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003af6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003afa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003afe:	d118      	bne.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b00:	f7fd ffa0 	bl	8001a44 <HAL_GetTick>
 8003b04:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b08:	e00d      	b.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b0a:	f7fd ff9b 	bl	8001a44 <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003b14:	1ad2      	subs	r2, r2, r3
 8003b16:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d903      	bls.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003b24:	e005      	b.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b26:	4b1c      	ldr	r3, [pc, #112]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d0eb      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003b32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d129      	bne.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b3e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003b42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b46:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b4a:	d10e      	bne.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003b4c:	4b12      	ldr	r3, [pc, #72]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b4e:	691b      	ldr	r3, [r3, #16]
 8003b50:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b58:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003b5c:	091a      	lsrs	r2, r3, #4
 8003b5e:	4b10      	ldr	r3, [pc, #64]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003b60:	4013      	ands	r3, r2
 8003b62:	4a0d      	ldr	r2, [pc, #52]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b64:	430b      	orrs	r3, r1
 8003b66:	6113      	str	r3, [r2, #16]
 8003b68:	e005      	b.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003b6a:	4b0b      	ldr	r3, [pc, #44]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	4a0a      	ldr	r2, [pc, #40]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b70:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003b74:	6113      	str	r3, [r2, #16]
 8003b76:	4b08      	ldr	r3, [pc, #32]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b78:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003b7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b7e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003b82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b86:	4a04      	ldr	r2, [pc, #16]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b88:	430b      	orrs	r3, r1
 8003b8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b8c:	e00e      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003b96:	e009      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003b98:	58024400 	.word	0x58024400
 8003b9c:	58024800 	.word	0x58024800
 8003ba0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ba4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ba8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003bac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bb4:	f002 0301 	and.w	r3, r2, #1
 8003bb8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003bc2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003bc6:	460b      	mov	r3, r1
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	f000 8089 	beq.w	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bd2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003bd4:	2b28      	cmp	r3, #40	@ 0x28
 8003bd6:	d86b      	bhi.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003bd8:	a201      	add	r2, pc, #4	@ (adr r2, 8003be0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bde:	bf00      	nop
 8003be0:	08003cb9 	.word	0x08003cb9
 8003be4:	08003cb1 	.word	0x08003cb1
 8003be8:	08003cb1 	.word	0x08003cb1
 8003bec:	08003cb1 	.word	0x08003cb1
 8003bf0:	08003cb1 	.word	0x08003cb1
 8003bf4:	08003cb1 	.word	0x08003cb1
 8003bf8:	08003cb1 	.word	0x08003cb1
 8003bfc:	08003cb1 	.word	0x08003cb1
 8003c00:	08003c85 	.word	0x08003c85
 8003c04:	08003cb1 	.word	0x08003cb1
 8003c08:	08003cb1 	.word	0x08003cb1
 8003c0c:	08003cb1 	.word	0x08003cb1
 8003c10:	08003cb1 	.word	0x08003cb1
 8003c14:	08003cb1 	.word	0x08003cb1
 8003c18:	08003cb1 	.word	0x08003cb1
 8003c1c:	08003cb1 	.word	0x08003cb1
 8003c20:	08003c9b 	.word	0x08003c9b
 8003c24:	08003cb1 	.word	0x08003cb1
 8003c28:	08003cb1 	.word	0x08003cb1
 8003c2c:	08003cb1 	.word	0x08003cb1
 8003c30:	08003cb1 	.word	0x08003cb1
 8003c34:	08003cb1 	.word	0x08003cb1
 8003c38:	08003cb1 	.word	0x08003cb1
 8003c3c:	08003cb1 	.word	0x08003cb1
 8003c40:	08003cb9 	.word	0x08003cb9
 8003c44:	08003cb1 	.word	0x08003cb1
 8003c48:	08003cb1 	.word	0x08003cb1
 8003c4c:	08003cb1 	.word	0x08003cb1
 8003c50:	08003cb1 	.word	0x08003cb1
 8003c54:	08003cb1 	.word	0x08003cb1
 8003c58:	08003cb1 	.word	0x08003cb1
 8003c5c:	08003cb1 	.word	0x08003cb1
 8003c60:	08003cb9 	.word	0x08003cb9
 8003c64:	08003cb1 	.word	0x08003cb1
 8003c68:	08003cb1 	.word	0x08003cb1
 8003c6c:	08003cb1 	.word	0x08003cb1
 8003c70:	08003cb1 	.word	0x08003cb1
 8003c74:	08003cb1 	.word	0x08003cb1
 8003c78:	08003cb1 	.word	0x08003cb1
 8003c7c:	08003cb1 	.word	0x08003cb1
 8003c80:	08003cb9 	.word	0x08003cb9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c88:	3308      	adds	r3, #8
 8003c8a:	2101      	movs	r1, #1
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f000 ffc3 	bl	8004c18 <RCCEx_PLL2_Config>
 8003c92:	4603      	mov	r3, r0
 8003c94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003c98:	e00f      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c9e:	3328      	adds	r3, #40	@ 0x28
 8003ca0:	2101      	movs	r1, #1
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f001 f86a 	bl	8004d7c <RCCEx_PLL3_Config>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003cae:	e004      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003cb6:	e000      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003cb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d10a      	bne.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003cc2:	4bbf      	ldr	r3, [pc, #764]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003cc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cc6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003cd0:	4abb      	ldr	r2, [pc, #748]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003cd2:	430b      	orrs	r3, r1
 8003cd4:	6553      	str	r3, [r2, #84]	@ 0x54
 8003cd6:	e003      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cd8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cdc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003ce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce8:	f002 0302 	and.w	r3, r2, #2
 8003cec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003cf6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003cfa:	460b      	mov	r3, r1
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	d041      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003d00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d04:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d06:	2b05      	cmp	r3, #5
 8003d08:	d824      	bhi.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003d0a:	a201      	add	r2, pc, #4	@ (adr r2, 8003d10 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d10:	08003d5d 	.word	0x08003d5d
 8003d14:	08003d29 	.word	0x08003d29
 8003d18:	08003d3f 	.word	0x08003d3f
 8003d1c:	08003d5d 	.word	0x08003d5d
 8003d20:	08003d5d 	.word	0x08003d5d
 8003d24:	08003d5d 	.word	0x08003d5d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d2c:	3308      	adds	r3, #8
 8003d2e:	2101      	movs	r1, #1
 8003d30:	4618      	mov	r0, r3
 8003d32:	f000 ff71 	bl	8004c18 <RCCEx_PLL2_Config>
 8003d36:	4603      	mov	r3, r0
 8003d38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003d3c:	e00f      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d42:	3328      	adds	r3, #40	@ 0x28
 8003d44:	2101      	movs	r1, #1
 8003d46:	4618      	mov	r0, r3
 8003d48:	f001 f818 	bl	8004d7c <RCCEx_PLL3_Config>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003d52:	e004      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d5a:	e000      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003d5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d10a      	bne.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003d66:	4b96      	ldr	r3, [pc, #600]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d6a:	f023 0107 	bic.w	r1, r3, #7
 8003d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d72:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d74:	4a92      	ldr	r2, [pc, #584]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d76:	430b      	orrs	r3, r1
 8003d78:	6553      	str	r3, [r2, #84]	@ 0x54
 8003d7a:	e003      	b.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d8c:	f002 0304 	and.w	r3, r2, #4
 8003d90:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d94:	2300      	movs	r3, #0
 8003d96:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d9a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003d9e:	460b      	mov	r3, r1
 8003da0:	4313      	orrs	r3, r2
 8003da2:	d044      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003da4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003da8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dac:	2b05      	cmp	r3, #5
 8003dae:	d825      	bhi.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003db0:	a201      	add	r2, pc, #4	@ (adr r2, 8003db8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003db6:	bf00      	nop
 8003db8:	08003e05 	.word	0x08003e05
 8003dbc:	08003dd1 	.word	0x08003dd1
 8003dc0:	08003de7 	.word	0x08003de7
 8003dc4:	08003e05 	.word	0x08003e05
 8003dc8:	08003e05 	.word	0x08003e05
 8003dcc:	08003e05 	.word	0x08003e05
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dd4:	3308      	adds	r3, #8
 8003dd6:	2101      	movs	r1, #1
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f000 ff1d 	bl	8004c18 <RCCEx_PLL2_Config>
 8003dde:	4603      	mov	r3, r0
 8003de0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003de4:	e00f      	b.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dea:	3328      	adds	r3, #40	@ 0x28
 8003dec:	2101      	movs	r1, #1
 8003dee:	4618      	mov	r0, r3
 8003df0:	f000 ffc4 	bl	8004d7c <RCCEx_PLL3_Config>
 8003df4:	4603      	mov	r3, r0
 8003df6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003dfa:	e004      	b.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e02:	e000      	b.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003e04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d10b      	bne.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e0e:	4b6c      	ldr	r3, [pc, #432]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e12:	f023 0107 	bic.w	r1, r3, #7
 8003e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e1e:	4a68      	ldr	r2, [pc, #416]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e20:	430b      	orrs	r3, r1
 8003e22:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e24:	e003      	b.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e36:	f002 0320 	and.w	r3, r2, #32
 8003e3a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003e3e:	2300      	movs	r3, #0
 8003e40:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003e44:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003e48:	460b      	mov	r3, r1
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	d055      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e56:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e5a:	d033      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003e5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e60:	d82c      	bhi.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003e62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e66:	d02f      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003e68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e6c:	d826      	bhi.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003e6e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003e72:	d02b      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003e74:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003e78:	d820      	bhi.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003e7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e7e:	d012      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003e80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e84:	d81a      	bhi.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d022      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003e8a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e8e:	d115      	bne.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e94:	3308      	adds	r3, #8
 8003e96:	2100      	movs	r1, #0
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f000 febd 	bl	8004c18 <RCCEx_PLL2_Config>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003ea4:	e015      	b.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eaa:	3328      	adds	r3, #40	@ 0x28
 8003eac:	2102      	movs	r1, #2
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f000 ff64 	bl	8004d7c <RCCEx_PLL3_Config>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003eba:	e00a      	b.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ec2:	e006      	b.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003ec4:	bf00      	nop
 8003ec6:	e004      	b.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003ec8:	bf00      	nop
 8003eca:	e002      	b.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003ecc:	bf00      	nop
 8003ece:	e000      	b.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003ed0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ed2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d10b      	bne.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003eda:	4b39      	ldr	r3, [pc, #228]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003edc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ede:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eea:	4a35      	ldr	r2, [pc, #212]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003eec:	430b      	orrs	r3, r1
 8003eee:	6553      	str	r3, [r2, #84]	@ 0x54
 8003ef0:	e003      	b.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ef2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ef6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f02:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003f06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003f10:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003f14:	460b      	mov	r3, r1
 8003f16:	4313      	orrs	r3, r2
 8003f18:	d058      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003f1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f22:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003f26:	d033      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003f28:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003f2c:	d82c      	bhi.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003f2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f32:	d02f      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003f34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f38:	d826      	bhi.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003f3a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003f3e:	d02b      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003f40:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003f44:	d820      	bhi.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003f46:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f4a:	d012      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003f4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f50:	d81a      	bhi.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d022      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003f56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f5a:	d115      	bne.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f60:	3308      	adds	r3, #8
 8003f62:	2100      	movs	r1, #0
 8003f64:	4618      	mov	r0, r3
 8003f66:	f000 fe57 	bl	8004c18 <RCCEx_PLL2_Config>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003f70:	e015      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f76:	3328      	adds	r3, #40	@ 0x28
 8003f78:	2102      	movs	r1, #2
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f000 fefe 	bl	8004d7c <RCCEx_PLL3_Config>
 8003f80:	4603      	mov	r3, r0
 8003f82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003f86:	e00a      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f8e:	e006      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003f90:	bf00      	nop
 8003f92:	e004      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003f94:	bf00      	nop
 8003f96:	e002      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003f98:	bf00      	nop
 8003f9a:	e000      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003f9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d10e      	bne.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003fa6:	4b06      	ldr	r3, [pc, #24]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003fa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003faa:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003fae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fb2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003fb6:	4a02      	ldr	r2, [pc, #8]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003fb8:	430b      	orrs	r3, r1
 8003fba:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fbc:	e006      	b.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003fbe:	bf00      	nop
 8003fc0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fc8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003fcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003fd8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003fdc:	2300      	movs	r3, #0
 8003fde:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003fe2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003fe6:	460b      	mov	r3, r1
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	d055      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ff0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003ff4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003ff8:	d033      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003ffa:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003ffe:	d82c      	bhi.n	800405a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004000:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004004:	d02f      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004006:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800400a:	d826      	bhi.n	800405a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800400c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004010:	d02b      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004012:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004016:	d820      	bhi.n	800405a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004018:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800401c:	d012      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800401e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004022:	d81a      	bhi.n	800405a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004024:	2b00      	cmp	r3, #0
 8004026:	d022      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004028:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800402c:	d115      	bne.n	800405a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800402e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004032:	3308      	adds	r3, #8
 8004034:	2100      	movs	r1, #0
 8004036:	4618      	mov	r0, r3
 8004038:	f000 fdee 	bl	8004c18 <RCCEx_PLL2_Config>
 800403c:	4603      	mov	r3, r0
 800403e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004042:	e015      	b.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004044:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004048:	3328      	adds	r3, #40	@ 0x28
 800404a:	2102      	movs	r1, #2
 800404c:	4618      	mov	r0, r3
 800404e:	f000 fe95 	bl	8004d7c <RCCEx_PLL3_Config>
 8004052:	4603      	mov	r3, r0
 8004054:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004058:	e00a      	b.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004060:	e006      	b.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004062:	bf00      	nop
 8004064:	e004      	b.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004066:	bf00      	nop
 8004068:	e002      	b.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800406a:	bf00      	nop
 800406c:	e000      	b.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800406e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004070:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004074:	2b00      	cmp	r3, #0
 8004076:	d10b      	bne.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004078:	4ba1      	ldr	r3, [pc, #644]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800407a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800407c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004080:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004084:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004088:	4a9d      	ldr	r2, [pc, #628]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800408a:	430b      	orrs	r3, r1
 800408c:	6593      	str	r3, [r2, #88]	@ 0x58
 800408e:	e003      	b.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004090:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004094:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004098:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800409c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a0:	f002 0308 	and.w	r3, r2, #8
 80040a4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80040a8:	2300      	movs	r3, #0
 80040aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80040ae:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80040b2:	460b      	mov	r3, r1
 80040b4:	4313      	orrs	r3, r2
 80040b6:	d01e      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80040b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040c4:	d10c      	bne.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80040c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ca:	3328      	adds	r3, #40	@ 0x28
 80040cc:	2102      	movs	r1, #2
 80040ce:	4618      	mov	r0, r3
 80040d0:	f000 fe54 	bl	8004d7c <RCCEx_PLL3_Config>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d002      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80040e0:	4b87      	ldr	r3, [pc, #540]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040e4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80040e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040f0:	4a83      	ldr	r2, [pc, #524]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040f2:	430b      	orrs	r3, r1
 80040f4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80040f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040fe:	f002 0310 	and.w	r3, r2, #16
 8004102:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004106:	2300      	movs	r3, #0
 8004108:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800410c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004110:	460b      	mov	r3, r1
 8004112:	4313      	orrs	r3, r2
 8004114:	d01e      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004116:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800411a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800411e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004122:	d10c      	bne.n	800413e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004124:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004128:	3328      	adds	r3, #40	@ 0x28
 800412a:	2102      	movs	r1, #2
 800412c:	4618      	mov	r0, r3
 800412e:	f000 fe25 	bl	8004d7c <RCCEx_PLL3_Config>
 8004132:	4603      	mov	r3, r0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d002      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800413e:	4b70      	ldr	r3, [pc, #448]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004142:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004146:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800414a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800414e:	4a6c      	ldr	r2, [pc, #432]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004150:	430b      	orrs	r3, r1
 8004152:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004154:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800415c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004160:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004164:	2300      	movs	r3, #0
 8004166:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800416a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800416e:	460b      	mov	r3, r1
 8004170:	4313      	orrs	r3, r2
 8004172:	d03e      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004174:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004178:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800417c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004180:	d022      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004182:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004186:	d81b      	bhi.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004188:	2b00      	cmp	r3, #0
 800418a:	d003      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800418c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004190:	d00b      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004192:	e015      	b.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004194:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004198:	3308      	adds	r3, #8
 800419a:	2100      	movs	r1, #0
 800419c:	4618      	mov	r0, r3
 800419e:	f000 fd3b 	bl	8004c18 <RCCEx_PLL2_Config>
 80041a2:	4603      	mov	r3, r0
 80041a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80041a8:	e00f      	b.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80041aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ae:	3328      	adds	r3, #40	@ 0x28
 80041b0:	2102      	movs	r1, #2
 80041b2:	4618      	mov	r0, r3
 80041b4:	f000 fde2 	bl	8004d7c <RCCEx_PLL3_Config>
 80041b8:	4603      	mov	r3, r0
 80041ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80041be:	e004      	b.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041c6:	e000      	b.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80041c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10b      	bne.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80041d2:	4b4b      	ldr	r3, [pc, #300]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041d6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80041da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80041e2:	4a47      	ldr	r2, [pc, #284]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041e4:	430b      	orrs	r3, r1
 80041e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80041e8:	e003      	b.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80041f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041fa:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80041fe:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004200:	2300      	movs	r3, #0
 8004202:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004204:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004208:	460b      	mov	r3, r1
 800420a:	4313      	orrs	r3, r2
 800420c:	d03b      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800420e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004212:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004216:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800421a:	d01f      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800421c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004220:	d818      	bhi.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004222:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004226:	d003      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004228:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800422c:	d007      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800422e:	e011      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004230:	4b33      	ldr	r3, [pc, #204]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004234:	4a32      	ldr	r2, [pc, #200]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004236:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800423a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800423c:	e00f      	b.n	800425e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800423e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004242:	3328      	adds	r3, #40	@ 0x28
 8004244:	2101      	movs	r1, #1
 8004246:	4618      	mov	r0, r3
 8004248:	f000 fd98 	bl	8004d7c <RCCEx_PLL3_Config>
 800424c:	4603      	mov	r3, r0
 800424e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004252:	e004      	b.n	800425e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800425a:	e000      	b.n	800425e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800425c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800425e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004262:	2b00      	cmp	r3, #0
 8004264:	d10b      	bne.n	800427e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004266:	4b26      	ldr	r3, [pc, #152]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004268:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800426a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800426e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004272:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004276:	4a22      	ldr	r2, [pc, #136]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004278:	430b      	orrs	r3, r1
 800427a:	6553      	str	r3, [r2, #84]	@ 0x54
 800427c:	e003      	b.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800427e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004282:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004286:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800428a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800428e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004292:	673b      	str	r3, [r7, #112]	@ 0x70
 8004294:	2300      	movs	r3, #0
 8004296:	677b      	str	r3, [r7, #116]	@ 0x74
 8004298:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800429c:	460b      	mov	r3, r1
 800429e:	4313      	orrs	r3, r2
 80042a0:	d034      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80042a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d003      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80042ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042b0:	d007      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80042b2:	e011      	b.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042b4:	4b12      	ldr	r3, [pc, #72]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042b8:	4a11      	ldr	r2, [pc, #68]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80042c0:	e00e      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80042c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042c6:	3308      	adds	r3, #8
 80042c8:	2102      	movs	r1, #2
 80042ca:	4618      	mov	r0, r3
 80042cc:	f000 fca4 	bl	8004c18 <RCCEx_PLL2_Config>
 80042d0:	4603      	mov	r3, r0
 80042d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80042d6:	e003      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80042de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d10d      	bne.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80042e8:	4b05      	ldr	r3, [pc, #20]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042ec:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80042f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042f6:	4a02      	ldr	r2, [pc, #8]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042f8:	430b      	orrs	r3, r1
 80042fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80042fc:	e006      	b.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80042fe:	bf00      	nop
 8004300:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004304:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004308:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800430c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004314:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004318:	66bb      	str	r3, [r7, #104]	@ 0x68
 800431a:	2300      	movs	r3, #0
 800431c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800431e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004322:	460b      	mov	r3, r1
 8004324:	4313      	orrs	r3, r2
 8004326:	d00c      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004328:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800432c:	3328      	adds	r3, #40	@ 0x28
 800432e:	2102      	movs	r1, #2
 8004330:	4618      	mov	r0, r3
 8004332:	f000 fd23 	bl	8004d7c <RCCEx_PLL3_Config>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d002      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004342:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800434a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800434e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004350:	2300      	movs	r3, #0
 8004352:	667b      	str	r3, [r7, #100]	@ 0x64
 8004354:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004358:	460b      	mov	r3, r1
 800435a:	4313      	orrs	r3, r2
 800435c:	d038      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800435e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004362:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004366:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800436a:	d018      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800436c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004370:	d811      	bhi.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004372:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004376:	d014      	beq.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004378:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800437c:	d80b      	bhi.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800437e:	2b00      	cmp	r3, #0
 8004380:	d011      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004382:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004386:	d106      	bne.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004388:	4bc3      	ldr	r3, [pc, #780]	@ (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800438a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800438c:	4ac2      	ldr	r2, [pc, #776]	@ (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800438e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004392:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004394:	e008      	b.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800439c:	e004      	b.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800439e:	bf00      	nop
 80043a0:	e002      	b.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80043a2:	bf00      	nop
 80043a4:	e000      	b.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80043a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d10b      	bne.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80043b0:	4bb9      	ldr	r3, [pc, #740]	@ (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043b4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80043b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043c0:	4ab5      	ldr	r2, [pc, #724]	@ (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043c2:	430b      	orrs	r3, r1
 80043c4:	6553      	str	r3, [r2, #84]	@ 0x54
 80043c6:	e003      	b.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80043d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80043dc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80043de:	2300      	movs	r3, #0
 80043e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80043e2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80043e6:	460b      	mov	r3, r1
 80043e8:	4313      	orrs	r3, r2
 80043ea:	d009      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80043ec:	4baa      	ldr	r3, [pc, #680]	@ (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043f0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80043f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043fa:	4aa7      	ldr	r2, [pc, #668]	@ (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043fc:	430b      	orrs	r3, r1
 80043fe:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004400:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004408:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800440c:	653b      	str	r3, [r7, #80]	@ 0x50
 800440e:	2300      	movs	r3, #0
 8004410:	657b      	str	r3, [r7, #84]	@ 0x54
 8004412:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004416:	460b      	mov	r3, r1
 8004418:	4313      	orrs	r3, r2
 800441a:	d00a      	beq.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800441c:	4b9e      	ldr	r3, [pc, #632]	@ (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800441e:	691b      	ldr	r3, [r3, #16]
 8004420:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004424:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004428:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800442c:	4a9a      	ldr	r2, [pc, #616]	@ (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800442e:	430b      	orrs	r3, r1
 8004430:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004432:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800443a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800443e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004440:	2300      	movs	r3, #0
 8004442:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004444:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004448:	460b      	mov	r3, r1
 800444a:	4313      	orrs	r3, r2
 800444c:	d009      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800444e:	4b92      	ldr	r3, [pc, #584]	@ (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004450:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004452:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004456:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800445a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800445c:	4a8e      	ldr	r2, [pc, #568]	@ (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800445e:	430b      	orrs	r3, r1
 8004460:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004462:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800446a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800446e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004470:	2300      	movs	r3, #0
 8004472:	647b      	str	r3, [r7, #68]	@ 0x44
 8004474:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004478:	460b      	mov	r3, r1
 800447a:	4313      	orrs	r3, r2
 800447c:	d00e      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800447e:	4b86      	ldr	r3, [pc, #536]	@ (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	4a85      	ldr	r2, [pc, #532]	@ (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004484:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004488:	6113      	str	r3, [r2, #16]
 800448a:	4b83      	ldr	r3, [pc, #524]	@ (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800448c:	6919      	ldr	r1, [r3, #16]
 800448e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004492:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004496:	4a80      	ldr	r2, [pc, #512]	@ (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004498:	430b      	orrs	r3, r1
 800449a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800449c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80044a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80044aa:	2300      	movs	r3, #0
 80044ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80044ae:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80044b2:	460b      	mov	r3, r1
 80044b4:	4313      	orrs	r3, r2
 80044b6:	d009      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80044b8:	4b77      	ldr	r3, [pc, #476]	@ (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044bc:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80044c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044c6:	4a74      	ldr	r2, [pc, #464]	@ (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044c8:	430b      	orrs	r3, r1
 80044ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80044cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80044d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80044da:	2300      	movs	r3, #0
 80044dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80044de:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80044e2:	460b      	mov	r3, r1
 80044e4:	4313      	orrs	r3, r2
 80044e6:	d00a      	beq.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80044e8:	4b6b      	ldr	r3, [pc, #428]	@ (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044ec:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80044f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80044f8:	4a67      	ldr	r2, [pc, #412]	@ (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044fa:	430b      	orrs	r3, r1
 80044fc:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80044fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004506:	2100      	movs	r1, #0
 8004508:	62b9      	str	r1, [r7, #40]	@ 0x28
 800450a:	f003 0301 	and.w	r3, r3, #1
 800450e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004510:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004514:	460b      	mov	r3, r1
 8004516:	4313      	orrs	r3, r2
 8004518:	d011      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800451a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800451e:	3308      	adds	r3, #8
 8004520:	2100      	movs	r1, #0
 8004522:	4618      	mov	r0, r3
 8004524:	f000 fb78 	bl	8004c18 <RCCEx_PLL2_Config>
 8004528:	4603      	mov	r3, r0
 800452a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800452e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004532:	2b00      	cmp	r3, #0
 8004534:	d003      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004536:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800453a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800453e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004546:	2100      	movs	r1, #0
 8004548:	6239      	str	r1, [r7, #32]
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004550:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004554:	460b      	mov	r3, r1
 8004556:	4313      	orrs	r3, r2
 8004558:	d011      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800455a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800455e:	3308      	adds	r3, #8
 8004560:	2101      	movs	r1, #1
 8004562:	4618      	mov	r0, r3
 8004564:	f000 fb58 	bl	8004c18 <RCCEx_PLL2_Config>
 8004568:	4603      	mov	r3, r0
 800456a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800456e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004572:	2b00      	cmp	r3, #0
 8004574:	d003      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004576:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800457a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800457e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004586:	2100      	movs	r1, #0
 8004588:	61b9      	str	r1, [r7, #24]
 800458a:	f003 0304 	and.w	r3, r3, #4
 800458e:	61fb      	str	r3, [r7, #28]
 8004590:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004594:	460b      	mov	r3, r1
 8004596:	4313      	orrs	r3, r2
 8004598:	d011      	beq.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800459a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800459e:	3308      	adds	r3, #8
 80045a0:	2102      	movs	r1, #2
 80045a2:	4618      	mov	r0, r3
 80045a4:	f000 fb38 	bl	8004c18 <RCCEx_PLL2_Config>
 80045a8:	4603      	mov	r3, r0
 80045aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80045ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d003      	beq.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80045be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c6:	2100      	movs	r1, #0
 80045c8:	6139      	str	r1, [r7, #16]
 80045ca:	f003 0308 	and.w	r3, r3, #8
 80045ce:	617b      	str	r3, [r7, #20]
 80045d0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80045d4:	460b      	mov	r3, r1
 80045d6:	4313      	orrs	r3, r2
 80045d8:	d011      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80045da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045de:	3328      	adds	r3, #40	@ 0x28
 80045e0:	2100      	movs	r1, #0
 80045e2:	4618      	mov	r0, r3
 80045e4:	f000 fbca 	bl	8004d7c <RCCEx_PLL3_Config>
 80045e8:	4603      	mov	r3, r0
 80045ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80045ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d003      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80045fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004606:	2100      	movs	r1, #0
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	f003 0310 	and.w	r3, r3, #16
 800460e:	60fb      	str	r3, [r7, #12]
 8004610:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004614:	460b      	mov	r3, r1
 8004616:	4313      	orrs	r3, r2
 8004618:	d011      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800461a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800461e:	3328      	adds	r3, #40	@ 0x28
 8004620:	2101      	movs	r1, #1
 8004622:	4618      	mov	r0, r3
 8004624:	f000 fbaa 	bl	8004d7c <RCCEx_PLL3_Config>
 8004628:	4603      	mov	r3, r0
 800462a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800462e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004632:	2b00      	cmp	r3, #0
 8004634:	d003      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004636:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800463a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800463e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004646:	2100      	movs	r1, #0
 8004648:	6039      	str	r1, [r7, #0]
 800464a:	f003 0320 	and.w	r3, r3, #32
 800464e:	607b      	str	r3, [r7, #4]
 8004650:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004654:	460b      	mov	r3, r1
 8004656:	4313      	orrs	r3, r2
 8004658:	d011      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800465a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800465e:	3328      	adds	r3, #40	@ 0x28
 8004660:	2102      	movs	r1, #2
 8004662:	4618      	mov	r0, r3
 8004664:	f000 fb8a 	bl	8004d7c <RCCEx_PLL3_Config>
 8004668:	4603      	mov	r3, r0
 800466a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800466e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004672:	2b00      	cmp	r3, #0
 8004674:	d003      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004676:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800467a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800467e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004682:	2b00      	cmp	r3, #0
 8004684:	d101      	bne.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004686:	2300      	movs	r3, #0
 8004688:	e000      	b.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
}
 800468c:	4618      	mov	r0, r3
 800468e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004692:	46bd      	mov	sp, r7
 8004694:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004698:	58024400 	.word	0x58024400

0800469c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80046a0:	f7fe fd96 	bl	80031d0 <HAL_RCC_GetHCLKFreq>
 80046a4:	4602      	mov	r2, r0
 80046a6:	4b06      	ldr	r3, [pc, #24]	@ (80046c0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80046a8:	6a1b      	ldr	r3, [r3, #32]
 80046aa:	091b      	lsrs	r3, r3, #4
 80046ac:	f003 0307 	and.w	r3, r3, #7
 80046b0:	4904      	ldr	r1, [pc, #16]	@ (80046c4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80046b2:	5ccb      	ldrb	r3, [r1, r3]
 80046b4:	f003 031f 	and.w	r3, r3, #31
 80046b8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80046bc:	4618      	mov	r0, r3
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	58024400 	.word	0x58024400
 80046c4:	080073a8 	.word	0x080073a8

080046c8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b089      	sub	sp, #36	@ 0x24
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80046d0:	4ba1      	ldr	r3, [pc, #644]	@ (8004958 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046d4:	f003 0303 	and.w	r3, r3, #3
 80046d8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80046da:	4b9f      	ldr	r3, [pc, #636]	@ (8004958 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046de:	0b1b      	lsrs	r3, r3, #12
 80046e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80046e4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80046e6:	4b9c      	ldr	r3, [pc, #624]	@ (8004958 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ea:	091b      	lsrs	r3, r3, #4
 80046ec:	f003 0301 	and.w	r3, r3, #1
 80046f0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80046f2:	4b99      	ldr	r3, [pc, #612]	@ (8004958 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046f6:	08db      	lsrs	r3, r3, #3
 80046f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80046fc:	693a      	ldr	r2, [r7, #16]
 80046fe:	fb02 f303 	mul.w	r3, r2, r3
 8004702:	ee07 3a90 	vmov	s15, r3
 8004706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800470a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	2b00      	cmp	r3, #0
 8004712:	f000 8111 	beq.w	8004938 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	2b02      	cmp	r3, #2
 800471a:	f000 8083 	beq.w	8004824 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	2b02      	cmp	r3, #2
 8004722:	f200 80a1 	bhi.w	8004868 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004726:	69bb      	ldr	r3, [r7, #24]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d003      	beq.n	8004734 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	2b01      	cmp	r3, #1
 8004730:	d056      	beq.n	80047e0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004732:	e099      	b.n	8004868 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004734:	4b88      	ldr	r3, [pc, #544]	@ (8004958 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0320 	and.w	r3, r3, #32
 800473c:	2b00      	cmp	r3, #0
 800473e:	d02d      	beq.n	800479c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004740:	4b85      	ldr	r3, [pc, #532]	@ (8004958 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	08db      	lsrs	r3, r3, #3
 8004746:	f003 0303 	and.w	r3, r3, #3
 800474a:	4a84      	ldr	r2, [pc, #528]	@ (800495c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800474c:	fa22 f303 	lsr.w	r3, r2, r3
 8004750:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	ee07 3a90 	vmov	s15, r3
 8004758:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	ee07 3a90 	vmov	s15, r3
 8004762:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004766:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800476a:	4b7b      	ldr	r3, [pc, #492]	@ (8004958 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800476c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800476e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004772:	ee07 3a90 	vmov	s15, r3
 8004776:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800477a:	ed97 6a03 	vldr	s12, [r7, #12]
 800477e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004960 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004782:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004786:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800478a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800478e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004792:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004796:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800479a:	e087      	b.n	80048ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	ee07 3a90 	vmov	s15, r3
 80047a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047a6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004964 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80047aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047ae:	4b6a      	ldr	r3, [pc, #424]	@ (8004958 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047b6:	ee07 3a90 	vmov	s15, r3
 80047ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047be:	ed97 6a03 	vldr	s12, [r7, #12]
 80047c2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004960 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80047c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047de:	e065      	b.n	80048ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	ee07 3a90 	vmov	s15, r3
 80047e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ea:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004968 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80047ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047f2:	4b59      	ldr	r3, [pc, #356]	@ (8004958 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047fa:	ee07 3a90 	vmov	s15, r3
 80047fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004802:	ed97 6a03 	vldr	s12, [r7, #12]
 8004806:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004960 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800480a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800480e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004812:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004816:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800481a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800481e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004822:	e043      	b.n	80048ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	ee07 3a90 	vmov	s15, r3
 800482a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800482e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800496c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004832:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004836:	4b48      	ldr	r3, [pc, #288]	@ (8004958 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004838:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800483a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800483e:	ee07 3a90 	vmov	s15, r3
 8004842:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004846:	ed97 6a03 	vldr	s12, [r7, #12]
 800484a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004960 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800484e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004852:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004856:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800485a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800485e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004862:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004866:	e021      	b.n	80048ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	ee07 3a90 	vmov	s15, r3
 800486e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004872:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004968 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004876:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800487a:	4b37      	ldr	r3, [pc, #220]	@ (8004958 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800487c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800487e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004882:	ee07 3a90 	vmov	s15, r3
 8004886:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800488a:	ed97 6a03 	vldr	s12, [r7, #12]
 800488e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004960 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004892:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004896:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800489a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800489e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048aa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80048ac:	4b2a      	ldr	r3, [pc, #168]	@ (8004958 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048b0:	0a5b      	lsrs	r3, r3, #9
 80048b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80048b6:	ee07 3a90 	vmov	s15, r3
 80048ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80048c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80048c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80048ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048d2:	ee17 2a90 	vmov	r2, s15
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80048da:	4b1f      	ldr	r3, [pc, #124]	@ (8004958 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048de:	0c1b      	lsrs	r3, r3, #16
 80048e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80048e4:	ee07 3a90 	vmov	s15, r3
 80048e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80048f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80048f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80048f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004900:	ee17 2a90 	vmov	r2, s15
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004908:	4b13      	ldr	r3, [pc, #76]	@ (8004958 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800490a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800490c:	0e1b      	lsrs	r3, r3, #24
 800490e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004912:	ee07 3a90 	vmov	s15, r3
 8004916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800491a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800491e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004922:	edd7 6a07 	vldr	s13, [r7, #28]
 8004926:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800492a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800492e:	ee17 2a90 	vmov	r2, s15
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004936:	e008      	b.n	800494a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	609a      	str	r2, [r3, #8]
}
 800494a:	bf00      	nop
 800494c:	3724      	adds	r7, #36	@ 0x24
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	58024400 	.word	0x58024400
 800495c:	03d09000 	.word	0x03d09000
 8004960:	46000000 	.word	0x46000000
 8004964:	4c742400 	.word	0x4c742400
 8004968:	4a742400 	.word	0x4a742400
 800496c:	4bbebc20 	.word	0x4bbebc20

08004970 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004970:	b480      	push	{r7}
 8004972:	b089      	sub	sp, #36	@ 0x24
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004978:	4ba1      	ldr	r3, [pc, #644]	@ (8004c00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800497a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800497c:	f003 0303 	and.w	r3, r3, #3
 8004980:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004982:	4b9f      	ldr	r3, [pc, #636]	@ (8004c00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004986:	0d1b      	lsrs	r3, r3, #20
 8004988:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800498c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800498e:	4b9c      	ldr	r3, [pc, #624]	@ (8004c00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004992:	0a1b      	lsrs	r3, r3, #8
 8004994:	f003 0301 	and.w	r3, r3, #1
 8004998:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800499a:	4b99      	ldr	r3, [pc, #612]	@ (8004c00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800499c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800499e:	08db      	lsrs	r3, r3, #3
 80049a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80049a4:	693a      	ldr	r2, [r7, #16]
 80049a6:	fb02 f303 	mul.w	r3, r2, r3
 80049aa:	ee07 3a90 	vmov	s15, r3
 80049ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049b2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	f000 8111 	beq.w	8004be0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	f000 8083 	beq.w	8004acc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	f200 80a1 	bhi.w	8004b10 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d003      	beq.n	80049dc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d056      	beq.n	8004a88 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80049da:	e099      	b.n	8004b10 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80049dc:	4b88      	ldr	r3, [pc, #544]	@ (8004c00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0320 	and.w	r3, r3, #32
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d02d      	beq.n	8004a44 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80049e8:	4b85      	ldr	r3, [pc, #532]	@ (8004c00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	08db      	lsrs	r3, r3, #3
 80049ee:	f003 0303 	and.w	r3, r3, #3
 80049f2:	4a84      	ldr	r2, [pc, #528]	@ (8004c04 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80049f4:	fa22 f303 	lsr.w	r3, r2, r3
 80049f8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	ee07 3a90 	vmov	s15, r3
 8004a00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	ee07 3a90 	vmov	s15, r3
 8004a0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a12:	4b7b      	ldr	r3, [pc, #492]	@ (8004c00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a1a:	ee07 3a90 	vmov	s15, r3
 8004a1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a22:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a26:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004c08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a3e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004a42:	e087      	b.n	8004b54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	ee07 3a90 	vmov	s15, r3
 8004a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a4e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004c0c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004a52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a56:	4b6a      	ldr	r3, [pc, #424]	@ (8004c00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a5e:	ee07 3a90 	vmov	s15, r3
 8004a62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a66:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a6a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004c08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a86:	e065      	b.n	8004b54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	ee07 3a90 	vmov	s15, r3
 8004a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a92:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004c10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004a96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a9a:	4b59      	ldr	r3, [pc, #356]	@ (8004c00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aa2:	ee07 3a90 	vmov	s15, r3
 8004aa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aaa:	ed97 6a03 	vldr	s12, [r7, #12]
 8004aae:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004c08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ab2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ab6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004aba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004abe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ac6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004aca:	e043      	b.n	8004b54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	ee07 3a90 	vmov	s15, r3
 8004ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ad6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004c14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004ada:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ade:	4b48      	ldr	r3, [pc, #288]	@ (8004c00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ae2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ae6:	ee07 3a90 	vmov	s15, r3
 8004aea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aee:	ed97 6a03 	vldr	s12, [r7, #12]
 8004af2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004c08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004af6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004afa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004afe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b0e:	e021      	b.n	8004b54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	ee07 3a90 	vmov	s15, r3
 8004b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b1a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004c10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004b1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b22:	4b37      	ldr	r3, [pc, #220]	@ (8004c00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b2a:	ee07 3a90 	vmov	s15, r3
 8004b2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b32:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b36:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004c08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b52:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004b54:	4b2a      	ldr	r3, [pc, #168]	@ (8004c00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b58:	0a5b      	lsrs	r3, r3, #9
 8004b5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b5e:	ee07 3a90 	vmov	s15, r3
 8004b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b66:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b7a:	ee17 2a90 	vmov	r2, s15
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004b82:	4b1f      	ldr	r3, [pc, #124]	@ (8004c00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b86:	0c1b      	lsrs	r3, r3, #16
 8004b88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b8c:	ee07 3a90 	vmov	s15, r3
 8004b90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b94:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b98:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ba0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ba4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ba8:	ee17 2a90 	vmov	r2, s15
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004bb0:	4b13      	ldr	r3, [pc, #76]	@ (8004c00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bb4:	0e1b      	lsrs	r3, r3, #24
 8004bb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bba:	ee07 3a90 	vmov	s15, r3
 8004bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bc2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004bc6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004bca:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bd6:	ee17 2a90 	vmov	r2, s15
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004bde:	e008      	b.n	8004bf2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	609a      	str	r2, [r3, #8]
}
 8004bf2:	bf00      	nop
 8004bf4:	3724      	adds	r7, #36	@ 0x24
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop
 8004c00:	58024400 	.word	0x58024400
 8004c04:	03d09000 	.word	0x03d09000
 8004c08:	46000000 	.word	0x46000000
 8004c0c:	4c742400 	.word	0x4c742400
 8004c10:	4a742400 	.word	0x4a742400
 8004c14:	4bbebc20 	.word	0x4bbebc20

08004c18 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c22:	2300      	movs	r3, #0
 8004c24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004c26:	4b53      	ldr	r3, [pc, #332]	@ (8004d74 <RCCEx_PLL2_Config+0x15c>)
 8004c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c2a:	f003 0303 	and.w	r3, r3, #3
 8004c2e:	2b03      	cmp	r3, #3
 8004c30:	d101      	bne.n	8004c36 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e099      	b.n	8004d6a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004c36:	4b4f      	ldr	r3, [pc, #316]	@ (8004d74 <RCCEx_PLL2_Config+0x15c>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a4e      	ldr	r2, [pc, #312]	@ (8004d74 <RCCEx_PLL2_Config+0x15c>)
 8004c3c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004c40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c42:	f7fc feff 	bl	8001a44 <HAL_GetTick>
 8004c46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004c48:	e008      	b.n	8004c5c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004c4a:	f7fc fefb 	bl	8001a44 <HAL_GetTick>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	2b02      	cmp	r3, #2
 8004c56:	d901      	bls.n	8004c5c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	e086      	b.n	8004d6a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004c5c:	4b45      	ldr	r3, [pc, #276]	@ (8004d74 <RCCEx_PLL2_Config+0x15c>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d1f0      	bne.n	8004c4a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004c68:	4b42      	ldr	r3, [pc, #264]	@ (8004d74 <RCCEx_PLL2_Config+0x15c>)
 8004c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c6c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	031b      	lsls	r3, r3, #12
 8004c76:	493f      	ldr	r1, [pc, #252]	@ (8004d74 <RCCEx_PLL2_Config+0x15c>)
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	628b      	str	r3, [r1, #40]	@ 0x28
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	3b01      	subs	r3, #1
 8004c82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	3b01      	subs	r3, #1
 8004c8c:	025b      	lsls	r3, r3, #9
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	431a      	orrs	r2, r3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	3b01      	subs	r3, #1
 8004c98:	041b      	lsls	r3, r3, #16
 8004c9a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004c9e:	431a      	orrs	r2, r3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	691b      	ldr	r3, [r3, #16]
 8004ca4:	3b01      	subs	r3, #1
 8004ca6:	061b      	lsls	r3, r3, #24
 8004ca8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004cac:	4931      	ldr	r1, [pc, #196]	@ (8004d74 <RCCEx_PLL2_Config+0x15c>)
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004cb2:	4b30      	ldr	r3, [pc, #192]	@ (8004d74 <RCCEx_PLL2_Config+0x15c>)
 8004cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cb6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	695b      	ldr	r3, [r3, #20]
 8004cbe:	492d      	ldr	r1, [pc, #180]	@ (8004d74 <RCCEx_PLL2_Config+0x15c>)
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004cc4:	4b2b      	ldr	r3, [pc, #172]	@ (8004d74 <RCCEx_PLL2_Config+0x15c>)
 8004cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cc8:	f023 0220 	bic.w	r2, r3, #32
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	699b      	ldr	r3, [r3, #24]
 8004cd0:	4928      	ldr	r1, [pc, #160]	@ (8004d74 <RCCEx_PLL2_Config+0x15c>)
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004cd6:	4b27      	ldr	r3, [pc, #156]	@ (8004d74 <RCCEx_PLL2_Config+0x15c>)
 8004cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cda:	4a26      	ldr	r2, [pc, #152]	@ (8004d74 <RCCEx_PLL2_Config+0x15c>)
 8004cdc:	f023 0310 	bic.w	r3, r3, #16
 8004ce0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004ce2:	4b24      	ldr	r3, [pc, #144]	@ (8004d74 <RCCEx_PLL2_Config+0x15c>)
 8004ce4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ce6:	4b24      	ldr	r3, [pc, #144]	@ (8004d78 <RCCEx_PLL2_Config+0x160>)
 8004ce8:	4013      	ands	r3, r2
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	69d2      	ldr	r2, [r2, #28]
 8004cee:	00d2      	lsls	r2, r2, #3
 8004cf0:	4920      	ldr	r1, [pc, #128]	@ (8004d74 <RCCEx_PLL2_Config+0x15c>)
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004cf6:	4b1f      	ldr	r3, [pc, #124]	@ (8004d74 <RCCEx_PLL2_Config+0x15c>)
 8004cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cfa:	4a1e      	ldr	r2, [pc, #120]	@ (8004d74 <RCCEx_PLL2_Config+0x15c>)
 8004cfc:	f043 0310 	orr.w	r3, r3, #16
 8004d00:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d106      	bne.n	8004d16 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004d08:	4b1a      	ldr	r3, [pc, #104]	@ (8004d74 <RCCEx_PLL2_Config+0x15c>)
 8004d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d0c:	4a19      	ldr	r2, [pc, #100]	@ (8004d74 <RCCEx_PLL2_Config+0x15c>)
 8004d0e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004d12:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004d14:	e00f      	b.n	8004d36 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d106      	bne.n	8004d2a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004d1c:	4b15      	ldr	r3, [pc, #84]	@ (8004d74 <RCCEx_PLL2_Config+0x15c>)
 8004d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d20:	4a14      	ldr	r2, [pc, #80]	@ (8004d74 <RCCEx_PLL2_Config+0x15c>)
 8004d22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d26:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004d28:	e005      	b.n	8004d36 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004d2a:	4b12      	ldr	r3, [pc, #72]	@ (8004d74 <RCCEx_PLL2_Config+0x15c>)
 8004d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d2e:	4a11      	ldr	r2, [pc, #68]	@ (8004d74 <RCCEx_PLL2_Config+0x15c>)
 8004d30:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004d34:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004d36:	4b0f      	ldr	r3, [pc, #60]	@ (8004d74 <RCCEx_PLL2_Config+0x15c>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a0e      	ldr	r2, [pc, #56]	@ (8004d74 <RCCEx_PLL2_Config+0x15c>)
 8004d3c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004d40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d42:	f7fc fe7f 	bl	8001a44 <HAL_GetTick>
 8004d46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004d48:	e008      	b.n	8004d5c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004d4a:	f7fc fe7b 	bl	8001a44 <HAL_GetTick>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d901      	bls.n	8004d5c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004d58:	2303      	movs	r3, #3
 8004d5a:	e006      	b.n	8004d6a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004d5c:	4b05      	ldr	r3, [pc, #20]	@ (8004d74 <RCCEx_PLL2_Config+0x15c>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d0f0      	beq.n	8004d4a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3710      	adds	r7, #16
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	58024400 	.word	0x58024400
 8004d78:	ffff0007 	.word	0xffff0007

08004d7c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d86:	2300      	movs	r3, #0
 8004d88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004d8a:	4b53      	ldr	r3, [pc, #332]	@ (8004ed8 <RCCEx_PLL3_Config+0x15c>)
 8004d8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d8e:	f003 0303 	and.w	r3, r3, #3
 8004d92:	2b03      	cmp	r3, #3
 8004d94:	d101      	bne.n	8004d9a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e099      	b.n	8004ece <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004d9a:	4b4f      	ldr	r3, [pc, #316]	@ (8004ed8 <RCCEx_PLL3_Config+0x15c>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a4e      	ldr	r2, [pc, #312]	@ (8004ed8 <RCCEx_PLL3_Config+0x15c>)
 8004da0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004da4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004da6:	f7fc fe4d 	bl	8001a44 <HAL_GetTick>
 8004daa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004dac:	e008      	b.n	8004dc0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004dae:	f7fc fe49 	bl	8001a44 <HAL_GetTick>
 8004db2:	4602      	mov	r2, r0
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d901      	bls.n	8004dc0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	e086      	b.n	8004ece <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004dc0:	4b45      	ldr	r3, [pc, #276]	@ (8004ed8 <RCCEx_PLL3_Config+0x15c>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d1f0      	bne.n	8004dae <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004dcc:	4b42      	ldr	r3, [pc, #264]	@ (8004ed8 <RCCEx_PLL3_Config+0x15c>)
 8004dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dd0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	051b      	lsls	r3, r3, #20
 8004dda:	493f      	ldr	r1, [pc, #252]	@ (8004ed8 <RCCEx_PLL3_Config+0x15c>)
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	628b      	str	r3, [r1, #40]	@ 0x28
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	3b01      	subs	r3, #1
 8004de6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	3b01      	subs	r3, #1
 8004df0:	025b      	lsls	r3, r3, #9
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	431a      	orrs	r2, r3
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	3b01      	subs	r3, #1
 8004dfc:	041b      	lsls	r3, r3, #16
 8004dfe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004e02:	431a      	orrs	r2, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	3b01      	subs	r3, #1
 8004e0a:	061b      	lsls	r3, r3, #24
 8004e0c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004e10:	4931      	ldr	r1, [pc, #196]	@ (8004ed8 <RCCEx_PLL3_Config+0x15c>)
 8004e12:	4313      	orrs	r3, r2
 8004e14:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004e16:	4b30      	ldr	r3, [pc, #192]	@ (8004ed8 <RCCEx_PLL3_Config+0x15c>)
 8004e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e1a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	695b      	ldr	r3, [r3, #20]
 8004e22:	492d      	ldr	r1, [pc, #180]	@ (8004ed8 <RCCEx_PLL3_Config+0x15c>)
 8004e24:	4313      	orrs	r3, r2
 8004e26:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004e28:	4b2b      	ldr	r3, [pc, #172]	@ (8004ed8 <RCCEx_PLL3_Config+0x15c>)
 8004e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e2c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	699b      	ldr	r3, [r3, #24]
 8004e34:	4928      	ldr	r1, [pc, #160]	@ (8004ed8 <RCCEx_PLL3_Config+0x15c>)
 8004e36:	4313      	orrs	r3, r2
 8004e38:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004e3a:	4b27      	ldr	r3, [pc, #156]	@ (8004ed8 <RCCEx_PLL3_Config+0x15c>)
 8004e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e3e:	4a26      	ldr	r2, [pc, #152]	@ (8004ed8 <RCCEx_PLL3_Config+0x15c>)
 8004e40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e44:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004e46:	4b24      	ldr	r3, [pc, #144]	@ (8004ed8 <RCCEx_PLL3_Config+0x15c>)
 8004e48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e4a:	4b24      	ldr	r3, [pc, #144]	@ (8004edc <RCCEx_PLL3_Config+0x160>)
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	69d2      	ldr	r2, [r2, #28]
 8004e52:	00d2      	lsls	r2, r2, #3
 8004e54:	4920      	ldr	r1, [pc, #128]	@ (8004ed8 <RCCEx_PLL3_Config+0x15c>)
 8004e56:	4313      	orrs	r3, r2
 8004e58:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004e5a:	4b1f      	ldr	r3, [pc, #124]	@ (8004ed8 <RCCEx_PLL3_Config+0x15c>)
 8004e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e5e:	4a1e      	ldr	r2, [pc, #120]	@ (8004ed8 <RCCEx_PLL3_Config+0x15c>)
 8004e60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e64:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d106      	bne.n	8004e7a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004e6c:	4b1a      	ldr	r3, [pc, #104]	@ (8004ed8 <RCCEx_PLL3_Config+0x15c>)
 8004e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e70:	4a19      	ldr	r2, [pc, #100]	@ (8004ed8 <RCCEx_PLL3_Config+0x15c>)
 8004e72:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004e76:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004e78:	e00f      	b.n	8004e9a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d106      	bne.n	8004e8e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004e80:	4b15      	ldr	r3, [pc, #84]	@ (8004ed8 <RCCEx_PLL3_Config+0x15c>)
 8004e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e84:	4a14      	ldr	r2, [pc, #80]	@ (8004ed8 <RCCEx_PLL3_Config+0x15c>)
 8004e86:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004e8a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004e8c:	e005      	b.n	8004e9a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004e8e:	4b12      	ldr	r3, [pc, #72]	@ (8004ed8 <RCCEx_PLL3_Config+0x15c>)
 8004e90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e92:	4a11      	ldr	r2, [pc, #68]	@ (8004ed8 <RCCEx_PLL3_Config+0x15c>)
 8004e94:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e98:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004e9a:	4b0f      	ldr	r3, [pc, #60]	@ (8004ed8 <RCCEx_PLL3_Config+0x15c>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a0e      	ldr	r2, [pc, #56]	@ (8004ed8 <RCCEx_PLL3_Config+0x15c>)
 8004ea0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ea4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ea6:	f7fc fdcd 	bl	8001a44 <HAL_GetTick>
 8004eaa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004eac:	e008      	b.n	8004ec0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004eae:	f7fc fdc9 	bl	8001a44 <HAL_GetTick>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	d901      	bls.n	8004ec0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	e006      	b.n	8004ece <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004ec0:	4b05      	ldr	r3, [pc, #20]	@ (8004ed8 <RCCEx_PLL3_Config+0x15c>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d0f0      	beq.n	8004eae <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3710      	adds	r7, #16
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	58024400 	.word	0x58024400
 8004edc:	ffff0007 	.word	0xffff0007

08004ee0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d101      	bne.n	8004ef2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e10f      	b.n	8005112 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a87      	ldr	r2, [pc, #540]	@ (800511c <HAL_SPI_Init+0x23c>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d00f      	beq.n	8004f22 <HAL_SPI_Init+0x42>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a86      	ldr	r2, [pc, #536]	@ (8005120 <HAL_SPI_Init+0x240>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d00a      	beq.n	8004f22 <HAL_SPI_Init+0x42>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a84      	ldr	r2, [pc, #528]	@ (8005124 <HAL_SPI_Init+0x244>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d005      	beq.n	8004f22 <HAL_SPI_Init+0x42>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	2b0f      	cmp	r3, #15
 8004f1c:	d901      	bls.n	8004f22 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e0f7      	b.n	8005112 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f001 f968 	bl	80061f8 <SPI_GetPacketSize>
 8004f28:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a7b      	ldr	r2, [pc, #492]	@ (800511c <HAL_SPI_Init+0x23c>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d00c      	beq.n	8004f4e <HAL_SPI_Init+0x6e>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a79      	ldr	r2, [pc, #484]	@ (8005120 <HAL_SPI_Init+0x240>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d007      	beq.n	8004f4e <HAL_SPI_Init+0x6e>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a78      	ldr	r2, [pc, #480]	@ (8005124 <HAL_SPI_Init+0x244>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d002      	beq.n	8004f4e <HAL_SPI_Init+0x6e>
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2b08      	cmp	r3, #8
 8004f4c:	d811      	bhi.n	8004f72 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004f52:	4a72      	ldr	r2, [pc, #456]	@ (800511c <HAL_SPI_Init+0x23c>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d009      	beq.n	8004f6c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a70      	ldr	r2, [pc, #448]	@ (8005120 <HAL_SPI_Init+0x240>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d004      	beq.n	8004f6c <HAL_SPI_Init+0x8c>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a6f      	ldr	r2, [pc, #444]	@ (8005124 <HAL_SPI_Init+0x244>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d104      	bne.n	8004f76 <HAL_SPI_Init+0x96>
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2b10      	cmp	r3, #16
 8004f70:	d901      	bls.n	8004f76 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e0cd      	b.n	8005112 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d106      	bne.n	8004f90 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f7fc fa42 	bl	8001414 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2202      	movs	r2, #2
 8004f94:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f022 0201 	bic.w	r2, r2, #1
 8004fa6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8004fb2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	699b      	ldr	r3, [r3, #24]
 8004fb8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004fbc:	d119      	bne.n	8004ff2 <HAL_SPI_Init+0x112>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004fc6:	d103      	bne.n	8004fd0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d008      	beq.n	8004fe2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d10c      	bne.n	8004ff2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004fdc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004fe0:	d107      	bne.n	8004ff2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004ff0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00f      	beq.n	800501e <HAL_SPI_Init+0x13e>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	2b06      	cmp	r3, #6
 8005004:	d90b      	bls.n	800501e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	430a      	orrs	r2, r1
 800501a:	601a      	str	r2, [r3, #0]
 800501c:	e007      	b.n	800502e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800502c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	69da      	ldr	r2, [r3, #28]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005036:	431a      	orrs	r2, r3
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	431a      	orrs	r2, r3
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005040:	ea42 0103 	orr.w	r1, r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	68da      	ldr	r2, [r3, #12]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	430a      	orrs	r2, r1
 800504e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005058:	431a      	orrs	r2, r3
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800505e:	431a      	orrs	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	699b      	ldr	r3, [r3, #24]
 8005064:	431a      	orrs	r2, r3
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	691b      	ldr	r3, [r3, #16]
 800506a:	431a      	orrs	r2, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	695b      	ldr	r3, [r3, #20]
 8005070:	431a      	orrs	r2, r3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a1b      	ldr	r3, [r3, #32]
 8005076:	431a      	orrs	r2, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	431a      	orrs	r2, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005082:	431a      	orrs	r2, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	431a      	orrs	r2, r3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800508e:	ea42 0103 	orr.w	r1, r2, r3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	430a      	orrs	r2, r1
 800509c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d113      	bne.n	80050ce <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80050b8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80050cc:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f022 0201 	bic.w	r2, r2, #1
 80050dc:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d00a      	beq.n	8005100 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	430a      	orrs	r2, r1
 80050fe:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3710      	adds	r7, #16
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop
 800511c:	40013000 	.word	0x40013000
 8005120:	40003800 	.word	0x40003800
 8005124:	40003c00 	.word	0x40003c00

08005128 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b088      	sub	sp, #32
 800512c:	af02      	add	r7, sp, #8
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	603b      	str	r3, [r7, #0]
 8005134:	4613      	mov	r3, r2
 8005136:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	3320      	adds	r3, #32
 800513e:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005140:	f7fc fc80 	bl	8001a44 <HAL_GetTick>
 8005144:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800514c:	b2db      	uxtb	r3, r3
 800514e:	2b01      	cmp	r3, #1
 8005150:	d001      	beq.n	8005156 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8005152:	2302      	movs	r3, #2
 8005154:	e1d1      	b.n	80054fa <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d002      	beq.n	8005162 <HAL_SPI_Transmit+0x3a>
 800515c:	88fb      	ldrh	r3, [r7, #6]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d101      	bne.n	8005166 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e1c9      	b.n	80054fa <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800516c:	2b01      	cmp	r3, #1
 800516e:	d101      	bne.n	8005174 <HAL_SPI_Transmit+0x4c>
 8005170:	2302      	movs	r3, #2
 8005172:	e1c2      	b.n	80054fa <HAL_SPI_Transmit+0x3d2>
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2203      	movs	r2, #3
 8005180:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2200      	movs	r2, #0
 8005188:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	68ba      	ldr	r2, [r7, #8]
 8005190:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	88fa      	ldrh	r2, [r7, #6]
 8005196:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	88fa      	ldrh	r2, [r7, #6]
 800519e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2200      	movs	r2, #0
 80051a6:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2200      	movs	r2, #0
 80051bc:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2200      	movs	r2, #0
 80051c2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80051cc:	d108      	bne.n	80051e0 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80051dc:	601a      	str	r2, [r3, #0]
 80051de:	e009      	b.n	80051f4 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80051f2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	685a      	ldr	r2, [r3, #4]
 80051fa:	4b96      	ldr	r3, [pc, #600]	@ (8005454 <HAL_SPI_Transmit+0x32c>)
 80051fc:	4013      	ands	r3, r2
 80051fe:	88f9      	ldrh	r1, [r7, #6]
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	6812      	ldr	r2, [r2, #0]
 8005204:	430b      	orrs	r3, r1
 8005206:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f042 0201 	orr.w	r2, r2, #1
 8005216:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005220:	d107      	bne.n	8005232 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005230:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	68db      	ldr	r3, [r3, #12]
 8005236:	2b0f      	cmp	r3, #15
 8005238:	d947      	bls.n	80052ca <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800523a:	e03f      	b.n	80052bc <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	695b      	ldr	r3, [r3, #20]
 8005242:	f003 0302 	and.w	r3, r3, #2
 8005246:	2b02      	cmp	r3, #2
 8005248:	d114      	bne.n	8005274 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	6812      	ldr	r2, [r2, #0]
 8005254:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800525a:	1d1a      	adds	r2, r3, #4
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005266:	b29b      	uxth	r3, r3
 8005268:	3b01      	subs	r3, #1
 800526a:	b29a      	uxth	r2, r3
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005272:	e023      	b.n	80052bc <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005274:	f7fc fbe6 	bl	8001a44 <HAL_GetTick>
 8005278:	4602      	mov	r2, r0
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	683a      	ldr	r2, [r7, #0]
 8005280:	429a      	cmp	r2, r3
 8005282:	d803      	bhi.n	800528c <HAL_SPI_Transmit+0x164>
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800528a:	d102      	bne.n	8005292 <HAL_SPI_Transmit+0x16a>
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d114      	bne.n	80052bc <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005292:	68f8      	ldr	r0, [r7, #12]
 8005294:	f000 fee2 	bl	800605c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800529e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2200      	movs	r2, #0
 80052b4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e11e      	b.n	80054fa <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d1b9      	bne.n	800523c <HAL_SPI_Transmit+0x114>
 80052c8:	e0f1      	b.n	80054ae <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	2b07      	cmp	r3, #7
 80052d0:	f240 80e6 	bls.w	80054a0 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80052d4:	e05d      	b.n	8005392 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	695b      	ldr	r3, [r3, #20]
 80052dc:	f003 0302 	and.w	r3, r3, #2
 80052e0:	2b02      	cmp	r3, #2
 80052e2:	d132      	bne.n	800534a <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d918      	bls.n	8005322 <HAL_SPI_Transmit+0x1fa>
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d014      	beq.n	8005322 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	6812      	ldr	r2, [r2, #0]
 8005302:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005308:	1d1a      	adds	r2, r3, #4
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005314:	b29b      	uxth	r3, r3
 8005316:	3b02      	subs	r3, #2
 8005318:	b29a      	uxth	r2, r3
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005320:	e037      	b.n	8005392 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005326:	881a      	ldrh	r2, [r3, #0]
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005330:	1c9a      	adds	r2, r3, #2
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800533c:	b29b      	uxth	r3, r3
 800533e:	3b01      	subs	r3, #1
 8005340:	b29a      	uxth	r2, r3
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005348:	e023      	b.n	8005392 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800534a:	f7fc fb7b 	bl	8001a44 <HAL_GetTick>
 800534e:	4602      	mov	r2, r0
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	683a      	ldr	r2, [r7, #0]
 8005356:	429a      	cmp	r2, r3
 8005358:	d803      	bhi.n	8005362 <HAL_SPI_Transmit+0x23a>
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005360:	d102      	bne.n	8005368 <HAL_SPI_Transmit+0x240>
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d114      	bne.n	8005392 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005368:	68f8      	ldr	r0, [r7, #12]
 800536a:	f000 fe77 	bl	800605c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005374:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2201      	movs	r2, #1
 8005382:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2200      	movs	r2, #0
 800538a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800538e:	2303      	movs	r3, #3
 8005390:	e0b3      	b.n	80054fa <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005398:	b29b      	uxth	r3, r3
 800539a:	2b00      	cmp	r3, #0
 800539c:	d19b      	bne.n	80052d6 <HAL_SPI_Transmit+0x1ae>
 800539e:	e086      	b.n	80054ae <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	695b      	ldr	r3, [r3, #20]
 80053a6:	f003 0302 	and.w	r3, r3, #2
 80053aa:	2b02      	cmp	r3, #2
 80053ac:	d154      	bne.n	8005458 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	2b03      	cmp	r3, #3
 80053b8:	d918      	bls.n	80053ec <HAL_SPI_Transmit+0x2c4>
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053be:	2b40      	cmp	r3, #64	@ 0x40
 80053c0:	d914      	bls.n	80053ec <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	6812      	ldr	r2, [r2, #0]
 80053cc:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053d2:	1d1a      	adds	r2, r3, #4
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80053de:	b29b      	uxth	r3, r3
 80053e0:	3b04      	subs	r3, #4
 80053e2:	b29a      	uxth	r2, r3
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80053ea:	e059      	b.n	80054a0 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d917      	bls.n	8005428 <HAL_SPI_Transmit+0x300>
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d013      	beq.n	8005428 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005404:	881a      	ldrh	r2, [r3, #0]
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800540e:	1c9a      	adds	r2, r3, #2
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800541a:	b29b      	uxth	r3, r3
 800541c:	3b02      	subs	r3, #2
 800541e:	b29a      	uxth	r2, r3
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005426:	e03b      	b.n	80054a0 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	3320      	adds	r3, #32
 8005432:	7812      	ldrb	r2, [r2, #0]
 8005434:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800543a:	1c5a      	adds	r2, r3, #1
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005446:	b29b      	uxth	r3, r3
 8005448:	3b01      	subs	r3, #1
 800544a:	b29a      	uxth	r2, r3
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005452:	e025      	b.n	80054a0 <HAL_SPI_Transmit+0x378>
 8005454:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005458:	f7fc faf4 	bl	8001a44 <HAL_GetTick>
 800545c:	4602      	mov	r2, r0
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	683a      	ldr	r2, [r7, #0]
 8005464:	429a      	cmp	r2, r3
 8005466:	d803      	bhi.n	8005470 <HAL_SPI_Transmit+0x348>
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800546e:	d102      	bne.n	8005476 <HAL_SPI_Transmit+0x34e>
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d114      	bne.n	80054a0 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005476:	68f8      	ldr	r0, [r7, #12]
 8005478:	f000 fdf0 	bl	800605c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005482:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2200      	movs	r2, #0
 8005498:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800549c:	2303      	movs	r3, #3
 800549e:	e02c      	b.n	80054fa <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	f47f af79 	bne.w	80053a0 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	9300      	str	r3, [sp, #0]
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	2200      	movs	r2, #0
 80054b6:	2108      	movs	r1, #8
 80054b8:	68f8      	ldr	r0, [r7, #12]
 80054ba:	f000 fe6f 	bl	800619c <SPI_WaitOnFlagUntilTimeout>
 80054be:	4603      	mov	r3, r0
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d007      	beq.n	80054d4 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054ca:	f043 0220 	orr.w	r2, r3, #32
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80054d4:	68f8      	ldr	r0, [r7, #12]
 80054d6:	f000 fdc1 	bl	800605c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2201      	movs	r2, #1
 80054de:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d001      	beq.n	80054f8 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e000      	b.n	80054fa <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 80054f8:	2300      	movs	r3, #0
  }
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3718      	adds	r7, #24
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
 8005502:	bf00      	nop

08005504 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b088      	sub	sp, #32
 8005508:	af00      	add	r7, sp, #0
 800550a:	60f8      	str	r0, [r7, #12]
 800550c:	60b9      	str	r1, [r7, #8]
 800550e:	603b      	str	r3, [r7, #0]
 8005510:	4613      	mov	r3, r2
 8005512:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005518:	095b      	lsrs	r3, r3, #5
 800551a:	b29b      	uxth	r3, r3
 800551c:	3301      	adds	r3, #1
 800551e:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	3330      	adds	r3, #48	@ 0x30
 8005526:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005528:	f7fc fa8c 	bl	8001a44 <HAL_GetTick>
 800552c:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005534:	b2db      	uxtb	r3, r3
 8005536:	2b01      	cmp	r3, #1
 8005538:	d001      	beq.n	800553e <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800553a:	2302      	movs	r3, #2
 800553c:	e250      	b.n	80059e0 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d002      	beq.n	800554a <HAL_SPI_Receive+0x46>
 8005544:	88fb      	ldrh	r3, [r7, #6]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d101      	bne.n	800554e <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e248      	b.n	80059e0 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8005554:	2b01      	cmp	r3, #1
 8005556:	d101      	bne.n	800555c <HAL_SPI_Receive+0x58>
 8005558:	2302      	movs	r3, #2
 800555a:	e241      	b.n	80059e0 <HAL_SPI_Receive+0x4dc>
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2204      	movs	r2, #4
 8005568:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2200      	movs	r2, #0
 8005570:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	68ba      	ldr	r2, [r7, #8]
 8005578:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	88fa      	ldrh	r2, [r7, #6]
 800557e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	88fa      	ldrh	r2, [r7, #6]
 8005586:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2200      	movs	r2, #0
 800558e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2200      	movs	r2, #0
 8005594:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2200      	movs	r2, #0
 800559c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2200      	movs	r2, #0
 80055a4:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2200      	movs	r2, #0
 80055aa:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80055b4:	d108      	bne.n	80055c8 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80055c4:	601a      	str	r2, [r3, #0]
 80055c6:	e009      	b.n	80055dc <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80055da:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	685a      	ldr	r2, [r3, #4]
 80055e2:	4b95      	ldr	r3, [pc, #596]	@ (8005838 <HAL_SPI_Receive+0x334>)
 80055e4:	4013      	ands	r3, r2
 80055e6:	88f9      	ldrh	r1, [r7, #6]
 80055e8:	68fa      	ldr	r2, [r7, #12]
 80055ea:	6812      	ldr	r2, [r2, #0]
 80055ec:	430b      	orrs	r3, r1
 80055ee:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f042 0201 	orr.w	r2, r2, #1
 80055fe:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005608:	d107      	bne.n	800561a <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005618:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	68db      	ldr	r3, [r3, #12]
 800561e:	2b0f      	cmp	r3, #15
 8005620:	d96c      	bls.n	80056fc <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8005622:	e064      	b.n	80056ee <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	695b      	ldr	r3, [r3, #20]
 800562a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	695b      	ldr	r3, [r3, #20]
 8005632:	f003 0301 	and.w	r3, r3, #1
 8005636:	2b01      	cmp	r3, #1
 8005638:	d114      	bne.n	8005664 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005642:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005644:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800564a:	1d1a      	adds	r2, r3, #4
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005656:	b29b      	uxth	r3, r3
 8005658:	3b01      	subs	r3, #1
 800565a:	b29a      	uxth	r2, r3
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005662:	e044      	b.n	80056ee <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800566a:	b29b      	uxth	r3, r3
 800566c:	8bfa      	ldrh	r2, [r7, #30]
 800566e:	429a      	cmp	r2, r3
 8005670:	d919      	bls.n	80056a6 <HAL_SPI_Receive+0x1a2>
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005678:	2b00      	cmp	r3, #0
 800567a:	d014      	beq.n	80056a6 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005684:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005686:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800568c:	1d1a      	adds	r2, r3, #4
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005698:	b29b      	uxth	r3, r3
 800569a:	3b01      	subs	r3, #1
 800569c:	b29a      	uxth	r2, r3
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80056a4:	e023      	b.n	80056ee <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056a6:	f7fc f9cd 	bl	8001a44 <HAL_GetTick>
 80056aa:	4602      	mov	r2, r0
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	1ad3      	subs	r3, r2, r3
 80056b0:	683a      	ldr	r2, [r7, #0]
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d803      	bhi.n	80056be <HAL_SPI_Receive+0x1ba>
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056bc:	d102      	bne.n	80056c4 <HAL_SPI_Receive+0x1c0>
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d114      	bne.n	80056ee <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80056c4:	68f8      	ldr	r0, [r7, #12]
 80056c6:	f000 fcc9 	bl	800605c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056d0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2201      	movs	r2, #1
 80056de:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80056ea:	2303      	movs	r3, #3
 80056ec:	e178      	b.n	80059e0 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d194      	bne.n	8005624 <HAL_SPI_Receive+0x120>
 80056fa:	e15e      	b.n	80059ba <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	2b07      	cmp	r3, #7
 8005702:	f240 8153 	bls.w	80059ac <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8005706:	e08f      	b.n	8005828 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	695b      	ldr	r3, [r3, #20]
 800570e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	695b      	ldr	r3, [r3, #20]
 8005716:	f003 0301 	and.w	r3, r3, #1
 800571a:	2b01      	cmp	r3, #1
 800571c:	d114      	bne.n	8005748 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005722:	69ba      	ldr	r2, [r7, #24]
 8005724:	8812      	ldrh	r2, [r2, #0]
 8005726:	b292      	uxth	r2, r2
 8005728:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800572e:	1c9a      	adds	r2, r3, #2
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800573a:	b29b      	uxth	r3, r3
 800573c:	3b01      	subs	r3, #1
 800573e:	b29a      	uxth	r2, r3
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005746:	e06f      	b.n	8005828 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800574e:	b29b      	uxth	r3, r3
 8005750:	8bfa      	ldrh	r2, [r7, #30]
 8005752:	429a      	cmp	r2, r3
 8005754:	d924      	bls.n	80057a0 <HAL_SPI_Receive+0x29c>
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800575c:	2b00      	cmp	r3, #0
 800575e:	d01f      	beq.n	80057a0 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005764:	69ba      	ldr	r2, [r7, #24]
 8005766:	8812      	ldrh	r2, [r2, #0]
 8005768:	b292      	uxth	r2, r2
 800576a:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005770:	1c9a      	adds	r2, r3, #2
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800577a:	69ba      	ldr	r2, [r7, #24]
 800577c:	8812      	ldrh	r2, [r2, #0]
 800577e:	b292      	uxth	r2, r2
 8005780:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005786:	1c9a      	adds	r2, r3, #2
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005792:	b29b      	uxth	r3, r3
 8005794:	3b02      	subs	r3, #2
 8005796:	b29a      	uxth	r2, r3
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800579e:	e043      	b.n	8005828 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d119      	bne.n	80057e0 <HAL_SPI_Receive+0x2dc>
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d014      	beq.n	80057e0 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057ba:	69ba      	ldr	r2, [r7, #24]
 80057bc:	8812      	ldrh	r2, [r2, #0]
 80057be:	b292      	uxth	r2, r2
 80057c0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057c6:	1c9a      	adds	r2, r3, #2
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	3b01      	subs	r3, #1
 80057d6:	b29a      	uxth	r2, r3
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80057de:	e023      	b.n	8005828 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057e0:	f7fc f930 	bl	8001a44 <HAL_GetTick>
 80057e4:	4602      	mov	r2, r0
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	1ad3      	subs	r3, r2, r3
 80057ea:	683a      	ldr	r2, [r7, #0]
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d803      	bhi.n	80057f8 <HAL_SPI_Receive+0x2f4>
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057f6:	d102      	bne.n	80057fe <HAL_SPI_Receive+0x2fa>
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d114      	bne.n	8005828 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80057fe:	68f8      	ldr	r0, [r7, #12]
 8005800:	f000 fc2c 	bl	800605c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800580a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2200      	movs	r2, #0
 8005820:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005824:	2303      	movs	r3, #3
 8005826:	e0db      	b.n	80059e0 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800582e:	b29b      	uxth	r3, r3
 8005830:	2b00      	cmp	r3, #0
 8005832:	f47f af69 	bne.w	8005708 <HAL_SPI_Receive+0x204>
 8005836:	e0c0      	b.n	80059ba <HAL_SPI_Receive+0x4b6>
 8005838:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	695b      	ldr	r3, [r3, #20]
 8005842:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	695b      	ldr	r3, [r3, #20]
 800584a:	f003 0301 	and.w	r3, r3, #1
 800584e:	2b01      	cmp	r3, #1
 8005850:	d117      	bne.n	8005882 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800585e:	7812      	ldrb	r2, [r2, #0]
 8005860:	b2d2      	uxtb	r2, r2
 8005862:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005868:	1c5a      	adds	r2, r3, #1
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005874:	b29b      	uxth	r3, r3
 8005876:	3b01      	subs	r3, #1
 8005878:	b29a      	uxth	r2, r3
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005880:	e094      	b.n	80059ac <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005888:	b29b      	uxth	r3, r3
 800588a:	8bfa      	ldrh	r2, [r7, #30]
 800588c:	429a      	cmp	r2, r3
 800588e:	d946      	bls.n	800591e <HAL_SPI_Receive+0x41a>
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005896:	2b00      	cmp	r3, #0
 8005898:	d041      	beq.n	800591e <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80058a6:	7812      	ldrb	r2, [r2, #0]
 80058a8:	b2d2      	uxtb	r2, r2
 80058aa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80058b0:	1c5a      	adds	r2, r3, #1
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80058c2:	7812      	ldrb	r2, [r2, #0]
 80058c4:	b2d2      	uxtb	r2, r2
 80058c6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80058cc:	1c5a      	adds	r2, r3, #1
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80058de:	7812      	ldrb	r2, [r2, #0]
 80058e0:	b2d2      	uxtb	r2, r2
 80058e2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80058e8:	1c5a      	adds	r2, r3, #1
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80058fa:	7812      	ldrb	r2, [r2, #0]
 80058fc:	b2d2      	uxtb	r2, r2
 80058fe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005904:	1c5a      	adds	r2, r3, #1
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005910:	b29b      	uxth	r3, r3
 8005912:	3b04      	subs	r3, #4
 8005914:	b29a      	uxth	r2, r3
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800591c:	e046      	b.n	80059ac <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005924:	b29b      	uxth	r3, r3
 8005926:	2b03      	cmp	r3, #3
 8005928:	d81c      	bhi.n	8005964 <HAL_SPI_Receive+0x460>
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8005930:	2b00      	cmp	r3, #0
 8005932:	d017      	beq.n	8005964 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005940:	7812      	ldrb	r2, [r2, #0]
 8005942:	b2d2      	uxtb	r2, r2
 8005944:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800594a:	1c5a      	adds	r2, r3, #1
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005956:	b29b      	uxth	r3, r3
 8005958:	3b01      	subs	r3, #1
 800595a:	b29a      	uxth	r2, r3
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005962:	e023      	b.n	80059ac <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005964:	f7fc f86e 	bl	8001a44 <HAL_GetTick>
 8005968:	4602      	mov	r2, r0
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	683a      	ldr	r2, [r7, #0]
 8005970:	429a      	cmp	r2, r3
 8005972:	d803      	bhi.n	800597c <HAL_SPI_Receive+0x478>
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800597a:	d102      	bne.n	8005982 <HAL_SPI_Receive+0x47e>
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d114      	bne.n	80059ac <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005982:	68f8      	ldr	r0, [r7, #12]
 8005984:	f000 fb6a 	bl	800605c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800598e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2200      	movs	r2, #0
 80059a4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80059a8:	2303      	movs	r3, #3
 80059aa:	e019      	b.n	80059e0 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	f47f af41 	bne.w	800583c <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80059ba:	68f8      	ldr	r0, [r7, #12]
 80059bc:	f000 fb4e 	bl	800605c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d001      	beq.n	80059de <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	e000      	b.n	80059e0 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 80059de:	2300      	movs	r3, #0
  }
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3720      	adds	r7, #32
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b08e      	sub	sp, #56	@ 0x38
 80059ec:	af02      	add	r7, sp, #8
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	60b9      	str	r1, [r7, #8]
 80059f2:	607a      	str	r2, [r7, #4]
 80059f4:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	3320      	adds	r3, #32
 80059fc:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	3330      	adds	r3, #48	@ 0x30
 8005a04:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a0a:	095b      	lsrs	r3, r3, #5
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	3301      	adds	r3, #1
 8005a10:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a12:	f7fc f817 	bl	8001a44 <HAL_GetTick>
 8005a16:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 8005a18:	887b      	ldrh	r3, [r7, #2]
 8005a1a:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 8005a1c:	887b      	ldrh	r3, [r7, #2]
 8005a1e:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005a26:	b2db      	uxtb	r3, r3
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d001      	beq.n	8005a30 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 8005a2c:	2302      	movs	r3, #2
 8005a2e:	e310      	b.n	8006052 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d005      	beq.n	8005a42 <HAL_SPI_TransmitReceive+0x5a>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d002      	beq.n	8005a42 <HAL_SPI_TransmitReceive+0x5a>
 8005a3c:	887b      	ldrh	r3, [r7, #2]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d101      	bne.n	8005a46 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e305      	b.n	8006052 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d101      	bne.n	8005a54 <HAL_SPI_TransmitReceive+0x6c>
 8005a50:	2302      	movs	r3, #2
 8005a52:	e2fe      	b.n	8006052 <HAL_SPI_TransmitReceive+0x66a>
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2205      	movs	r2, #5
 8005a60:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	887a      	ldrh	r2, [r7, #2]
 8005a76:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	887a      	ldrh	r2, [r7, #2]
 8005a7e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	68ba      	ldr	r2, [r7, #8]
 8005a86:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	887a      	ldrh	r2, [r7, #2]
 8005a8c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	887a      	ldrh	r2, [r7, #2]
 8005a94:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	68da      	ldr	r2, [r3, #12]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8005ab2:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a70      	ldr	r2, [pc, #448]	@ (8005c7c <HAL_SPI_TransmitReceive+0x294>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d009      	beq.n	8005ad2 <HAL_SPI_TransmitReceive+0xea>
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a6f      	ldr	r2, [pc, #444]	@ (8005c80 <HAL_SPI_TransmitReceive+0x298>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d004      	beq.n	8005ad2 <HAL_SPI_TransmitReceive+0xea>
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a6d      	ldr	r2, [pc, #436]	@ (8005c84 <HAL_SPI_TransmitReceive+0x29c>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d102      	bne.n	8005ad8 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8005ad2:	2310      	movs	r3, #16
 8005ad4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ad6:	e001      	b.n	8005adc <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8005ad8:	2308      	movs	r3, #8
 8005ada:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	685a      	ldr	r2, [r3, #4]
 8005ae2:	4b69      	ldr	r3, [pc, #420]	@ (8005c88 <HAL_SPI_TransmitReceive+0x2a0>)
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	8879      	ldrh	r1, [r7, #2]
 8005ae8:	68fa      	ldr	r2, [r7, #12]
 8005aea:	6812      	ldr	r2, [r2, #0]
 8005aec:	430b      	orrs	r3, r1
 8005aee:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f042 0201 	orr.w	r2, r2, #1
 8005afe:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005b08:	d107      	bne.n	8005b1a <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b18:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	2b0f      	cmp	r3, #15
 8005b20:	f240 80a2 	bls.w	8005c68 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8005b24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b26:	089b      	lsrs	r3, r3, #2
 8005b28:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005b2a:	e094      	b.n	8005c56 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	695b      	ldr	r3, [r3, #20]
 8005b32:	f003 0302 	and.w	r3, r3, #2
 8005b36:	2b02      	cmp	r3, #2
 8005b38:	d120      	bne.n	8005b7c <HAL_SPI_TransmitReceive+0x194>
 8005b3a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d01d      	beq.n	8005b7c <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8005b40:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005b42:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8005b44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b46:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d217      	bcs.n	8005b7c <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	6812      	ldr	r2, [r2, #0]
 8005b56:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b5c:	1d1a      	adds	r2, r3, #4
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	3b01      	subs	r3, #1
 8005b6c:	b29a      	uxth	r2, r3
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005b7a:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	695b      	ldr	r3, [r3, #20]
 8005b82:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8005b84:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d065      	beq.n	8005c56 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	695b      	ldr	r3, [r3, #20]
 8005b90:	f003 0301 	and.w	r3, r3, #1
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d118      	bne.n	8005bca <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ba0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005ba2:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ba8:	1d1a      	adds	r2, r3, #4
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	3b01      	subs	r3, #1
 8005bb8:	b29a      	uxth	r2, r3
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005bc6:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005bc8:	e045      	b.n	8005c56 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8005bca:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005bcc:	8bfb      	ldrh	r3, [r7, #30]
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d21d      	bcs.n	8005c0e <HAL_SPI_TransmitReceive+0x226>
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d018      	beq.n	8005c0e <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005be4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005be6:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005bec:	1d1a      	adds	r2, r3, #4
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	3b01      	subs	r3, #1
 8005bfc:	b29a      	uxth	r2, r3
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005c0a:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005c0c:	e023      	b.n	8005c56 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c0e:	f7fb ff19 	bl	8001a44 <HAL_GetTick>
 8005c12:	4602      	mov	r2, r0
 8005c14:	69bb      	ldr	r3, [r7, #24]
 8005c16:	1ad3      	subs	r3, r2, r3
 8005c18:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d803      	bhi.n	8005c26 <HAL_SPI_TransmitReceive+0x23e>
 8005c1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c24:	d102      	bne.n	8005c2c <HAL_SPI_TransmitReceive+0x244>
 8005c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d114      	bne.n	8005c56 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8005c2c:	68f8      	ldr	r0, [r7, #12]
 8005c2e:	f000 fa15 	bl	800605c <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c38:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2201      	movs	r2, #1
 8005c46:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8005c52:	2303      	movs	r3, #3
 8005c54:	e1fd      	b.n	8006052 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005c56:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	f47f af67 	bne.w	8005b2c <HAL_SPI_TransmitReceive+0x144>
 8005c5e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	f47f af63 	bne.w	8005b2c <HAL_SPI_TransmitReceive+0x144>
 8005c66:	e1ce      	b.n	8006006 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	2b07      	cmp	r3, #7
 8005c6e:	f240 81c2 	bls.w	8005ff6 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 8005c72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c74:	085b      	lsrs	r3, r3, #1
 8005c76:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005c78:	e0c9      	b.n	8005e0e <HAL_SPI_TransmitReceive+0x426>
 8005c7a:	bf00      	nop
 8005c7c:	40013000 	.word	0x40013000
 8005c80:	40003800 	.word	0x40003800
 8005c84:	40003c00 	.word	0x40003c00
 8005c88:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	695b      	ldr	r3, [r3, #20]
 8005c92:	f003 0302 	and.w	r3, r3, #2
 8005c96:	2b02      	cmp	r3, #2
 8005c98:	d11f      	bne.n	8005cda <HAL_SPI_TransmitReceive+0x2f2>
 8005c9a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d01c      	beq.n	8005cda <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8005ca0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005ca2:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8005ca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ca6:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d216      	bcs.n	8005cda <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cb0:	881a      	ldrh	r2, [r3, #0]
 8005cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb4:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cba:	1c9a      	adds	r2, r3, #2
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	3b01      	subs	r3, #1
 8005cca:	b29a      	uxth	r2, r3
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005cd8:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	695b      	ldr	r3, [r3, #20]
 8005ce0:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8005ce2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	f000 8092 	beq.w	8005e0e <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	695b      	ldr	r3, [r3, #20]
 8005cf0:	f003 0301 	and.w	r3, r3, #1
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d118      	bne.n	8005d2a <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005cfc:	6a3a      	ldr	r2, [r7, #32]
 8005cfe:	8812      	ldrh	r2, [r2, #0]
 8005d00:	b292      	uxth	r2, r2
 8005d02:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d08:	1c9a      	adds	r2, r3, #2
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	3b01      	subs	r3, #1
 8005d18:	b29a      	uxth	r2, r3
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005d26:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005d28:	e071      	b.n	8005e0e <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8005d2a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005d2c:	8bfb      	ldrh	r3, [r7, #30]
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d228      	bcs.n	8005d84 <HAL_SPI_TransmitReceive+0x39c>
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d023      	beq.n	8005d84 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d40:	6a3a      	ldr	r2, [r7, #32]
 8005d42:	8812      	ldrh	r2, [r2, #0]
 8005d44:	b292      	uxth	r2, r2
 8005d46:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d4c:	1c9a      	adds	r2, r3, #2
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d56:	6a3a      	ldr	r2, [r7, #32]
 8005d58:	8812      	ldrh	r2, [r2, #0]
 8005d5a:	b292      	uxth	r2, r2
 8005d5c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d62:	1c9a      	adds	r2, r3, #2
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	3b02      	subs	r3, #2
 8005d72:	b29a      	uxth	r2, r3
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005d80:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005d82:	e044      	b.n	8005e0e <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8005d84:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d11d      	bne.n	8005dc6 <HAL_SPI_TransmitReceive+0x3de>
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d018      	beq.n	8005dc6 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d98:	6a3a      	ldr	r2, [r7, #32]
 8005d9a:	8812      	ldrh	r2, [r2, #0]
 8005d9c:	b292      	uxth	r2, r2
 8005d9e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005da4:	1c9a      	adds	r2, r3, #2
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	3b01      	subs	r3, #1
 8005db4:	b29a      	uxth	r2, r3
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005dc2:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005dc4:	e023      	b.n	8005e0e <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005dc6:	f7fb fe3d 	bl	8001a44 <HAL_GetTick>
 8005dca:	4602      	mov	r2, r0
 8005dcc:	69bb      	ldr	r3, [r7, #24]
 8005dce:	1ad3      	subs	r3, r2, r3
 8005dd0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d803      	bhi.n	8005dde <HAL_SPI_TransmitReceive+0x3f6>
 8005dd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ddc:	d102      	bne.n	8005de4 <HAL_SPI_TransmitReceive+0x3fc>
 8005dde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d114      	bne.n	8005e0e <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8005de4:	68f8      	ldr	r0, [r7, #12]
 8005de6:	f000 f939 	bl	800605c <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005df0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2200      	movs	r2, #0
 8005e06:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8005e0a:	2303      	movs	r3, #3
 8005e0c:	e121      	b.n	8006052 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005e0e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	f47f af3b 	bne.w	8005c8c <HAL_SPI_TransmitReceive+0x2a4>
 8005e16:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	f47f af37 	bne.w	8005c8c <HAL_SPI_TransmitReceive+0x2a4>
 8005e1e:	e0f2      	b.n	8006006 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	695b      	ldr	r3, [r3, #20]
 8005e26:	f003 0302 	and.w	r3, r3, #2
 8005e2a:	2b02      	cmp	r3, #2
 8005e2c:	d121      	bne.n	8005e72 <HAL_SPI_TransmitReceive+0x48a>
 8005e2e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d01e      	beq.n	8005e72 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8005e34:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005e36:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8005e38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e3a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d218      	bcs.n	8005e72 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	3320      	adds	r3, #32
 8005e4a:	7812      	ldrb	r2, [r2, #0]
 8005e4c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e52:	1c5a      	adds	r2, r3, #1
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	3b01      	subs	r3, #1
 8005e62:	b29a      	uxth	r2, r3
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005e70:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	695b      	ldr	r3, [r3, #20]
 8005e78:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8005e7a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	f000 80ba 	beq.w	8005ff6 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	695b      	ldr	r3, [r3, #20]
 8005e88:	f003 0301 	and.w	r3, r3, #1
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d11b      	bne.n	8005ec8 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e9c:	7812      	ldrb	r2, [r2, #0]
 8005e9e:	b2d2      	uxtb	r2, r2
 8005ea0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ea6:	1c5a      	adds	r2, r3, #1
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	3b01      	subs	r3, #1
 8005eb6:	b29a      	uxth	r2, r3
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005ec4:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005ec6:	e096      	b.n	8005ff6 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8005ec8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005eca:	8bfb      	ldrh	r3, [r7, #30]
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d24a      	bcs.n	8005f66 <HAL_SPI_TransmitReceive+0x57e>
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d045      	beq.n	8005f66 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ee6:	7812      	ldrb	r2, [r2, #0]
 8005ee8:	b2d2      	uxtb	r2, r2
 8005eea:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ef0:	1c5a      	adds	r2, r3, #1
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f02:	7812      	ldrb	r2, [r2, #0]
 8005f04:	b2d2      	uxtb	r2, r2
 8005f06:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f0c:	1c5a      	adds	r2, r3, #1
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f1e:	7812      	ldrb	r2, [r2, #0]
 8005f20:	b2d2      	uxtb	r2, r2
 8005f22:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f28:	1c5a      	adds	r2, r3, #1
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f3a:	7812      	ldrb	r2, [r2, #0]
 8005f3c:	b2d2      	uxtb	r2, r2
 8005f3e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f44:	1c5a      	adds	r2, r3, #1
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	3b04      	subs	r3, #4
 8005f54:	b29a      	uxth	r2, r3
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005f62:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005f64:	e047      	b.n	8005ff6 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8005f66:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005f68:	2b03      	cmp	r3, #3
 8005f6a:	d820      	bhi.n	8005fae <HAL_SPI_TransmitReceive+0x5c6>
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d01b      	beq.n	8005fae <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f82:	7812      	ldrb	r2, [r2, #0]
 8005f84:	b2d2      	uxtb	r2, r2
 8005f86:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f8c:	1c5a      	adds	r2, r3, #1
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	3b01      	subs	r3, #1
 8005f9c:	b29a      	uxth	r2, r3
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005faa:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005fac:	e023      	b.n	8005ff6 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005fae:	f7fb fd49 	bl	8001a44 <HAL_GetTick>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	69bb      	ldr	r3, [r7, #24]
 8005fb6:	1ad3      	subs	r3, r2, r3
 8005fb8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d803      	bhi.n	8005fc6 <HAL_SPI_TransmitReceive+0x5de>
 8005fbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fc4:	d102      	bne.n	8005fcc <HAL_SPI_TransmitReceive+0x5e4>
 8005fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d114      	bne.n	8005ff6 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8005fcc:	68f8      	ldr	r0, [r7, #12]
 8005fce:	f000 f845 	bl	800605c <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005fd8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8005ff2:	2303      	movs	r3, #3
 8005ff4:	e02d      	b.n	8006052 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005ff6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	f47f af11 	bne.w	8005e20 <HAL_SPI_TransmitReceive+0x438>
 8005ffe:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006000:	2b00      	cmp	r3, #0
 8006002:	f47f af0d 	bne.w	8005e20 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8006006:	69bb      	ldr	r3, [r7, #24]
 8006008:	9300      	str	r3, [sp, #0]
 800600a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800600c:	2200      	movs	r2, #0
 800600e:	2108      	movs	r1, #8
 8006010:	68f8      	ldr	r0, [r7, #12]
 8006012:	f000 f8c3 	bl	800619c <SPI_WaitOnFlagUntilTimeout>
 8006016:	4603      	mov	r3, r0
 8006018:	2b00      	cmp	r3, #0
 800601a:	d007      	beq.n	800602c <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006022:	f043 0220 	orr.w	r2, r3, #32
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800602c:	68f8      	ldr	r0, [r7, #12]
 800602e:	f000 f815 	bl	800605c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2201      	movs	r2, #1
 8006036:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2200      	movs	r2, #0
 800603e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006048:	2b00      	cmp	r3, #0
 800604a:	d001      	beq.n	8006050 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	e000      	b.n	8006052 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 8006050:	2300      	movs	r3, #0
  }
}
 8006052:	4618      	mov	r0, r3
 8006054:	3730      	adds	r7, #48	@ 0x30
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
 800605a:	bf00      	nop

0800605c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800605c:	b480      	push	{r7}
 800605e:	b085      	sub	sp, #20
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	695b      	ldr	r3, [r3, #20]
 800606a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	699a      	ldr	r2, [r3, #24]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f042 0208 	orr.w	r2, r2, #8
 800607a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	699a      	ldr	r2, [r3, #24]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f042 0210 	orr.w	r2, r2, #16
 800608a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f022 0201 	bic.w	r2, r2, #1
 800609a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	6919      	ldr	r1, [r3, #16]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	4b3c      	ldr	r3, [pc, #240]	@ (8006198 <SPI_CloseTransfer+0x13c>)
 80060a8:	400b      	ands	r3, r1
 80060aa:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	689a      	ldr	r2, [r3, #8]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80060ba:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	2b04      	cmp	r3, #4
 80060c6:	d014      	beq.n	80060f2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f003 0320 	and.w	r3, r3, #32
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d00f      	beq.n	80060f2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80060d8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	699a      	ldr	r2, [r3, #24]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f042 0220 	orr.w	r2, r2, #32
 80060f0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	2b03      	cmp	r3, #3
 80060fc:	d014      	beq.n	8006128 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006104:	2b00      	cmp	r3, #0
 8006106:	d00f      	beq.n	8006128 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800610e:	f043 0204 	orr.w	r2, r3, #4
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	699a      	ldr	r2, [r3, #24]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006126:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800612e:	2b00      	cmp	r3, #0
 8006130:	d00f      	beq.n	8006152 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006138:	f043 0201 	orr.w	r2, r3, #1
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	699a      	ldr	r2, [r3, #24]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006150:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006158:	2b00      	cmp	r3, #0
 800615a:	d00f      	beq.n	800617c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006162:	f043 0208 	orr.w	r2, r3, #8
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	699a      	ldr	r2, [r3, #24]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800617a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800618c:	bf00      	nop
 800618e:	3714      	adds	r7, #20
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr
 8006198:	fffffc90 	.word	0xfffffc90

0800619c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	603b      	str	r3, [r7, #0]
 80061a8:	4613      	mov	r3, r2
 80061aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80061ac:	e010      	b.n	80061d0 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061ae:	f7fb fc49 	bl	8001a44 <HAL_GetTick>
 80061b2:	4602      	mov	r2, r0
 80061b4:	69bb      	ldr	r3, [r7, #24]
 80061b6:	1ad3      	subs	r3, r2, r3
 80061b8:	683a      	ldr	r2, [r7, #0]
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d803      	bhi.n	80061c6 <SPI_WaitOnFlagUntilTimeout+0x2a>
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061c4:	d102      	bne.n	80061cc <SPI_WaitOnFlagUntilTimeout+0x30>
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d101      	bne.n	80061d0 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80061cc:	2303      	movs	r3, #3
 80061ce:	e00f      	b.n	80061f0 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	695a      	ldr	r2, [r3, #20]
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	4013      	ands	r3, r2
 80061da:	68ba      	ldr	r2, [r7, #8]
 80061dc:	429a      	cmp	r2, r3
 80061de:	bf0c      	ite	eq
 80061e0:	2301      	moveq	r3, #1
 80061e2:	2300      	movne	r3, #0
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	461a      	mov	r2, r3
 80061e8:	79fb      	ldrb	r3, [r7, #7]
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d0df      	beq.n	80061ae <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80061ee:	2300      	movs	r3, #0
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3710      	adds	r7, #16
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b085      	sub	sp, #20
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006204:	095b      	lsrs	r3, r3, #5
 8006206:	3301      	adds	r3, #1
 8006208:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	3301      	adds	r3, #1
 8006210:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	3307      	adds	r3, #7
 8006216:	08db      	lsrs	r3, r3, #3
 8006218:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	68fa      	ldr	r2, [r7, #12]
 800621e:	fb02 f303 	mul.w	r3, r2, r3
}
 8006222:	4618      	mov	r0, r3
 8006224:	3714      	adds	r7, #20
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr

0800622e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800622e:	b580      	push	{r7, lr}
 8006230:	b082      	sub	sp, #8
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d101      	bne.n	8006240 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800623c:	2301      	movs	r3, #1
 800623e:	e042      	b.n	80062c6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006246:	2b00      	cmp	r3, #0
 8006248:	d106      	bne.n	8006258 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 f83b 	bl	80062ce <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2224      	movs	r2, #36	@ 0x24
 800625c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f022 0201 	bic.w	r2, r2, #1
 800626e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006274:	2b00      	cmp	r3, #0
 8006276:	d002      	beq.n	800627e <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f000 fd9b 	bl	8006db4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 f830 	bl	80062e4 <UART_SetConfig>
 8006284:	4603      	mov	r3, r0
 8006286:	2b01      	cmp	r3, #1
 8006288:	d101      	bne.n	800628e <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	e01b      	b.n	80062c6 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	685a      	ldr	r2, [r3, #4]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800629c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	689a      	ldr	r2, [r3, #8]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80062ac:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f042 0201 	orr.w	r2, r2, #1
 80062bc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f000 fe1a 	bl	8006ef8 <UART_CheckIdleState>
 80062c4:	4603      	mov	r3, r0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3708      	adds	r7, #8
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}

080062ce <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80062ce:	b480      	push	{r7}
 80062d0:	b083      	sub	sp, #12
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 80062d6:	bf00      	nop
 80062d8:	370c      	adds	r7, #12
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr
	...

080062e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062e8:	b092      	sub	sp, #72	@ 0x48
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80062ee:	2300      	movs	r3, #0
 80062f0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	689a      	ldr	r2, [r3, #8]
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	691b      	ldr	r3, [r3, #16]
 80062fc:	431a      	orrs	r2, r3
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	695b      	ldr	r3, [r3, #20]
 8006302:	431a      	orrs	r2, r3
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	69db      	ldr	r3, [r3, #28]
 8006308:	4313      	orrs	r3, r2
 800630a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	4bbe      	ldr	r3, [pc, #760]	@ (800660c <UART_SetConfig+0x328>)
 8006314:	4013      	ands	r3, r2
 8006316:	697a      	ldr	r2, [r7, #20]
 8006318:	6812      	ldr	r2, [r2, #0]
 800631a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800631c:	430b      	orrs	r3, r1
 800631e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	68da      	ldr	r2, [r3, #12]
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	430a      	orrs	r2, r1
 8006334:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	699b      	ldr	r3, [r3, #24]
 800633a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4ab3      	ldr	r2, [pc, #716]	@ (8006610 <UART_SetConfig+0x32c>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d004      	beq.n	8006350 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	6a1b      	ldr	r3, [r3, #32]
 800634a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800634c:	4313      	orrs	r3, r2
 800634e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	689a      	ldr	r2, [r3, #8]
 8006356:	4baf      	ldr	r3, [pc, #700]	@ (8006614 <UART_SetConfig+0x330>)
 8006358:	4013      	ands	r3, r2
 800635a:	697a      	ldr	r2, [r7, #20]
 800635c:	6812      	ldr	r2, [r2, #0]
 800635e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006360:	430b      	orrs	r3, r1
 8006362:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800636a:	f023 010f 	bic.w	r1, r3, #15
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	430a      	orrs	r2, r1
 8006378:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4aa6      	ldr	r2, [pc, #664]	@ (8006618 <UART_SetConfig+0x334>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d177      	bne.n	8006474 <UART_SetConfig+0x190>
 8006384:	4ba5      	ldr	r3, [pc, #660]	@ (800661c <UART_SetConfig+0x338>)
 8006386:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006388:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800638c:	2b28      	cmp	r3, #40	@ 0x28
 800638e:	d86d      	bhi.n	800646c <UART_SetConfig+0x188>
 8006390:	a201      	add	r2, pc, #4	@ (adr r2, 8006398 <UART_SetConfig+0xb4>)
 8006392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006396:	bf00      	nop
 8006398:	0800643d 	.word	0x0800643d
 800639c:	0800646d 	.word	0x0800646d
 80063a0:	0800646d 	.word	0x0800646d
 80063a4:	0800646d 	.word	0x0800646d
 80063a8:	0800646d 	.word	0x0800646d
 80063ac:	0800646d 	.word	0x0800646d
 80063b0:	0800646d 	.word	0x0800646d
 80063b4:	0800646d 	.word	0x0800646d
 80063b8:	08006445 	.word	0x08006445
 80063bc:	0800646d 	.word	0x0800646d
 80063c0:	0800646d 	.word	0x0800646d
 80063c4:	0800646d 	.word	0x0800646d
 80063c8:	0800646d 	.word	0x0800646d
 80063cc:	0800646d 	.word	0x0800646d
 80063d0:	0800646d 	.word	0x0800646d
 80063d4:	0800646d 	.word	0x0800646d
 80063d8:	0800644d 	.word	0x0800644d
 80063dc:	0800646d 	.word	0x0800646d
 80063e0:	0800646d 	.word	0x0800646d
 80063e4:	0800646d 	.word	0x0800646d
 80063e8:	0800646d 	.word	0x0800646d
 80063ec:	0800646d 	.word	0x0800646d
 80063f0:	0800646d 	.word	0x0800646d
 80063f4:	0800646d 	.word	0x0800646d
 80063f8:	08006455 	.word	0x08006455
 80063fc:	0800646d 	.word	0x0800646d
 8006400:	0800646d 	.word	0x0800646d
 8006404:	0800646d 	.word	0x0800646d
 8006408:	0800646d 	.word	0x0800646d
 800640c:	0800646d 	.word	0x0800646d
 8006410:	0800646d 	.word	0x0800646d
 8006414:	0800646d 	.word	0x0800646d
 8006418:	0800645d 	.word	0x0800645d
 800641c:	0800646d 	.word	0x0800646d
 8006420:	0800646d 	.word	0x0800646d
 8006424:	0800646d 	.word	0x0800646d
 8006428:	0800646d 	.word	0x0800646d
 800642c:	0800646d 	.word	0x0800646d
 8006430:	0800646d 	.word	0x0800646d
 8006434:	0800646d 	.word	0x0800646d
 8006438:	08006465 	.word	0x08006465
 800643c:	2301      	movs	r3, #1
 800643e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006442:	e222      	b.n	800688a <UART_SetConfig+0x5a6>
 8006444:	2304      	movs	r3, #4
 8006446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800644a:	e21e      	b.n	800688a <UART_SetConfig+0x5a6>
 800644c:	2308      	movs	r3, #8
 800644e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006452:	e21a      	b.n	800688a <UART_SetConfig+0x5a6>
 8006454:	2310      	movs	r3, #16
 8006456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800645a:	e216      	b.n	800688a <UART_SetConfig+0x5a6>
 800645c:	2320      	movs	r3, #32
 800645e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006462:	e212      	b.n	800688a <UART_SetConfig+0x5a6>
 8006464:	2340      	movs	r3, #64	@ 0x40
 8006466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800646a:	e20e      	b.n	800688a <UART_SetConfig+0x5a6>
 800646c:	2380      	movs	r3, #128	@ 0x80
 800646e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006472:	e20a      	b.n	800688a <UART_SetConfig+0x5a6>
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a69      	ldr	r2, [pc, #420]	@ (8006620 <UART_SetConfig+0x33c>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d130      	bne.n	80064e0 <UART_SetConfig+0x1fc>
 800647e:	4b67      	ldr	r3, [pc, #412]	@ (800661c <UART_SetConfig+0x338>)
 8006480:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006482:	f003 0307 	and.w	r3, r3, #7
 8006486:	2b05      	cmp	r3, #5
 8006488:	d826      	bhi.n	80064d8 <UART_SetConfig+0x1f4>
 800648a:	a201      	add	r2, pc, #4	@ (adr r2, 8006490 <UART_SetConfig+0x1ac>)
 800648c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006490:	080064a9 	.word	0x080064a9
 8006494:	080064b1 	.word	0x080064b1
 8006498:	080064b9 	.word	0x080064b9
 800649c:	080064c1 	.word	0x080064c1
 80064a0:	080064c9 	.word	0x080064c9
 80064a4:	080064d1 	.word	0x080064d1
 80064a8:	2300      	movs	r3, #0
 80064aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064ae:	e1ec      	b.n	800688a <UART_SetConfig+0x5a6>
 80064b0:	2304      	movs	r3, #4
 80064b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064b6:	e1e8      	b.n	800688a <UART_SetConfig+0x5a6>
 80064b8:	2308      	movs	r3, #8
 80064ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064be:	e1e4      	b.n	800688a <UART_SetConfig+0x5a6>
 80064c0:	2310      	movs	r3, #16
 80064c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064c6:	e1e0      	b.n	800688a <UART_SetConfig+0x5a6>
 80064c8:	2320      	movs	r3, #32
 80064ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064ce:	e1dc      	b.n	800688a <UART_SetConfig+0x5a6>
 80064d0:	2340      	movs	r3, #64	@ 0x40
 80064d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064d6:	e1d8      	b.n	800688a <UART_SetConfig+0x5a6>
 80064d8:	2380      	movs	r3, #128	@ 0x80
 80064da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064de:	e1d4      	b.n	800688a <UART_SetConfig+0x5a6>
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a4f      	ldr	r2, [pc, #316]	@ (8006624 <UART_SetConfig+0x340>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d130      	bne.n	800654c <UART_SetConfig+0x268>
 80064ea:	4b4c      	ldr	r3, [pc, #304]	@ (800661c <UART_SetConfig+0x338>)
 80064ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064ee:	f003 0307 	and.w	r3, r3, #7
 80064f2:	2b05      	cmp	r3, #5
 80064f4:	d826      	bhi.n	8006544 <UART_SetConfig+0x260>
 80064f6:	a201      	add	r2, pc, #4	@ (adr r2, 80064fc <UART_SetConfig+0x218>)
 80064f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064fc:	08006515 	.word	0x08006515
 8006500:	0800651d 	.word	0x0800651d
 8006504:	08006525 	.word	0x08006525
 8006508:	0800652d 	.word	0x0800652d
 800650c:	08006535 	.word	0x08006535
 8006510:	0800653d 	.word	0x0800653d
 8006514:	2300      	movs	r3, #0
 8006516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800651a:	e1b6      	b.n	800688a <UART_SetConfig+0x5a6>
 800651c:	2304      	movs	r3, #4
 800651e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006522:	e1b2      	b.n	800688a <UART_SetConfig+0x5a6>
 8006524:	2308      	movs	r3, #8
 8006526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800652a:	e1ae      	b.n	800688a <UART_SetConfig+0x5a6>
 800652c:	2310      	movs	r3, #16
 800652e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006532:	e1aa      	b.n	800688a <UART_SetConfig+0x5a6>
 8006534:	2320      	movs	r3, #32
 8006536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800653a:	e1a6      	b.n	800688a <UART_SetConfig+0x5a6>
 800653c:	2340      	movs	r3, #64	@ 0x40
 800653e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006542:	e1a2      	b.n	800688a <UART_SetConfig+0x5a6>
 8006544:	2380      	movs	r3, #128	@ 0x80
 8006546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800654a:	e19e      	b.n	800688a <UART_SetConfig+0x5a6>
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a35      	ldr	r2, [pc, #212]	@ (8006628 <UART_SetConfig+0x344>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d130      	bne.n	80065b8 <UART_SetConfig+0x2d4>
 8006556:	4b31      	ldr	r3, [pc, #196]	@ (800661c <UART_SetConfig+0x338>)
 8006558:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800655a:	f003 0307 	and.w	r3, r3, #7
 800655e:	2b05      	cmp	r3, #5
 8006560:	d826      	bhi.n	80065b0 <UART_SetConfig+0x2cc>
 8006562:	a201      	add	r2, pc, #4	@ (adr r2, 8006568 <UART_SetConfig+0x284>)
 8006564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006568:	08006581 	.word	0x08006581
 800656c:	08006589 	.word	0x08006589
 8006570:	08006591 	.word	0x08006591
 8006574:	08006599 	.word	0x08006599
 8006578:	080065a1 	.word	0x080065a1
 800657c:	080065a9 	.word	0x080065a9
 8006580:	2300      	movs	r3, #0
 8006582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006586:	e180      	b.n	800688a <UART_SetConfig+0x5a6>
 8006588:	2304      	movs	r3, #4
 800658a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800658e:	e17c      	b.n	800688a <UART_SetConfig+0x5a6>
 8006590:	2308      	movs	r3, #8
 8006592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006596:	e178      	b.n	800688a <UART_SetConfig+0x5a6>
 8006598:	2310      	movs	r3, #16
 800659a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800659e:	e174      	b.n	800688a <UART_SetConfig+0x5a6>
 80065a0:	2320      	movs	r3, #32
 80065a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065a6:	e170      	b.n	800688a <UART_SetConfig+0x5a6>
 80065a8:	2340      	movs	r3, #64	@ 0x40
 80065aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065ae:	e16c      	b.n	800688a <UART_SetConfig+0x5a6>
 80065b0:	2380      	movs	r3, #128	@ 0x80
 80065b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065b6:	e168      	b.n	800688a <UART_SetConfig+0x5a6>
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a1b      	ldr	r2, [pc, #108]	@ (800662c <UART_SetConfig+0x348>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d142      	bne.n	8006648 <UART_SetConfig+0x364>
 80065c2:	4b16      	ldr	r3, [pc, #88]	@ (800661c <UART_SetConfig+0x338>)
 80065c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065c6:	f003 0307 	and.w	r3, r3, #7
 80065ca:	2b05      	cmp	r3, #5
 80065cc:	d838      	bhi.n	8006640 <UART_SetConfig+0x35c>
 80065ce:	a201      	add	r2, pc, #4	@ (adr r2, 80065d4 <UART_SetConfig+0x2f0>)
 80065d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065d4:	080065ed 	.word	0x080065ed
 80065d8:	080065f5 	.word	0x080065f5
 80065dc:	080065fd 	.word	0x080065fd
 80065e0:	08006605 	.word	0x08006605
 80065e4:	08006631 	.word	0x08006631
 80065e8:	08006639 	.word	0x08006639
 80065ec:	2300      	movs	r3, #0
 80065ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065f2:	e14a      	b.n	800688a <UART_SetConfig+0x5a6>
 80065f4:	2304      	movs	r3, #4
 80065f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065fa:	e146      	b.n	800688a <UART_SetConfig+0x5a6>
 80065fc:	2308      	movs	r3, #8
 80065fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006602:	e142      	b.n	800688a <UART_SetConfig+0x5a6>
 8006604:	2310      	movs	r3, #16
 8006606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800660a:	e13e      	b.n	800688a <UART_SetConfig+0x5a6>
 800660c:	cfff69f3 	.word	0xcfff69f3
 8006610:	58000c00 	.word	0x58000c00
 8006614:	11fff4ff 	.word	0x11fff4ff
 8006618:	40011000 	.word	0x40011000
 800661c:	58024400 	.word	0x58024400
 8006620:	40004400 	.word	0x40004400
 8006624:	40004800 	.word	0x40004800
 8006628:	40004c00 	.word	0x40004c00
 800662c:	40005000 	.word	0x40005000
 8006630:	2320      	movs	r3, #32
 8006632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006636:	e128      	b.n	800688a <UART_SetConfig+0x5a6>
 8006638:	2340      	movs	r3, #64	@ 0x40
 800663a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800663e:	e124      	b.n	800688a <UART_SetConfig+0x5a6>
 8006640:	2380      	movs	r3, #128	@ 0x80
 8006642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006646:	e120      	b.n	800688a <UART_SetConfig+0x5a6>
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4acb      	ldr	r2, [pc, #812]	@ (800697c <UART_SetConfig+0x698>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d176      	bne.n	8006740 <UART_SetConfig+0x45c>
 8006652:	4bcb      	ldr	r3, [pc, #812]	@ (8006980 <UART_SetConfig+0x69c>)
 8006654:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006656:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800665a:	2b28      	cmp	r3, #40	@ 0x28
 800665c:	d86c      	bhi.n	8006738 <UART_SetConfig+0x454>
 800665e:	a201      	add	r2, pc, #4	@ (adr r2, 8006664 <UART_SetConfig+0x380>)
 8006660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006664:	08006709 	.word	0x08006709
 8006668:	08006739 	.word	0x08006739
 800666c:	08006739 	.word	0x08006739
 8006670:	08006739 	.word	0x08006739
 8006674:	08006739 	.word	0x08006739
 8006678:	08006739 	.word	0x08006739
 800667c:	08006739 	.word	0x08006739
 8006680:	08006739 	.word	0x08006739
 8006684:	08006711 	.word	0x08006711
 8006688:	08006739 	.word	0x08006739
 800668c:	08006739 	.word	0x08006739
 8006690:	08006739 	.word	0x08006739
 8006694:	08006739 	.word	0x08006739
 8006698:	08006739 	.word	0x08006739
 800669c:	08006739 	.word	0x08006739
 80066a0:	08006739 	.word	0x08006739
 80066a4:	08006719 	.word	0x08006719
 80066a8:	08006739 	.word	0x08006739
 80066ac:	08006739 	.word	0x08006739
 80066b0:	08006739 	.word	0x08006739
 80066b4:	08006739 	.word	0x08006739
 80066b8:	08006739 	.word	0x08006739
 80066bc:	08006739 	.word	0x08006739
 80066c0:	08006739 	.word	0x08006739
 80066c4:	08006721 	.word	0x08006721
 80066c8:	08006739 	.word	0x08006739
 80066cc:	08006739 	.word	0x08006739
 80066d0:	08006739 	.word	0x08006739
 80066d4:	08006739 	.word	0x08006739
 80066d8:	08006739 	.word	0x08006739
 80066dc:	08006739 	.word	0x08006739
 80066e0:	08006739 	.word	0x08006739
 80066e4:	08006729 	.word	0x08006729
 80066e8:	08006739 	.word	0x08006739
 80066ec:	08006739 	.word	0x08006739
 80066f0:	08006739 	.word	0x08006739
 80066f4:	08006739 	.word	0x08006739
 80066f8:	08006739 	.word	0x08006739
 80066fc:	08006739 	.word	0x08006739
 8006700:	08006739 	.word	0x08006739
 8006704:	08006731 	.word	0x08006731
 8006708:	2301      	movs	r3, #1
 800670a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800670e:	e0bc      	b.n	800688a <UART_SetConfig+0x5a6>
 8006710:	2304      	movs	r3, #4
 8006712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006716:	e0b8      	b.n	800688a <UART_SetConfig+0x5a6>
 8006718:	2308      	movs	r3, #8
 800671a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800671e:	e0b4      	b.n	800688a <UART_SetConfig+0x5a6>
 8006720:	2310      	movs	r3, #16
 8006722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006726:	e0b0      	b.n	800688a <UART_SetConfig+0x5a6>
 8006728:	2320      	movs	r3, #32
 800672a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800672e:	e0ac      	b.n	800688a <UART_SetConfig+0x5a6>
 8006730:	2340      	movs	r3, #64	@ 0x40
 8006732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006736:	e0a8      	b.n	800688a <UART_SetConfig+0x5a6>
 8006738:	2380      	movs	r3, #128	@ 0x80
 800673a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800673e:	e0a4      	b.n	800688a <UART_SetConfig+0x5a6>
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a8f      	ldr	r2, [pc, #572]	@ (8006984 <UART_SetConfig+0x6a0>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d130      	bne.n	80067ac <UART_SetConfig+0x4c8>
 800674a:	4b8d      	ldr	r3, [pc, #564]	@ (8006980 <UART_SetConfig+0x69c>)
 800674c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800674e:	f003 0307 	and.w	r3, r3, #7
 8006752:	2b05      	cmp	r3, #5
 8006754:	d826      	bhi.n	80067a4 <UART_SetConfig+0x4c0>
 8006756:	a201      	add	r2, pc, #4	@ (adr r2, 800675c <UART_SetConfig+0x478>)
 8006758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800675c:	08006775 	.word	0x08006775
 8006760:	0800677d 	.word	0x0800677d
 8006764:	08006785 	.word	0x08006785
 8006768:	0800678d 	.word	0x0800678d
 800676c:	08006795 	.word	0x08006795
 8006770:	0800679d 	.word	0x0800679d
 8006774:	2300      	movs	r3, #0
 8006776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800677a:	e086      	b.n	800688a <UART_SetConfig+0x5a6>
 800677c:	2304      	movs	r3, #4
 800677e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006782:	e082      	b.n	800688a <UART_SetConfig+0x5a6>
 8006784:	2308      	movs	r3, #8
 8006786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800678a:	e07e      	b.n	800688a <UART_SetConfig+0x5a6>
 800678c:	2310      	movs	r3, #16
 800678e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006792:	e07a      	b.n	800688a <UART_SetConfig+0x5a6>
 8006794:	2320      	movs	r3, #32
 8006796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800679a:	e076      	b.n	800688a <UART_SetConfig+0x5a6>
 800679c:	2340      	movs	r3, #64	@ 0x40
 800679e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067a2:	e072      	b.n	800688a <UART_SetConfig+0x5a6>
 80067a4:	2380      	movs	r3, #128	@ 0x80
 80067a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067aa:	e06e      	b.n	800688a <UART_SetConfig+0x5a6>
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a75      	ldr	r2, [pc, #468]	@ (8006988 <UART_SetConfig+0x6a4>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d130      	bne.n	8006818 <UART_SetConfig+0x534>
 80067b6:	4b72      	ldr	r3, [pc, #456]	@ (8006980 <UART_SetConfig+0x69c>)
 80067b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067ba:	f003 0307 	and.w	r3, r3, #7
 80067be:	2b05      	cmp	r3, #5
 80067c0:	d826      	bhi.n	8006810 <UART_SetConfig+0x52c>
 80067c2:	a201      	add	r2, pc, #4	@ (adr r2, 80067c8 <UART_SetConfig+0x4e4>)
 80067c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c8:	080067e1 	.word	0x080067e1
 80067cc:	080067e9 	.word	0x080067e9
 80067d0:	080067f1 	.word	0x080067f1
 80067d4:	080067f9 	.word	0x080067f9
 80067d8:	08006801 	.word	0x08006801
 80067dc:	08006809 	.word	0x08006809
 80067e0:	2300      	movs	r3, #0
 80067e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067e6:	e050      	b.n	800688a <UART_SetConfig+0x5a6>
 80067e8:	2304      	movs	r3, #4
 80067ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067ee:	e04c      	b.n	800688a <UART_SetConfig+0x5a6>
 80067f0:	2308      	movs	r3, #8
 80067f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067f6:	e048      	b.n	800688a <UART_SetConfig+0x5a6>
 80067f8:	2310      	movs	r3, #16
 80067fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067fe:	e044      	b.n	800688a <UART_SetConfig+0x5a6>
 8006800:	2320      	movs	r3, #32
 8006802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006806:	e040      	b.n	800688a <UART_SetConfig+0x5a6>
 8006808:	2340      	movs	r3, #64	@ 0x40
 800680a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800680e:	e03c      	b.n	800688a <UART_SetConfig+0x5a6>
 8006810:	2380      	movs	r3, #128	@ 0x80
 8006812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006816:	e038      	b.n	800688a <UART_SetConfig+0x5a6>
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a5b      	ldr	r2, [pc, #364]	@ (800698c <UART_SetConfig+0x6a8>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d130      	bne.n	8006884 <UART_SetConfig+0x5a0>
 8006822:	4b57      	ldr	r3, [pc, #348]	@ (8006980 <UART_SetConfig+0x69c>)
 8006824:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006826:	f003 0307 	and.w	r3, r3, #7
 800682a:	2b05      	cmp	r3, #5
 800682c:	d826      	bhi.n	800687c <UART_SetConfig+0x598>
 800682e:	a201      	add	r2, pc, #4	@ (adr r2, 8006834 <UART_SetConfig+0x550>)
 8006830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006834:	0800684d 	.word	0x0800684d
 8006838:	08006855 	.word	0x08006855
 800683c:	0800685d 	.word	0x0800685d
 8006840:	08006865 	.word	0x08006865
 8006844:	0800686d 	.word	0x0800686d
 8006848:	08006875 	.word	0x08006875
 800684c:	2302      	movs	r3, #2
 800684e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006852:	e01a      	b.n	800688a <UART_SetConfig+0x5a6>
 8006854:	2304      	movs	r3, #4
 8006856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800685a:	e016      	b.n	800688a <UART_SetConfig+0x5a6>
 800685c:	2308      	movs	r3, #8
 800685e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006862:	e012      	b.n	800688a <UART_SetConfig+0x5a6>
 8006864:	2310      	movs	r3, #16
 8006866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800686a:	e00e      	b.n	800688a <UART_SetConfig+0x5a6>
 800686c:	2320      	movs	r3, #32
 800686e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006872:	e00a      	b.n	800688a <UART_SetConfig+0x5a6>
 8006874:	2340      	movs	r3, #64	@ 0x40
 8006876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800687a:	e006      	b.n	800688a <UART_SetConfig+0x5a6>
 800687c:	2380      	movs	r3, #128	@ 0x80
 800687e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006882:	e002      	b.n	800688a <UART_SetConfig+0x5a6>
 8006884:	2380      	movs	r3, #128	@ 0x80
 8006886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a3f      	ldr	r2, [pc, #252]	@ (800698c <UART_SetConfig+0x6a8>)
 8006890:	4293      	cmp	r3, r2
 8006892:	f040 80f8 	bne.w	8006a86 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006896:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800689a:	2b20      	cmp	r3, #32
 800689c:	dc46      	bgt.n	800692c <UART_SetConfig+0x648>
 800689e:	2b02      	cmp	r3, #2
 80068a0:	f2c0 8082 	blt.w	80069a8 <UART_SetConfig+0x6c4>
 80068a4:	3b02      	subs	r3, #2
 80068a6:	2b1e      	cmp	r3, #30
 80068a8:	d87e      	bhi.n	80069a8 <UART_SetConfig+0x6c4>
 80068aa:	a201      	add	r2, pc, #4	@ (adr r2, 80068b0 <UART_SetConfig+0x5cc>)
 80068ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068b0:	08006933 	.word	0x08006933
 80068b4:	080069a9 	.word	0x080069a9
 80068b8:	0800693b 	.word	0x0800693b
 80068bc:	080069a9 	.word	0x080069a9
 80068c0:	080069a9 	.word	0x080069a9
 80068c4:	080069a9 	.word	0x080069a9
 80068c8:	0800694b 	.word	0x0800694b
 80068cc:	080069a9 	.word	0x080069a9
 80068d0:	080069a9 	.word	0x080069a9
 80068d4:	080069a9 	.word	0x080069a9
 80068d8:	080069a9 	.word	0x080069a9
 80068dc:	080069a9 	.word	0x080069a9
 80068e0:	080069a9 	.word	0x080069a9
 80068e4:	080069a9 	.word	0x080069a9
 80068e8:	0800695b 	.word	0x0800695b
 80068ec:	080069a9 	.word	0x080069a9
 80068f0:	080069a9 	.word	0x080069a9
 80068f4:	080069a9 	.word	0x080069a9
 80068f8:	080069a9 	.word	0x080069a9
 80068fc:	080069a9 	.word	0x080069a9
 8006900:	080069a9 	.word	0x080069a9
 8006904:	080069a9 	.word	0x080069a9
 8006908:	080069a9 	.word	0x080069a9
 800690c:	080069a9 	.word	0x080069a9
 8006910:	080069a9 	.word	0x080069a9
 8006914:	080069a9 	.word	0x080069a9
 8006918:	080069a9 	.word	0x080069a9
 800691c:	080069a9 	.word	0x080069a9
 8006920:	080069a9 	.word	0x080069a9
 8006924:	080069a9 	.word	0x080069a9
 8006928:	0800699b 	.word	0x0800699b
 800692c:	2b40      	cmp	r3, #64	@ 0x40
 800692e:	d037      	beq.n	80069a0 <UART_SetConfig+0x6bc>
 8006930:	e03a      	b.n	80069a8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006932:	f7fd feb3 	bl	800469c <HAL_RCCEx_GetD3PCLK1Freq>
 8006936:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006938:	e03c      	b.n	80069b4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800693a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800693e:	4618      	mov	r0, r3
 8006940:	f7fd fec2 	bl	80046c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006946:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006948:	e034      	b.n	80069b4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800694a:	f107 0318 	add.w	r3, r7, #24
 800694e:	4618      	mov	r0, r3
 8006950:	f7fe f80e 	bl	8004970 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006954:	69fb      	ldr	r3, [r7, #28]
 8006956:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006958:	e02c      	b.n	80069b4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800695a:	4b09      	ldr	r3, [pc, #36]	@ (8006980 <UART_SetConfig+0x69c>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f003 0320 	and.w	r3, r3, #32
 8006962:	2b00      	cmp	r3, #0
 8006964:	d016      	beq.n	8006994 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006966:	4b06      	ldr	r3, [pc, #24]	@ (8006980 <UART_SetConfig+0x69c>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	08db      	lsrs	r3, r3, #3
 800696c:	f003 0303 	and.w	r3, r3, #3
 8006970:	4a07      	ldr	r2, [pc, #28]	@ (8006990 <UART_SetConfig+0x6ac>)
 8006972:	fa22 f303 	lsr.w	r3, r2, r3
 8006976:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006978:	e01c      	b.n	80069b4 <UART_SetConfig+0x6d0>
 800697a:	bf00      	nop
 800697c:	40011400 	.word	0x40011400
 8006980:	58024400 	.word	0x58024400
 8006984:	40007800 	.word	0x40007800
 8006988:	40007c00 	.word	0x40007c00
 800698c:	58000c00 	.word	0x58000c00
 8006990:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006994:	4b9d      	ldr	r3, [pc, #628]	@ (8006c0c <UART_SetConfig+0x928>)
 8006996:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006998:	e00c      	b.n	80069b4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800699a:	4b9d      	ldr	r3, [pc, #628]	@ (8006c10 <UART_SetConfig+0x92c>)
 800699c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800699e:	e009      	b.n	80069b4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80069a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069a6:	e005      	b.n	80069b4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80069a8:	2300      	movs	r3, #0
 80069aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80069ac:	2301      	movs	r3, #1
 80069ae:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80069b2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80069b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	f000 81de 	beq.w	8006d78 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069c0:	4a94      	ldr	r2, [pc, #592]	@ (8006c14 <UART_SetConfig+0x930>)
 80069c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069c6:	461a      	mov	r2, r3
 80069c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80069ce:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	685a      	ldr	r2, [r3, #4]
 80069d4:	4613      	mov	r3, r2
 80069d6:	005b      	lsls	r3, r3, #1
 80069d8:	4413      	add	r3, r2
 80069da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069dc:	429a      	cmp	r2, r3
 80069de:	d305      	bcc.n	80069ec <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80069e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d903      	bls.n	80069f4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80069ec:	2301      	movs	r3, #1
 80069ee:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80069f2:	e1c1      	b.n	8006d78 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069f6:	2200      	movs	r2, #0
 80069f8:	60bb      	str	r3, [r7, #8]
 80069fa:	60fa      	str	r2, [r7, #12]
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a00:	4a84      	ldr	r2, [pc, #528]	@ (8006c14 <UART_SetConfig+0x930>)
 8006a02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	2200      	movs	r2, #0
 8006a0a:	603b      	str	r3, [r7, #0]
 8006a0c:	607a      	str	r2, [r7, #4]
 8006a0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a12:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006a16:	f7f9 fc5f 	bl	80002d8 <__aeabi_uldivmod>
 8006a1a:	4602      	mov	r2, r0
 8006a1c:	460b      	mov	r3, r1
 8006a1e:	4610      	mov	r0, r2
 8006a20:	4619      	mov	r1, r3
 8006a22:	f04f 0200 	mov.w	r2, #0
 8006a26:	f04f 0300 	mov.w	r3, #0
 8006a2a:	020b      	lsls	r3, r1, #8
 8006a2c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006a30:	0202      	lsls	r2, r0, #8
 8006a32:	6979      	ldr	r1, [r7, #20]
 8006a34:	6849      	ldr	r1, [r1, #4]
 8006a36:	0849      	lsrs	r1, r1, #1
 8006a38:	2000      	movs	r0, #0
 8006a3a:	460c      	mov	r4, r1
 8006a3c:	4605      	mov	r5, r0
 8006a3e:	eb12 0804 	adds.w	r8, r2, r4
 8006a42:	eb43 0905 	adc.w	r9, r3, r5
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	469a      	mov	sl, r3
 8006a4e:	4693      	mov	fp, r2
 8006a50:	4652      	mov	r2, sl
 8006a52:	465b      	mov	r3, fp
 8006a54:	4640      	mov	r0, r8
 8006a56:	4649      	mov	r1, r9
 8006a58:	f7f9 fc3e 	bl	80002d8 <__aeabi_uldivmod>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	460b      	mov	r3, r1
 8006a60:	4613      	mov	r3, r2
 8006a62:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006a64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a66:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a6a:	d308      	bcc.n	8006a7e <UART_SetConfig+0x79a>
 8006a6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a72:	d204      	bcs.n	8006a7e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006a7a:	60da      	str	r2, [r3, #12]
 8006a7c:	e17c      	b.n	8006d78 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006a84:	e178      	b.n	8006d78 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	69db      	ldr	r3, [r3, #28]
 8006a8a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a8e:	f040 80c5 	bne.w	8006c1c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006a92:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006a96:	2b20      	cmp	r3, #32
 8006a98:	dc48      	bgt.n	8006b2c <UART_SetConfig+0x848>
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	db7b      	blt.n	8006b96 <UART_SetConfig+0x8b2>
 8006a9e:	2b20      	cmp	r3, #32
 8006aa0:	d879      	bhi.n	8006b96 <UART_SetConfig+0x8b2>
 8006aa2:	a201      	add	r2, pc, #4	@ (adr r2, 8006aa8 <UART_SetConfig+0x7c4>)
 8006aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aa8:	08006b33 	.word	0x08006b33
 8006aac:	08006b3b 	.word	0x08006b3b
 8006ab0:	08006b97 	.word	0x08006b97
 8006ab4:	08006b97 	.word	0x08006b97
 8006ab8:	08006b43 	.word	0x08006b43
 8006abc:	08006b97 	.word	0x08006b97
 8006ac0:	08006b97 	.word	0x08006b97
 8006ac4:	08006b97 	.word	0x08006b97
 8006ac8:	08006b53 	.word	0x08006b53
 8006acc:	08006b97 	.word	0x08006b97
 8006ad0:	08006b97 	.word	0x08006b97
 8006ad4:	08006b97 	.word	0x08006b97
 8006ad8:	08006b97 	.word	0x08006b97
 8006adc:	08006b97 	.word	0x08006b97
 8006ae0:	08006b97 	.word	0x08006b97
 8006ae4:	08006b97 	.word	0x08006b97
 8006ae8:	08006b63 	.word	0x08006b63
 8006aec:	08006b97 	.word	0x08006b97
 8006af0:	08006b97 	.word	0x08006b97
 8006af4:	08006b97 	.word	0x08006b97
 8006af8:	08006b97 	.word	0x08006b97
 8006afc:	08006b97 	.word	0x08006b97
 8006b00:	08006b97 	.word	0x08006b97
 8006b04:	08006b97 	.word	0x08006b97
 8006b08:	08006b97 	.word	0x08006b97
 8006b0c:	08006b97 	.word	0x08006b97
 8006b10:	08006b97 	.word	0x08006b97
 8006b14:	08006b97 	.word	0x08006b97
 8006b18:	08006b97 	.word	0x08006b97
 8006b1c:	08006b97 	.word	0x08006b97
 8006b20:	08006b97 	.word	0x08006b97
 8006b24:	08006b97 	.word	0x08006b97
 8006b28:	08006b89 	.word	0x08006b89
 8006b2c:	2b40      	cmp	r3, #64	@ 0x40
 8006b2e:	d02e      	beq.n	8006b8e <UART_SetConfig+0x8aa>
 8006b30:	e031      	b.n	8006b96 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b32:	f7fc fb7d 	bl	8003230 <HAL_RCC_GetPCLK1Freq>
 8006b36:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006b38:	e033      	b.n	8006ba2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b3a:	f7fc fb8f 	bl	800325c <HAL_RCC_GetPCLK2Freq>
 8006b3e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006b40:	e02f      	b.n	8006ba2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b46:	4618      	mov	r0, r3
 8006b48:	f7fd fdbe 	bl	80046c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006b4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b50:	e027      	b.n	8006ba2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b52:	f107 0318 	add.w	r3, r7, #24
 8006b56:	4618      	mov	r0, r3
 8006b58:	f7fd ff0a 	bl	8004970 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006b5c:	69fb      	ldr	r3, [r7, #28]
 8006b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b60:	e01f      	b.n	8006ba2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b62:	4b2d      	ldr	r3, [pc, #180]	@ (8006c18 <UART_SetConfig+0x934>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f003 0320 	and.w	r3, r3, #32
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d009      	beq.n	8006b82 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006b6e:	4b2a      	ldr	r3, [pc, #168]	@ (8006c18 <UART_SetConfig+0x934>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	08db      	lsrs	r3, r3, #3
 8006b74:	f003 0303 	and.w	r3, r3, #3
 8006b78:	4a24      	ldr	r2, [pc, #144]	@ (8006c0c <UART_SetConfig+0x928>)
 8006b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8006b7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006b80:	e00f      	b.n	8006ba2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006b82:	4b22      	ldr	r3, [pc, #136]	@ (8006c0c <UART_SetConfig+0x928>)
 8006b84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b86:	e00c      	b.n	8006ba2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006b88:	4b21      	ldr	r3, [pc, #132]	@ (8006c10 <UART_SetConfig+0x92c>)
 8006b8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b8c:	e009      	b.n	8006ba2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b94:	e005      	b.n	8006ba2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006b96:	2300      	movs	r3, #0
 8006b98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006ba0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006ba2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	f000 80e7 	beq.w	8006d78 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bae:	4a19      	ldr	r2, [pc, #100]	@ (8006c14 <UART_SetConfig+0x930>)
 8006bb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006bb4:	461a      	mov	r2, r3
 8006bb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bb8:	fbb3 f3f2 	udiv	r3, r3, r2
 8006bbc:	005a      	lsls	r2, r3, #1
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	085b      	lsrs	r3, r3, #1
 8006bc4:	441a      	add	r2, r3
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bce:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bd2:	2b0f      	cmp	r3, #15
 8006bd4:	d916      	bls.n	8006c04 <UART_SetConfig+0x920>
 8006bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bdc:	d212      	bcs.n	8006c04 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006bde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	f023 030f 	bic.w	r3, r3, #15
 8006be6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006be8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bea:	085b      	lsrs	r3, r3, #1
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	f003 0307 	and.w	r3, r3, #7
 8006bf2:	b29a      	uxth	r2, r3
 8006bf4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006c00:	60da      	str	r2, [r3, #12]
 8006c02:	e0b9      	b.n	8006d78 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006c04:	2301      	movs	r3, #1
 8006c06:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006c0a:	e0b5      	b.n	8006d78 <UART_SetConfig+0xa94>
 8006c0c:	03d09000 	.word	0x03d09000
 8006c10:	003d0900 	.word	0x003d0900
 8006c14:	080073c4 	.word	0x080073c4
 8006c18:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c1c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006c20:	2b20      	cmp	r3, #32
 8006c22:	dc49      	bgt.n	8006cb8 <UART_SetConfig+0x9d4>
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	db7c      	blt.n	8006d22 <UART_SetConfig+0xa3e>
 8006c28:	2b20      	cmp	r3, #32
 8006c2a:	d87a      	bhi.n	8006d22 <UART_SetConfig+0xa3e>
 8006c2c:	a201      	add	r2, pc, #4	@ (adr r2, 8006c34 <UART_SetConfig+0x950>)
 8006c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c32:	bf00      	nop
 8006c34:	08006cbf 	.word	0x08006cbf
 8006c38:	08006cc7 	.word	0x08006cc7
 8006c3c:	08006d23 	.word	0x08006d23
 8006c40:	08006d23 	.word	0x08006d23
 8006c44:	08006ccf 	.word	0x08006ccf
 8006c48:	08006d23 	.word	0x08006d23
 8006c4c:	08006d23 	.word	0x08006d23
 8006c50:	08006d23 	.word	0x08006d23
 8006c54:	08006cdf 	.word	0x08006cdf
 8006c58:	08006d23 	.word	0x08006d23
 8006c5c:	08006d23 	.word	0x08006d23
 8006c60:	08006d23 	.word	0x08006d23
 8006c64:	08006d23 	.word	0x08006d23
 8006c68:	08006d23 	.word	0x08006d23
 8006c6c:	08006d23 	.word	0x08006d23
 8006c70:	08006d23 	.word	0x08006d23
 8006c74:	08006cef 	.word	0x08006cef
 8006c78:	08006d23 	.word	0x08006d23
 8006c7c:	08006d23 	.word	0x08006d23
 8006c80:	08006d23 	.word	0x08006d23
 8006c84:	08006d23 	.word	0x08006d23
 8006c88:	08006d23 	.word	0x08006d23
 8006c8c:	08006d23 	.word	0x08006d23
 8006c90:	08006d23 	.word	0x08006d23
 8006c94:	08006d23 	.word	0x08006d23
 8006c98:	08006d23 	.word	0x08006d23
 8006c9c:	08006d23 	.word	0x08006d23
 8006ca0:	08006d23 	.word	0x08006d23
 8006ca4:	08006d23 	.word	0x08006d23
 8006ca8:	08006d23 	.word	0x08006d23
 8006cac:	08006d23 	.word	0x08006d23
 8006cb0:	08006d23 	.word	0x08006d23
 8006cb4:	08006d15 	.word	0x08006d15
 8006cb8:	2b40      	cmp	r3, #64	@ 0x40
 8006cba:	d02e      	beq.n	8006d1a <UART_SetConfig+0xa36>
 8006cbc:	e031      	b.n	8006d22 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cbe:	f7fc fab7 	bl	8003230 <HAL_RCC_GetPCLK1Freq>
 8006cc2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006cc4:	e033      	b.n	8006d2e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006cc6:	f7fc fac9 	bl	800325c <HAL_RCC_GetPCLK2Freq>
 8006cca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006ccc:	e02f      	b.n	8006d2e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006cce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f7fd fcf8 	bl	80046c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cdc:	e027      	b.n	8006d2e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006cde:	f107 0318 	add.w	r3, r7, #24
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f7fd fe44 	bl	8004970 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006ce8:	69fb      	ldr	r3, [r7, #28]
 8006cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cec:	e01f      	b.n	8006d2e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006cee:	4b2d      	ldr	r3, [pc, #180]	@ (8006da4 <UART_SetConfig+0xac0>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f003 0320 	and.w	r3, r3, #32
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d009      	beq.n	8006d0e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006cfa:	4b2a      	ldr	r3, [pc, #168]	@ (8006da4 <UART_SetConfig+0xac0>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	08db      	lsrs	r3, r3, #3
 8006d00:	f003 0303 	and.w	r3, r3, #3
 8006d04:	4a28      	ldr	r2, [pc, #160]	@ (8006da8 <UART_SetConfig+0xac4>)
 8006d06:	fa22 f303 	lsr.w	r3, r2, r3
 8006d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006d0c:	e00f      	b.n	8006d2e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006d0e:	4b26      	ldr	r3, [pc, #152]	@ (8006da8 <UART_SetConfig+0xac4>)
 8006d10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d12:	e00c      	b.n	8006d2e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006d14:	4b25      	ldr	r3, [pc, #148]	@ (8006dac <UART_SetConfig+0xac8>)
 8006d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d18:	e009      	b.n	8006d2e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d20:	e005      	b.n	8006d2e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006d22:	2300      	movs	r3, #0
 8006d24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006d26:	2301      	movs	r3, #1
 8006d28:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006d2c:	bf00      	nop
    }

    if (pclk != 0U)
 8006d2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d021      	beq.n	8006d78 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d38:	4a1d      	ldr	r2, [pc, #116]	@ (8006db0 <UART_SetConfig+0xacc>)
 8006d3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d3e:	461a      	mov	r2, r3
 8006d40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d42:	fbb3 f2f2 	udiv	r2, r3, r2
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	085b      	lsrs	r3, r3, #1
 8006d4c:	441a      	add	r2, r3
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d56:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d5a:	2b0f      	cmp	r3, #15
 8006d5c:	d909      	bls.n	8006d72 <UART_SetConfig+0xa8e>
 8006d5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d64:	d205      	bcs.n	8006d72 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006d66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d68:	b29a      	uxth	r2, r3
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	60da      	str	r2, [r3, #12]
 8006d70:	e002      	b.n	8006d78 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	2201      	movs	r2, #1
 8006d84:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	2200      	movs	r2, #0
 8006d92:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006d94:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3748      	adds	r7, #72	@ 0x48
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006da2:	bf00      	nop
 8006da4:	58024400 	.word	0x58024400
 8006da8:	03d09000 	.word	0x03d09000
 8006dac:	003d0900 	.word	0x003d0900
 8006db0:	080073c4 	.word	0x080073c4

08006db4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b083      	sub	sp, #12
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dc0:	f003 0308 	and.w	r3, r3, #8
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d00a      	beq.n	8006dde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	430a      	orrs	r2, r1
 8006ddc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006de2:	f003 0301 	and.w	r3, r3, #1
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d00a      	beq.n	8006e00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	430a      	orrs	r2, r1
 8006dfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e04:	f003 0302 	and.w	r3, r3, #2
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d00a      	beq.n	8006e22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	430a      	orrs	r2, r1
 8006e20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e26:	f003 0304 	and.w	r3, r3, #4
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d00a      	beq.n	8006e44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	430a      	orrs	r2, r1
 8006e42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e48:	f003 0310 	and.w	r3, r3, #16
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d00a      	beq.n	8006e66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	430a      	orrs	r2, r1
 8006e64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e6a:	f003 0320 	and.w	r3, r3, #32
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d00a      	beq.n	8006e88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	430a      	orrs	r2, r1
 8006e86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d01a      	beq.n	8006eca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	430a      	orrs	r2, r1
 8006ea8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006eae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006eb2:	d10a      	bne.n	8006eca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	430a      	orrs	r2, r1
 8006ec8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ece:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d00a      	beq.n	8006eec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	430a      	orrs	r2, r1
 8006eea:	605a      	str	r2, [r3, #4]
  }
}
 8006eec:	bf00      	nop
 8006eee:	370c      	adds	r7, #12
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr

08006ef8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b098      	sub	sp, #96	@ 0x60
 8006efc:	af02      	add	r7, sp, #8
 8006efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2200      	movs	r2, #0
 8006f04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006f08:	f7fa fd9c 	bl	8001a44 <HAL_GetTick>
 8006f0c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f003 0308 	and.w	r3, r3, #8
 8006f18:	2b08      	cmp	r3, #8
 8006f1a:	d12f      	bne.n	8006f7c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f1c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006f20:	9300      	str	r3, [sp, #0]
 8006f22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f24:	2200      	movs	r2, #0
 8006f26:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f000 f88e 	bl	800704c <UART_WaitOnFlagUntilTimeout>
 8006f30:	4603      	mov	r3, r0
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d022      	beq.n	8006f7c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f3e:	e853 3f00 	ldrex	r3, [r3]
 8006f42:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006f44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f4a:	653b      	str	r3, [r7, #80]	@ 0x50
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	461a      	mov	r2, r3
 8006f52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f54:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f56:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f58:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006f5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f5c:	e841 2300 	strex	r3, r2, [r1]
 8006f60:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006f62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d1e6      	bne.n	8006f36 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2220      	movs	r2, #32
 8006f6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2200      	movs	r2, #0
 8006f74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f78:	2303      	movs	r3, #3
 8006f7a:	e063      	b.n	8007044 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f003 0304 	and.w	r3, r3, #4
 8006f86:	2b04      	cmp	r3, #4
 8006f88:	d149      	bne.n	800701e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f8a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006f8e:	9300      	str	r3, [sp, #0]
 8006f90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f92:	2200      	movs	r2, #0
 8006f94:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f000 f857 	bl	800704c <UART_WaitOnFlagUntilTimeout>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d03c      	beq.n	800701e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fac:	e853 3f00 	ldrex	r3, [r3]
 8006fb0:	623b      	str	r3, [r7, #32]
   return(result);
 8006fb2:	6a3b      	ldr	r3, [r7, #32]
 8006fb4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006fb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006fc2:	633b      	str	r3, [r7, #48]	@ 0x30
 8006fc4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006fc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006fca:	e841 2300 	strex	r3, r2, [r1]
 8006fce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006fd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d1e6      	bne.n	8006fa4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	3308      	adds	r3, #8
 8006fdc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	e853 3f00 	ldrex	r3, [r3]
 8006fe4:	60fb      	str	r3, [r7, #12]
   return(result);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	f023 0301 	bic.w	r3, r3, #1
 8006fec:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	3308      	adds	r3, #8
 8006ff4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ff6:	61fa      	str	r2, [r7, #28]
 8006ff8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ffa:	69b9      	ldr	r1, [r7, #24]
 8006ffc:	69fa      	ldr	r2, [r7, #28]
 8006ffe:	e841 2300 	strex	r3, r2, [r1]
 8007002:	617b      	str	r3, [r7, #20]
   return(result);
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d1e5      	bne.n	8006fd6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2220      	movs	r2, #32
 800700e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2200      	movs	r2, #0
 8007016:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800701a:	2303      	movs	r3, #3
 800701c:	e012      	b.n	8007044 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2220      	movs	r2, #32
 8007022:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2220      	movs	r2, #32
 800702a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2200      	movs	r2, #0
 8007032:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2200      	movs	r2, #0
 8007038:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2200      	movs	r2, #0
 800703e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007042:	2300      	movs	r3, #0
}
 8007044:	4618      	mov	r0, r3
 8007046:	3758      	adds	r7, #88	@ 0x58
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}

0800704c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b084      	sub	sp, #16
 8007050:	af00      	add	r7, sp, #0
 8007052:	60f8      	str	r0, [r7, #12]
 8007054:	60b9      	str	r1, [r7, #8]
 8007056:	603b      	str	r3, [r7, #0]
 8007058:	4613      	mov	r3, r2
 800705a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800705c:	e04f      	b.n	80070fe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800705e:	69bb      	ldr	r3, [r7, #24]
 8007060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007064:	d04b      	beq.n	80070fe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007066:	f7fa fced 	bl	8001a44 <HAL_GetTick>
 800706a:	4602      	mov	r2, r0
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	1ad3      	subs	r3, r2, r3
 8007070:	69ba      	ldr	r2, [r7, #24]
 8007072:	429a      	cmp	r2, r3
 8007074:	d302      	bcc.n	800707c <UART_WaitOnFlagUntilTimeout+0x30>
 8007076:	69bb      	ldr	r3, [r7, #24]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d101      	bne.n	8007080 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800707c:	2303      	movs	r3, #3
 800707e:	e04e      	b.n	800711e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f003 0304 	and.w	r3, r3, #4
 800708a:	2b00      	cmp	r3, #0
 800708c:	d037      	beq.n	80070fe <UART_WaitOnFlagUntilTimeout+0xb2>
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	2b80      	cmp	r3, #128	@ 0x80
 8007092:	d034      	beq.n	80070fe <UART_WaitOnFlagUntilTimeout+0xb2>
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	2b40      	cmp	r3, #64	@ 0x40
 8007098:	d031      	beq.n	80070fe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	69db      	ldr	r3, [r3, #28]
 80070a0:	f003 0308 	and.w	r3, r3, #8
 80070a4:	2b08      	cmp	r3, #8
 80070a6:	d110      	bne.n	80070ca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	2208      	movs	r2, #8
 80070ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80070b0:	68f8      	ldr	r0, [r7, #12]
 80070b2:	f000 f839 	bl	8007128 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2208      	movs	r2, #8
 80070ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2200      	movs	r2, #0
 80070c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80070c6:	2301      	movs	r3, #1
 80070c8:	e029      	b.n	800711e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	69db      	ldr	r3, [r3, #28]
 80070d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80070d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80070d8:	d111      	bne.n	80070fe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80070e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80070e4:	68f8      	ldr	r0, [r7, #12]
 80070e6:	f000 f81f 	bl	8007128 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2220      	movs	r2, #32
 80070ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2200      	movs	r2, #0
 80070f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80070fa:	2303      	movs	r3, #3
 80070fc:	e00f      	b.n	800711e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	69da      	ldr	r2, [r3, #28]
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	4013      	ands	r3, r2
 8007108:	68ba      	ldr	r2, [r7, #8]
 800710a:	429a      	cmp	r2, r3
 800710c:	bf0c      	ite	eq
 800710e:	2301      	moveq	r3, #1
 8007110:	2300      	movne	r3, #0
 8007112:	b2db      	uxtb	r3, r3
 8007114:	461a      	mov	r2, r3
 8007116:	79fb      	ldrb	r3, [r7, #7]
 8007118:	429a      	cmp	r2, r3
 800711a:	d0a0      	beq.n	800705e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800711c:	2300      	movs	r3, #0
}
 800711e:	4618      	mov	r0, r3
 8007120:	3710      	adds	r7, #16
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
	...

08007128 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007128:	b480      	push	{r7}
 800712a:	b095      	sub	sp, #84	@ 0x54
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007136:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007138:	e853 3f00 	ldrex	r3, [r3]
 800713c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800713e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007140:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007144:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	461a      	mov	r2, r3
 800714c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800714e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007150:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007152:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007154:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007156:	e841 2300 	strex	r3, r2, [r1]
 800715a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800715c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800715e:	2b00      	cmp	r3, #0
 8007160:	d1e6      	bne.n	8007130 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	3308      	adds	r3, #8
 8007168:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800716a:	6a3b      	ldr	r3, [r7, #32]
 800716c:	e853 3f00 	ldrex	r3, [r3]
 8007170:	61fb      	str	r3, [r7, #28]
   return(result);
 8007172:	69fa      	ldr	r2, [r7, #28]
 8007174:	4b1e      	ldr	r3, [pc, #120]	@ (80071f0 <UART_EndRxTransfer+0xc8>)
 8007176:	4013      	ands	r3, r2
 8007178:	64bb      	str	r3, [r7, #72]	@ 0x48
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	3308      	adds	r3, #8
 8007180:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007182:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007184:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007186:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007188:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800718a:	e841 2300 	strex	r3, r2, [r1]
 800718e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007192:	2b00      	cmp	r3, #0
 8007194:	d1e5      	bne.n	8007162 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800719a:	2b01      	cmp	r3, #1
 800719c:	d118      	bne.n	80071d0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	e853 3f00 	ldrex	r3, [r3]
 80071aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	f023 0310 	bic.w	r3, r3, #16
 80071b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	461a      	mov	r2, r3
 80071ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80071bc:	61bb      	str	r3, [r7, #24]
 80071be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c0:	6979      	ldr	r1, [r7, #20]
 80071c2:	69ba      	ldr	r2, [r7, #24]
 80071c4:	e841 2300 	strex	r3, r2, [r1]
 80071c8:	613b      	str	r3, [r7, #16]
   return(result);
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d1e6      	bne.n	800719e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2220      	movs	r2, #32
 80071d4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2200      	movs	r2, #0
 80071e2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80071e4:	bf00      	nop
 80071e6:	3754      	adds	r7, #84	@ 0x54
 80071e8:	46bd      	mov	sp, r7
 80071ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ee:	4770      	bx	lr
 80071f0:	effffffe 	.word	0xeffffffe

080071f4 <memset>:
 80071f4:	4402      	add	r2, r0
 80071f6:	4603      	mov	r3, r0
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d100      	bne.n	80071fe <memset+0xa>
 80071fc:	4770      	bx	lr
 80071fe:	f803 1b01 	strb.w	r1, [r3], #1
 8007202:	e7f9      	b.n	80071f8 <memset+0x4>

08007204 <__libc_init_array>:
 8007204:	b570      	push	{r4, r5, r6, lr}
 8007206:	4d0d      	ldr	r5, [pc, #52]	@ (800723c <__libc_init_array+0x38>)
 8007208:	4c0d      	ldr	r4, [pc, #52]	@ (8007240 <__libc_init_array+0x3c>)
 800720a:	1b64      	subs	r4, r4, r5
 800720c:	10a4      	asrs	r4, r4, #2
 800720e:	2600      	movs	r6, #0
 8007210:	42a6      	cmp	r6, r4
 8007212:	d109      	bne.n	8007228 <__libc_init_array+0x24>
 8007214:	4d0b      	ldr	r5, [pc, #44]	@ (8007244 <__libc_init_array+0x40>)
 8007216:	4c0c      	ldr	r4, [pc, #48]	@ (8007248 <__libc_init_array+0x44>)
 8007218:	f000 f818 	bl	800724c <_init>
 800721c:	1b64      	subs	r4, r4, r5
 800721e:	10a4      	asrs	r4, r4, #2
 8007220:	2600      	movs	r6, #0
 8007222:	42a6      	cmp	r6, r4
 8007224:	d105      	bne.n	8007232 <__libc_init_array+0x2e>
 8007226:	bd70      	pop	{r4, r5, r6, pc}
 8007228:	f855 3b04 	ldr.w	r3, [r5], #4
 800722c:	4798      	blx	r3
 800722e:	3601      	adds	r6, #1
 8007230:	e7ee      	b.n	8007210 <__libc_init_array+0xc>
 8007232:	f855 3b04 	ldr.w	r3, [r5], #4
 8007236:	4798      	blx	r3
 8007238:	3601      	adds	r6, #1
 800723a:	e7f2      	b.n	8007222 <__libc_init_array+0x1e>
 800723c:	080073e4 	.word	0x080073e4
 8007240:	080073e4 	.word	0x080073e4
 8007244:	080073e4 	.word	0x080073e4
 8007248:	080073e8 	.word	0x080073e8

0800724c <_init>:
 800724c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800724e:	bf00      	nop
 8007250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007252:	bc08      	pop	{r3}
 8007254:	469e      	mov	lr, r3
 8007256:	4770      	bx	lr

08007258 <_fini>:
 8007258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800725a:	bf00      	nop
 800725c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800725e:	bc08      	pop	{r3}
 8007260:	469e      	mov	lr, r3
 8007262:	4770      	bx	lr
