
newLibNRF_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f7c  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  08007214  08007214  00008214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800738c  0800738c  0000904c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800738c  0800738c  0000838c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007394  08007394  0000904c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007394  08007394  00008394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007398  08007398  00008398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000004c  24000000  0800739c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2400004c  080073e8  0000904c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240001b8  080073e8  000091b8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000904c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013ac4  00000000  00000000  0000907a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002709  00000000  00000000  0001cb3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e28  00000000  00000000  0001f248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ad8  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003a89c  00000000  00000000  00020b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012d20  00000000  00000000  0005b3e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018086e  00000000  00000000  0006e104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001ee972  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003aa4  00000000  00000000  001ee9b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  001f245c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2400004c 	.word	0x2400004c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080071fc 	.word	0x080071fc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000050 	.word	0x24000050
 80002d4:	080071fc 	.word	0x080071fc

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b988 	b.w	8000600 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	468e      	mov	lr, r1
 8000310:	4604      	mov	r4, r0
 8000312:	4688      	mov	r8, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d962      	bls.n	80003e4 <__udivmoddi4+0xdc>
 800031e:	fab2 f682 	clz	r6, r2
 8000322:	b14e      	cbz	r6, 8000338 <__udivmoddi4+0x30>
 8000324:	f1c6 0320 	rsb	r3, r6, #32
 8000328:	fa01 f806 	lsl.w	r8, r1, r6
 800032c:	fa20 f303 	lsr.w	r3, r0, r3
 8000330:	40b7      	lsls	r7, r6
 8000332:	ea43 0808 	orr.w	r8, r3, r8
 8000336:	40b4      	lsls	r4, r6
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	fbb8 f1fe 	udiv	r1, r8, lr
 8000344:	0c23      	lsrs	r3, r4, #16
 8000346:	fb0e 8811 	mls	r8, lr, r1, r8
 800034a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034e:	fb01 f20c 	mul.w	r2, r1, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d909      	bls.n	800036a <__udivmoddi4+0x62>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f101 30ff 	add.w	r0, r1, #4294967295
 800035c:	f080 80ea 	bcs.w	8000534 <__udivmoddi4+0x22c>
 8000360:	429a      	cmp	r2, r3
 8000362:	f240 80e7 	bls.w	8000534 <__udivmoddi4+0x22c>
 8000366:	3902      	subs	r1, #2
 8000368:	443b      	add	r3, r7
 800036a:	1a9a      	subs	r2, r3, r2
 800036c:	b2a3      	uxth	r3, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800037a:	fb00 fc0c 	mul.w	ip, r0, ip
 800037e:	459c      	cmp	ip, r3
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x8e>
 8000382:	18fb      	adds	r3, r7, r3
 8000384:	f100 32ff 	add.w	r2, r0, #4294967295
 8000388:	f080 80d6 	bcs.w	8000538 <__udivmoddi4+0x230>
 800038c:	459c      	cmp	ip, r3
 800038e:	f240 80d3 	bls.w	8000538 <__udivmoddi4+0x230>
 8000392:	443b      	add	r3, r7
 8000394:	3802      	subs	r0, #2
 8000396:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039a:	eba3 030c 	sub.w	r3, r3, ip
 800039e:	2100      	movs	r1, #0
 80003a0:	b11d      	cbz	r5, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40f3      	lsrs	r3, r6
 80003a4:	2200      	movs	r2, #0
 80003a6:	e9c5 3200 	strd	r3, r2, [r5]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d905      	bls.n	80003be <__udivmoddi4+0xb6>
 80003b2:	b10d      	cbz	r5, 80003b8 <__udivmoddi4+0xb0>
 80003b4:	e9c5 0100 	strd	r0, r1, [r5]
 80003b8:	2100      	movs	r1, #0
 80003ba:	4608      	mov	r0, r1
 80003bc:	e7f5      	b.n	80003aa <__udivmoddi4+0xa2>
 80003be:	fab3 f183 	clz	r1, r3
 80003c2:	2900      	cmp	r1, #0
 80003c4:	d146      	bne.n	8000454 <__udivmoddi4+0x14c>
 80003c6:	4573      	cmp	r3, lr
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0xc8>
 80003ca:	4282      	cmp	r2, r0
 80003cc:	f200 8105 	bhi.w	80005da <__udivmoddi4+0x2d2>
 80003d0:	1a84      	subs	r4, r0, r2
 80003d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	4690      	mov	r8, r2
 80003da:	2d00      	cmp	r5, #0
 80003dc:	d0e5      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003de:	e9c5 4800 	strd	r4, r8, [r5]
 80003e2:	e7e2      	b.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	2a00      	cmp	r2, #0
 80003e6:	f000 8090 	beq.w	800050a <__udivmoddi4+0x202>
 80003ea:	fab2 f682 	clz	r6, r2
 80003ee:	2e00      	cmp	r6, #0
 80003f0:	f040 80a4 	bne.w	800053c <__udivmoddi4+0x234>
 80003f4:	1a8a      	subs	r2, r1, r2
 80003f6:	0c03      	lsrs	r3, r0, #16
 80003f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fc:	b280      	uxth	r0, r0
 80003fe:	b2bc      	uxth	r4, r7
 8000400:	2101      	movs	r1, #1
 8000402:	fbb2 fcfe 	udiv	ip, r2, lr
 8000406:	fb0e 221c 	mls	r2, lr, ip, r2
 800040a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800040e:	fb04 f20c 	mul.w	r2, r4, ip
 8000412:	429a      	cmp	r2, r3
 8000414:	d907      	bls.n	8000426 <__udivmoddi4+0x11e>
 8000416:	18fb      	adds	r3, r7, r3
 8000418:	f10c 38ff 	add.w	r8, ip, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x11c>
 800041e:	429a      	cmp	r2, r3
 8000420:	f200 80e0 	bhi.w	80005e4 <__udivmoddi4+0x2dc>
 8000424:	46c4      	mov	ip, r8
 8000426:	1a9b      	subs	r3, r3, r2
 8000428:	fbb3 f2fe 	udiv	r2, r3, lr
 800042c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000430:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000434:	fb02 f404 	mul.w	r4, r2, r4
 8000438:	429c      	cmp	r4, r3
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x144>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x142>
 8000444:	429c      	cmp	r4, r3
 8000446:	f200 80ca 	bhi.w	80005de <__udivmoddi4+0x2d6>
 800044a:	4602      	mov	r2, r0
 800044c:	1b1b      	subs	r3, r3, r4
 800044e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000452:	e7a5      	b.n	80003a0 <__udivmoddi4+0x98>
 8000454:	f1c1 0620 	rsb	r6, r1, #32
 8000458:	408b      	lsls	r3, r1
 800045a:	fa22 f706 	lsr.w	r7, r2, r6
 800045e:	431f      	orrs	r7, r3
 8000460:	fa0e f401 	lsl.w	r4, lr, r1
 8000464:	fa20 f306 	lsr.w	r3, r0, r6
 8000468:	fa2e fe06 	lsr.w	lr, lr, r6
 800046c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000470:	4323      	orrs	r3, r4
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	fa1f fc87 	uxth.w	ip, r7
 800047a:	fbbe f0f9 	udiv	r0, lr, r9
 800047e:	0c1c      	lsrs	r4, r3, #16
 8000480:	fb09 ee10 	mls	lr, r9, r0, lr
 8000484:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000488:	fb00 fe0c 	mul.w	lr, r0, ip
 800048c:	45a6      	cmp	lr, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	d909      	bls.n	80004a8 <__udivmoddi4+0x1a0>
 8000494:	193c      	adds	r4, r7, r4
 8000496:	f100 3aff 	add.w	sl, r0, #4294967295
 800049a:	f080 809c 	bcs.w	80005d6 <__udivmoddi4+0x2ce>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f240 8099 	bls.w	80005d6 <__udivmoddi4+0x2ce>
 80004a4:	3802      	subs	r0, #2
 80004a6:	443c      	add	r4, r7
 80004a8:	eba4 040e 	sub.w	r4, r4, lr
 80004ac:	fa1f fe83 	uxth.w	lr, r3
 80004b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b4:	fb09 4413 	mls	r4, r9, r3, r4
 80004b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c0:	45a4      	cmp	ip, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x1ce>
 80004c4:	193c      	adds	r4, r7, r4
 80004c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80004ca:	f080 8082 	bcs.w	80005d2 <__udivmoddi4+0x2ca>
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d97f      	bls.n	80005d2 <__udivmoddi4+0x2ca>
 80004d2:	3b02      	subs	r3, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	fba0 ec02 	umull	lr, ip, r0, r2
 80004e2:	4564      	cmp	r4, ip
 80004e4:	4673      	mov	r3, lr
 80004e6:	46e1      	mov	r9, ip
 80004e8:	d362      	bcc.n	80005b0 <__udivmoddi4+0x2a8>
 80004ea:	d05f      	beq.n	80005ac <__udivmoddi4+0x2a4>
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x1fe>
 80004ee:	ebb8 0203 	subs.w	r2, r8, r3
 80004f2:	eb64 0409 	sbc.w	r4, r4, r9
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	fa22 f301 	lsr.w	r3, r2, r1
 80004fe:	431e      	orrs	r6, r3
 8000500:	40cc      	lsrs	r4, r1
 8000502:	e9c5 6400 	strd	r6, r4, [r5]
 8000506:	2100      	movs	r1, #0
 8000508:	e74f      	b.n	80003aa <__udivmoddi4+0xa2>
 800050a:	fbb1 fcf2 	udiv	ip, r1, r2
 800050e:	0c01      	lsrs	r1, r0, #16
 8000510:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000514:	b280      	uxth	r0, r0
 8000516:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800051a:	463b      	mov	r3, r7
 800051c:	4638      	mov	r0, r7
 800051e:	463c      	mov	r4, r7
 8000520:	46b8      	mov	r8, r7
 8000522:	46be      	mov	lr, r7
 8000524:	2620      	movs	r6, #32
 8000526:	fbb1 f1f7 	udiv	r1, r1, r7
 800052a:	eba2 0208 	sub.w	r2, r2, r8
 800052e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000532:	e766      	b.n	8000402 <__udivmoddi4+0xfa>
 8000534:	4601      	mov	r1, r0
 8000536:	e718      	b.n	800036a <__udivmoddi4+0x62>
 8000538:	4610      	mov	r0, r2
 800053a:	e72c      	b.n	8000396 <__udivmoddi4+0x8e>
 800053c:	f1c6 0220 	rsb	r2, r6, #32
 8000540:	fa2e f302 	lsr.w	r3, lr, r2
 8000544:	40b7      	lsls	r7, r6
 8000546:	40b1      	lsls	r1, r6
 8000548:	fa20 f202 	lsr.w	r2, r0, r2
 800054c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000550:	430a      	orrs	r2, r1
 8000552:	fbb3 f8fe 	udiv	r8, r3, lr
 8000556:	b2bc      	uxth	r4, r7
 8000558:	fb0e 3318 	mls	r3, lr, r8, r3
 800055c:	0c11      	lsrs	r1, r2, #16
 800055e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000562:	fb08 f904 	mul.w	r9, r8, r4
 8000566:	40b0      	lsls	r0, r6
 8000568:	4589      	cmp	r9, r1
 800056a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800056e:	b280      	uxth	r0, r0
 8000570:	d93e      	bls.n	80005f0 <__udivmoddi4+0x2e8>
 8000572:	1879      	adds	r1, r7, r1
 8000574:	f108 3cff 	add.w	ip, r8, #4294967295
 8000578:	d201      	bcs.n	800057e <__udivmoddi4+0x276>
 800057a:	4589      	cmp	r9, r1
 800057c:	d81f      	bhi.n	80005be <__udivmoddi4+0x2b6>
 800057e:	eba1 0109 	sub.w	r1, r1, r9
 8000582:	fbb1 f9fe 	udiv	r9, r1, lr
 8000586:	fb09 f804 	mul.w	r8, r9, r4
 800058a:	fb0e 1119 	mls	r1, lr, r9, r1
 800058e:	b292      	uxth	r2, r2
 8000590:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000594:	4542      	cmp	r2, r8
 8000596:	d229      	bcs.n	80005ec <__udivmoddi4+0x2e4>
 8000598:	18ba      	adds	r2, r7, r2
 800059a:	f109 31ff 	add.w	r1, r9, #4294967295
 800059e:	d2c4      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a0:	4542      	cmp	r2, r8
 80005a2:	d2c2      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a4:	f1a9 0102 	sub.w	r1, r9, #2
 80005a8:	443a      	add	r2, r7
 80005aa:	e7be      	b.n	800052a <__udivmoddi4+0x222>
 80005ac:	45f0      	cmp	r8, lr
 80005ae:	d29d      	bcs.n	80004ec <__udivmoddi4+0x1e4>
 80005b0:	ebbe 0302 	subs.w	r3, lr, r2
 80005b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005b8:	3801      	subs	r0, #1
 80005ba:	46e1      	mov	r9, ip
 80005bc:	e796      	b.n	80004ec <__udivmoddi4+0x1e4>
 80005be:	eba7 0909 	sub.w	r9, r7, r9
 80005c2:	4449      	add	r1, r9
 80005c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80005c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80005cc:	fb09 f804 	mul.w	r8, r9, r4
 80005d0:	e7db      	b.n	800058a <__udivmoddi4+0x282>
 80005d2:	4673      	mov	r3, lr
 80005d4:	e77f      	b.n	80004d6 <__udivmoddi4+0x1ce>
 80005d6:	4650      	mov	r0, sl
 80005d8:	e766      	b.n	80004a8 <__udivmoddi4+0x1a0>
 80005da:	4608      	mov	r0, r1
 80005dc:	e6fd      	b.n	80003da <__udivmoddi4+0xd2>
 80005de:	443b      	add	r3, r7
 80005e0:	3a02      	subs	r2, #2
 80005e2:	e733      	b.n	800044c <__udivmoddi4+0x144>
 80005e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e8:	443b      	add	r3, r7
 80005ea:	e71c      	b.n	8000426 <__udivmoddi4+0x11e>
 80005ec:	4649      	mov	r1, r9
 80005ee:	e79c      	b.n	800052a <__udivmoddi4+0x222>
 80005f0:	eba1 0109 	sub.w	r1, r1, r9
 80005f4:	46c4      	mov	ip, r8
 80005f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80005fa:	fb09 f804 	mul.w	r8, r9, r4
 80005fe:	e7c4      	b.n	800058a <__udivmoddi4+0x282>

08000600 <__aeabi_idiv0>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000608:	4b3d      	ldr	r3, [pc, #244]	@ (8000700 <SystemInit+0xfc>)
 800060a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800060e:	4a3c      	ldr	r2, [pc, #240]	@ (8000700 <SystemInit+0xfc>)
 8000610:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000614:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000618:	4b39      	ldr	r3, [pc, #228]	@ (8000700 <SystemInit+0xfc>)
 800061a:	691b      	ldr	r3, [r3, #16]
 800061c:	4a38      	ldr	r2, [pc, #224]	@ (8000700 <SystemInit+0xfc>)
 800061e:	f043 0310 	orr.w	r3, r3, #16
 8000622:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000624:	4b37      	ldr	r3, [pc, #220]	@ (8000704 <SystemInit+0x100>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f003 030f 	and.w	r3, r3, #15
 800062c:	2b06      	cmp	r3, #6
 800062e:	d807      	bhi.n	8000640 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000630:	4b34      	ldr	r3, [pc, #208]	@ (8000704 <SystemInit+0x100>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f023 030f 	bic.w	r3, r3, #15
 8000638:	4a32      	ldr	r2, [pc, #200]	@ (8000704 <SystemInit+0x100>)
 800063a:	f043 0307 	orr.w	r3, r3, #7
 800063e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000640:	4b31      	ldr	r3, [pc, #196]	@ (8000708 <SystemInit+0x104>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a30      	ldr	r2, [pc, #192]	@ (8000708 <SystemInit+0x104>)
 8000646:	f043 0301 	orr.w	r3, r3, #1
 800064a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800064c:	4b2e      	ldr	r3, [pc, #184]	@ (8000708 <SystemInit+0x104>)
 800064e:	2200      	movs	r2, #0
 8000650:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000652:	4b2d      	ldr	r3, [pc, #180]	@ (8000708 <SystemInit+0x104>)
 8000654:	681a      	ldr	r2, [r3, #0]
 8000656:	492c      	ldr	r1, [pc, #176]	@ (8000708 <SystemInit+0x104>)
 8000658:	4b2c      	ldr	r3, [pc, #176]	@ (800070c <SystemInit+0x108>)
 800065a:	4013      	ands	r3, r2
 800065c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800065e:	4b29      	ldr	r3, [pc, #164]	@ (8000704 <SystemInit+0x100>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	f003 0308 	and.w	r3, r3, #8
 8000666:	2b00      	cmp	r3, #0
 8000668:	d007      	beq.n	800067a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800066a:	4b26      	ldr	r3, [pc, #152]	@ (8000704 <SystemInit+0x100>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	f023 030f 	bic.w	r3, r3, #15
 8000672:	4a24      	ldr	r2, [pc, #144]	@ (8000704 <SystemInit+0x100>)
 8000674:	f043 0307 	orr.w	r3, r3, #7
 8000678:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800067a:	4b23      	ldr	r3, [pc, #140]	@ (8000708 <SystemInit+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000680:	4b21      	ldr	r3, [pc, #132]	@ (8000708 <SystemInit+0x104>)
 8000682:	2200      	movs	r2, #0
 8000684:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000686:	4b20      	ldr	r3, [pc, #128]	@ (8000708 <SystemInit+0x104>)
 8000688:	2200      	movs	r2, #0
 800068a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800068c:	4b1e      	ldr	r3, [pc, #120]	@ (8000708 <SystemInit+0x104>)
 800068e:	4a20      	ldr	r2, [pc, #128]	@ (8000710 <SystemInit+0x10c>)
 8000690:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000692:	4b1d      	ldr	r3, [pc, #116]	@ (8000708 <SystemInit+0x104>)
 8000694:	4a1f      	ldr	r2, [pc, #124]	@ (8000714 <SystemInit+0x110>)
 8000696:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000698:	4b1b      	ldr	r3, [pc, #108]	@ (8000708 <SystemInit+0x104>)
 800069a:	4a1f      	ldr	r2, [pc, #124]	@ (8000718 <SystemInit+0x114>)
 800069c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800069e:	4b1a      	ldr	r3, [pc, #104]	@ (8000708 <SystemInit+0x104>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80006a4:	4b18      	ldr	r3, [pc, #96]	@ (8000708 <SystemInit+0x104>)
 80006a6:	4a1c      	ldr	r2, [pc, #112]	@ (8000718 <SystemInit+0x114>)
 80006a8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80006aa:	4b17      	ldr	r3, [pc, #92]	@ (8000708 <SystemInit+0x104>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80006b0:	4b15      	ldr	r3, [pc, #84]	@ (8000708 <SystemInit+0x104>)
 80006b2:	4a19      	ldr	r2, [pc, #100]	@ (8000718 <SystemInit+0x114>)
 80006b4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80006b6:	4b14      	ldr	r3, [pc, #80]	@ (8000708 <SystemInit+0x104>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80006bc:	4b12      	ldr	r3, [pc, #72]	@ (8000708 <SystemInit+0x104>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a11      	ldr	r2, [pc, #68]	@ (8000708 <SystemInit+0x104>)
 80006c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80006c6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000708 <SystemInit+0x104>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006ce:	4b13      	ldr	r3, [pc, #76]	@ (800071c <SystemInit+0x118>)
 80006d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006d2:	4a12      	ldr	r2, [pc, #72]	@ (800071c <SystemInit+0x118>)
 80006d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006d8:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006da:	4b11      	ldr	r3, [pc, #68]	@ (8000720 <SystemInit+0x11c>)
 80006dc:	681a      	ldr	r2, [r3, #0]
 80006de:	4b11      	ldr	r3, [pc, #68]	@ (8000724 <SystemInit+0x120>)
 80006e0:	4013      	ands	r3, r2
 80006e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80006e6:	d202      	bcs.n	80006ee <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000728 <SystemInit+0x124>)
 80006ea:	2201      	movs	r2, #1
 80006ec:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006ee:	4b0f      	ldr	r3, [pc, #60]	@ (800072c <SystemInit+0x128>)
 80006f0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80006f4:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006f6:	bf00      	nop
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr
 8000700:	e000ed00 	.word	0xe000ed00
 8000704:	52002000 	.word	0x52002000
 8000708:	58024400 	.word	0x58024400
 800070c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000710:	02020200 	.word	0x02020200
 8000714:	01ff0000 	.word	0x01ff0000
 8000718:	01010280 	.word	0x01010280
 800071c:	580000c0 	.word	0x580000c0
 8000720:	5c001000 	.word	0x5c001000
 8000724:	ffff0000 	.word	0xffff0000
 8000728:	51008108 	.word	0x51008108
 800072c:	52004000 	.word	0x52004000

08000730 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b086      	sub	sp, #24
 8000734:	af02      	add	r7, sp, #8
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000736:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800073a:	60fb      	str	r3, [r7, #12]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800073c:	bf00      	nop
 800073e:	4b51      	ldr	r3, [pc, #324]	@ (8000884 <main+0x154>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000746:	2b00      	cmp	r3, #0
 8000748:	d004      	beq.n	8000754 <main+0x24>
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	1e5a      	subs	r2, r3, #1
 800074e:	60fa      	str	r2, [r7, #12]
 8000750:	2b00      	cmp	r3, #0
 8000752:	dcf4      	bgt.n	800073e <main+0xe>
  if ( timeout < 0 )
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	2b00      	cmp	r3, #0
 8000758:	da01      	bge.n	800075e <main+0x2e>
  {
  Error_Handler();
 800075a:	f000 fa4d 	bl	8000bf8 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800075e:	f001 f8c5 	bl	80018ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000762:	f000 f8a1 	bl	80008a8 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000766:	f000 f91b 	bl	80009a0 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800076a:	4b46      	ldr	r3, [pc, #280]	@ (8000884 <main+0x154>)
 800076c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000770:	4a44      	ldr	r2, [pc, #272]	@ (8000884 <main+0x154>)
 8000772:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000776:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800077a:	4b42      	ldr	r3, [pc, #264]	@ (8000884 <main+0x154>)
 800077c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000780:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000784:	607b      	str	r3, [r7, #4]
 8000786:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000788:	2000      	movs	r0, #0
 800078a:	f001 fce7 	bl	800215c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800078e:	2100      	movs	r1, #0
 8000790:	2000      	movs	r0, #0
 8000792:	f001 fcfd 	bl	8002190 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000796:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800079a:	60fb      	str	r3, [r7, #12]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800079c:	bf00      	nop
 800079e:	4b39      	ldr	r3, [pc, #228]	@ (8000884 <main+0x154>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d104      	bne.n	80007b4 <main+0x84>
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	1e5a      	subs	r2, r3, #1
 80007ae:	60fa      	str	r2, [r7, #12]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	dcf4      	bgt.n	800079e <main+0x6e>
if ( timeout < 0 )
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	da01      	bge.n	80007be <main+0x8e>
{
Error_Handler();
 80007ba:	f000 fa1d 	bl	8000bf8 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007be:	f000 f975 	bl	8000aac <MX_GPIO_Init>
  MX_SPI1_Init();
 80007c2:	f000 f91d 	bl	8000a00 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 80007c6:	2000      	movs	r0, #0
 80007c8:	f000 fec8 	bl	800155c <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 80007cc:	2001      	movs	r0, #1
 80007ce:	f000 fec5 	bl	800155c <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80007d2:	2002      	movs	r0, #2
 80007d4:	f000 fec2 	bl	800155c <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80007d8:	2101      	movs	r1, #1
 80007da:	2000      	movs	r0, #0
 80007dc:	f000 ff34 	bl	8001648 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80007e0:	4b29      	ldr	r3, [pc, #164]	@ (8000888 <main+0x158>)
 80007e2:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007e6:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80007e8:	4b27      	ldr	r3, [pc, #156]	@ (8000888 <main+0x158>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80007ee:	4b26      	ldr	r3, [pc, #152]	@ (8000888 <main+0x158>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80007f4:	4b24      	ldr	r3, [pc, #144]	@ (8000888 <main+0x158>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80007fa:	4b23      	ldr	r3, [pc, #140]	@ (8000888 <main+0x158>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000800:	4921      	ldr	r1, [pc, #132]	@ (8000888 <main+0x158>)
 8000802:	2000      	movs	r0, #0
 8000804:	f000 ffb0 	bl	8001768 <BSP_COM_Init>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <main+0xe2>
  {
    Error_Handler();
 800080e:	f000 f9f3 	bl	8000bf8 <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  	  uint8_t counter = 0;
 8000812:	2300      	movs	r3, #0
 8000814:	72fb      	strb	r3, [r7, #11]
  	  // CS, CE;
  	  Set_NRF24(&nrf, &hspi1, GPIOG, GPIO_PIN_12, GPIOG, GPIO_PIN_14);
 8000816:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800081a:	9301      	str	r3, [sp, #4]
 800081c:	4b1b      	ldr	r3, [pc, #108]	@ (800088c <main+0x15c>)
 800081e:	9300      	str	r3, [sp, #0]
 8000820:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000824:	4a19      	ldr	r2, [pc, #100]	@ (800088c <main+0x15c>)
 8000826:	491a      	ldr	r1, [pc, #104]	@ (8000890 <main+0x160>)
 8000828:	481a      	ldr	r0, [pc, #104]	@ (8000894 <main+0x164>)
 800082a:	f000 fa1f 	bl	8000c6c <Set_NRF24>
  	  if (NRF24_Init(&nrf) != NRF_OK) {
 800082e:	4819      	ldr	r0, [pc, #100]	@ (8000894 <main+0x164>)
 8000830:	f000 fc62 	bl	80010f8 <NRF24_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <main+0x10e>
  			Error_Handler();
 800083a:	f000 f9dd 	bl	8000bf8 <Error_Handler>
  	  }
  	  Tx_mode(&nrf,TxAddress);
 800083e:	4916      	ldr	r1, [pc, #88]	@ (8000898 <main+0x168>)
 8000840:	4814      	ldr	r0, [pc, #80]	@ (8000894 <main+0x164>)
 8000842:	f000 fd94 	bl	800136e <Tx_mode>

  	  NRF24_WriteRegisterByte(&nrf, NRF_REG_RF_CH, 0x02);
 8000846:	2202      	movs	r2, #2
 8000848:	2105      	movs	r1, #5
 800084a:	4812      	ldr	r0, [pc, #72]	@ (8000894 <main+0x164>)
 800084c:	f000 fafd 	bl	8000e4a <NRF24_WriteRegisterByte>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ret = NRF24_TransmitAndWait(&nrf,txData,sizeof(txData));
 8000850:	2218      	movs	r2, #24
 8000852:	4912      	ldr	r1, [pc, #72]	@ (800089c <main+0x16c>)
 8000854:	480f      	ldr	r0, [pc, #60]	@ (8000894 <main+0x164>)
 8000856:	f000 fd41 	bl	80012dc <NRF24_TransmitAndWait>
 800085a:	4603      	mov	r3, r0
 800085c:	72bb      	strb	r3, [r7, #10]


	  if(ret == NRF_OK){
 800085e:	7abb      	ldrb	r3, [r7, #10]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d104      	bne.n	800086e <main+0x13e>
		  HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_0);
 8000864:	2101      	movs	r1, #1
 8000866:	480e      	ldr	r0, [pc, #56]	@ (80008a0 <main+0x170>)
 8000868:	f001 fc5d 	bl	8002126 <HAL_GPIO_TogglePin>
 800086c:	e004      	b.n	8000878 <main+0x148>
	  }else{
		  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_14);
 800086e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000872:	480c      	ldr	r0, [pc, #48]	@ (80008a4 <main+0x174>)
 8000874:	f001 fc57 	bl	8002126 <HAL_GPIO_TogglePin>
	  }

	  HAL_Delay(400);
 8000878:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800087c:	f001 f8c8 	bl	8001a10 <HAL_Delay>
	  ret = NRF24_TransmitAndWait(&nrf,txData,sizeof(txData));
 8000880:	e7e6      	b.n	8000850 <main+0x120>
 8000882:	bf00      	nop
 8000884:	58024400 	.word	0x58024400
 8000888:	24000068 	.word	0x24000068
 800088c:	58021800 	.word	0x58021800
 8000890:	24000078 	.word	0x24000078
 8000894:	24000100 	.word	0x24000100
 8000898:	24000008 	.word	0x24000008
 800089c:	24000010 	.word	0x24000010
 80008a0:	58021000 	.word	0x58021000
 80008a4:	58020400 	.word	0x58020400

080008a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b09c      	sub	sp, #112	@ 0x70
 80008ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008b2:	224c      	movs	r2, #76	@ 0x4c
 80008b4:	2100      	movs	r1, #0
 80008b6:	4618      	mov	r0, r3
 80008b8:	f006 fc74 	bl	80071a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008bc:	1d3b      	adds	r3, r7, #4
 80008be:	2220      	movs	r2, #32
 80008c0:	2100      	movs	r1, #0
 80008c2:	4618      	mov	r0, r3
 80008c4:	f006 fc6e 	bl	80071a4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80008c8:	2004      	movs	r0, #4
 80008ca:	f001 fc75 	bl	80021b8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008ce:	2300      	movs	r3, #0
 80008d0:	603b      	str	r3, [r7, #0]
 80008d2:	4b31      	ldr	r3, [pc, #196]	@ (8000998 <SystemClock_Config+0xf0>)
 80008d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008d6:	4a30      	ldr	r2, [pc, #192]	@ (8000998 <SystemClock_Config+0xf0>)
 80008d8:	f023 0301 	bic.w	r3, r3, #1
 80008dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80008de:	4b2e      	ldr	r3, [pc, #184]	@ (8000998 <SystemClock_Config+0xf0>)
 80008e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008e2:	f003 0301 	and.w	r3, r3, #1
 80008e6:	603b      	str	r3, [r7, #0]
 80008e8:	4b2c      	ldr	r3, [pc, #176]	@ (800099c <SystemClock_Config+0xf4>)
 80008ea:	699b      	ldr	r3, [r3, #24]
 80008ec:	4a2b      	ldr	r2, [pc, #172]	@ (800099c <SystemClock_Config+0xf4>)
 80008ee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008f2:	6193      	str	r3, [r2, #24]
 80008f4:	4b29      	ldr	r3, [pc, #164]	@ (800099c <SystemClock_Config+0xf4>)
 80008f6:	699b      	ldr	r3, [r3, #24]
 80008f8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008fc:	603b      	str	r3, [r7, #0]
 80008fe:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000900:	bf00      	nop
 8000902:	4b26      	ldr	r3, [pc, #152]	@ (800099c <SystemClock_Config+0xf4>)
 8000904:	699b      	ldr	r3, [r3, #24]
 8000906:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800090a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800090e:	d1f8      	bne.n	8000902 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000910:	2302      	movs	r3, #2
 8000912:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000914:	2301      	movs	r3, #1
 8000916:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000918:	2340      	movs	r3, #64	@ 0x40
 800091a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800091c:	2302      	movs	r3, #2
 800091e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000920:	2300      	movs	r3, #0
 8000922:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000924:	2304      	movs	r3, #4
 8000926:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 25;
 8000928:	2319      	movs	r3, #25
 800092a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800092c:	2302      	movs	r3, #2
 800092e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000930:	2305      	movs	r3, #5
 8000932:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000934:	2302      	movs	r3, #2
 8000936:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000938:	230c      	movs	r3, #12
 800093a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800093c:	2300      	movs	r3, #0
 800093e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000940:	2300      	movs	r3, #0
 8000942:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000944:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000948:	4618      	mov	r0, r3
 800094a:	f001 fc8f 	bl	800226c <HAL_RCC_OscConfig>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000954:	f000 f950 	bl	8000bf8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000958:	233f      	movs	r3, #63	@ 0x3f
 800095a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800095c:	2303      	movs	r3, #3
 800095e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000960:	2300      	movs	r3, #0
 8000962:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000964:	2300      	movs	r3, #0
 8000966:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000968:	2340      	movs	r3, #64	@ 0x40
 800096a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800096c:	2340      	movs	r3, #64	@ 0x40
 800096e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000970:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000974:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000976:	2340      	movs	r3, #64	@ 0x40
 8000978:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800097a:	1d3b      	adds	r3, r7, #4
 800097c:	2102      	movs	r1, #2
 800097e:	4618      	mov	r0, r3
 8000980:	f002 f8ce 	bl	8002b20 <HAL_RCC_ClockConfig>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800098a:	f000 f935 	bl	8000bf8 <Error_Handler>
  }
}
 800098e:	bf00      	nop
 8000990:	3770      	adds	r7, #112	@ 0x70
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	58000400 	.word	0x58000400
 800099c:	58024800 	.word	0x58024800

080009a0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b0b0      	sub	sp, #192	@ 0xc0
 80009a4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009a6:	463b      	mov	r3, r7
 80009a8:	22c0      	movs	r2, #192	@ 0xc0
 80009aa:	2100      	movs	r1, #0
 80009ac:	4618      	mov	r0, r3
 80009ae:	f006 fbf9 	bl	80071a4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3|RCC_PERIPHCLK_SPI1;
 80009b2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80009b6:	f04f 0300 	mov.w	r3, #0
 80009ba:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 80009be:	2304      	movs	r3, #4
 80009c0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 80009c2:	2309      	movs	r3, #9
 80009c4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80009c6:	2302      	movs	r3, #2
 80009c8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80009ca:	2302      	movs	r3, #2
 80009cc:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80009ce:	2302      	movs	r3, #2
 80009d0:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80009d2:	23c0      	movs	r3, #192	@ 0xc0
 80009d4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80009d6:	2320      	movs	r3, #32
 80009d8:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 80009da:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80009de:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 80009e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009e4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009e6:	463b      	mov	r3, r7
 80009e8:	4618      	mov	r0, r3
 80009ea:	f002 fc25 	bl	8003238 <HAL_RCCEx_PeriphCLKConfig>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 80009f4:	f000 f900 	bl	8000bf8 <Error_Handler>
  }
}
 80009f8:	bf00      	nop
 80009fa:	37c0      	adds	r7, #192	@ 0xc0
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a04:	4b27      	ldr	r3, [pc, #156]	@ (8000aa4 <MX_SPI1_Init+0xa4>)
 8000a06:	4a28      	ldr	r2, [pc, #160]	@ (8000aa8 <MX_SPI1_Init+0xa8>)
 8000a08:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a0a:	4b26      	ldr	r3, [pc, #152]	@ (8000aa4 <MX_SPI1_Init+0xa4>)
 8000a0c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000a10:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a12:	4b24      	ldr	r3, [pc, #144]	@ (8000aa4 <MX_SPI1_Init+0xa4>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a18:	4b22      	ldr	r3, [pc, #136]	@ (8000aa4 <MX_SPI1_Init+0xa4>)
 8000a1a:	2207      	movs	r2, #7
 8000a1c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a1e:	4b21      	ldr	r3, [pc, #132]	@ (8000aa4 <MX_SPI1_Init+0xa4>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a24:	4b1f      	ldr	r3, [pc, #124]	@ (8000aa4 <MX_SPI1_Init+0xa4>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a2a:	4b1e      	ldr	r3, [pc, #120]	@ (8000aa4 <MX_SPI1_Init+0xa4>)
 8000a2c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000a30:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000a32:	4b1c      	ldr	r3, [pc, #112]	@ (8000aa4 <MX_SPI1_Init+0xa4>)
 8000a34:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8000a38:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a3a:	4b1a      	ldr	r3, [pc, #104]	@ (8000aa4 <MX_SPI1_Init+0xa4>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a40:	4b18      	ldr	r3, [pc, #96]	@ (8000aa4 <MX_SPI1_Init+0xa4>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a46:	4b17      	ldr	r3, [pc, #92]	@ (8000aa4 <MX_SPI1_Init+0xa4>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000a4c:	4b15      	ldr	r3, [pc, #84]	@ (8000aa4 <MX_SPI1_Init+0xa4>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000a52:	4b14      	ldr	r3, [pc, #80]	@ (8000aa4 <MX_SPI1_Init+0xa4>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000a58:	4b12      	ldr	r3, [pc, #72]	@ (8000aa4 <MX_SPI1_Init+0xa4>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000a5e:	4b11      	ldr	r3, [pc, #68]	@ (8000aa4 <MX_SPI1_Init+0xa4>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a64:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa4 <MX_SPI1_Init+0xa4>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa4 <MX_SPI1_Init+0xa4>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000a70:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa4 <MX_SPI1_Init+0xa4>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000a76:	4b0b      	ldr	r3, [pc, #44]	@ (8000aa4 <MX_SPI1_Init+0xa4>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000a7c:	4b09      	ldr	r3, [pc, #36]	@ (8000aa4 <MX_SPI1_Init+0xa4>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_ENABLE;
 8000a82:	4b08      	ldr	r3, [pc, #32]	@ (8000aa4 <MX_SPI1_Init+0xa4>)
 8000a84:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000a88:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000a8a:	4b06      	ldr	r3, [pc, #24]	@ (8000aa4 <MX_SPI1_Init+0xa4>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a90:	4804      	ldr	r0, [pc, #16]	@ (8000aa4 <MX_SPI1_Init+0xa4>)
 8000a92:	f004 f9fd 	bl	8004e90 <HAL_SPI_Init>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000a9c:	f000 f8ac 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000aa0:	bf00      	nop
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	24000078 	.word	0x24000078
 8000aa8:	40013000 	.word	0x40013000

08000aac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b08a      	sub	sp, #40	@ 0x28
 8000ab0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab2:	f107 0314 	add.w	r3, r7, #20
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	605a      	str	r2, [r3, #4]
 8000abc:	609a      	str	r2, [r3, #8]
 8000abe:	60da      	str	r2, [r3, #12]
 8000ac0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac2:	4b48      	ldr	r3, [pc, #288]	@ (8000be4 <MX_GPIO_Init+0x138>)
 8000ac4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ac8:	4a46      	ldr	r2, [pc, #280]	@ (8000be4 <MX_GPIO_Init+0x138>)
 8000aca:	f043 0301 	orr.w	r3, r3, #1
 8000ace:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ad2:	4b44      	ldr	r3, [pc, #272]	@ (8000be4 <MX_GPIO_Init+0x138>)
 8000ad4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ad8:	f003 0301 	and.w	r3, r3, #1
 8000adc:	613b      	str	r3, [r7, #16]
 8000ade:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ae0:	4b40      	ldr	r3, [pc, #256]	@ (8000be4 <MX_GPIO_Init+0x138>)
 8000ae2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ae6:	4a3f      	ldr	r2, [pc, #252]	@ (8000be4 <MX_GPIO_Init+0x138>)
 8000ae8:	f043 0310 	orr.w	r3, r3, #16
 8000aec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000af0:	4b3c      	ldr	r3, [pc, #240]	@ (8000be4 <MX_GPIO_Init+0x138>)
 8000af2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000af6:	f003 0310 	and.w	r3, r3, #16
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afe:	4b39      	ldr	r3, [pc, #228]	@ (8000be4 <MX_GPIO_Init+0x138>)
 8000b00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b04:	4a37      	ldr	r2, [pc, #220]	@ (8000be4 <MX_GPIO_Init+0x138>)
 8000b06:	f043 0302 	orr.w	r3, r3, #2
 8000b0a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b0e:	4b35      	ldr	r3, [pc, #212]	@ (8000be4 <MX_GPIO_Init+0x138>)
 8000b10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b14:	f003 0302 	and.w	r3, r3, #2
 8000b18:	60bb      	str	r3, [r7, #8]
 8000b1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b1c:	4b31      	ldr	r3, [pc, #196]	@ (8000be4 <MX_GPIO_Init+0x138>)
 8000b1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b22:	4a30      	ldr	r2, [pc, #192]	@ (8000be4 <MX_GPIO_Init+0x138>)
 8000b24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b28:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b2c:	4b2d      	ldr	r3, [pc, #180]	@ (8000be4 <MX_GPIO_Init+0x138>)
 8000b2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b36:	607b      	str	r3, [r7, #4]
 8000b38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b40:	4829      	ldr	r0, [pc, #164]	@ (8000be8 <MX_GPIO_Init+0x13c>)
 8000b42:	f001 fad7 	bl	80020f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(tCE_GPIO_Port, tCE_Pin, GPIO_PIN_RESET);
 8000b46:	2200      	movs	r2, #0
 8000b48:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000b4c:	4827      	ldr	r0, [pc, #156]	@ (8000bec <MX_GPIO_Init+0x140>)
 8000b4e:	f001 fad1 	bl	80020f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, CSN_Pin|CE_Pin, GPIO_PIN_RESET);
 8000b52:	2200      	movs	r2, #0
 8000b54:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
 8000b58:	4825      	ldr	r0, [pc, #148]	@ (8000bf0 <MX_GPIO_Init+0x144>)
 8000b5a:	f001 facb 	bl	80020f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000b5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b64:	2301      	movs	r3, #1
 8000b66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	4619      	mov	r1, r3
 8000b76:	481c      	ldr	r0, [pc, #112]	@ (8000be8 <MX_GPIO_Init+0x13c>)
 8000b78:	f001 f90c 	bl	8001d94 <HAL_GPIO_Init>

  /*Configure GPIO pin : tCE_Pin */
  GPIO_InitStruct.Pin = tCE_Pin;
 8000b7c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000b80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b82:	2301      	movs	r3, #1
 8000b84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(tCE_GPIO_Port, &GPIO_InitStruct);
 8000b8e:	f107 0314 	add.w	r3, r7, #20
 8000b92:	4619      	mov	r1, r3
 8000b94:	4815      	ldr	r0, [pc, #84]	@ (8000bec <MX_GPIO_Init+0x140>)
 8000b96:	f001 f8fd 	bl	8001d94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000b9a:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000b9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000bac:	230a      	movs	r3, #10
 8000bae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	480f      	ldr	r0, [pc, #60]	@ (8000bf4 <MX_GPIO_Init+0x148>)
 8000bb8:	f001 f8ec 	bl	8001d94 <HAL_GPIO_Init>

  /*Configure GPIO pins : CSN_Pin CE_Pin */
  GPIO_InitStruct.Pin = CSN_Pin|CE_Pin;
 8000bbc:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8000bc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bce:	f107 0314 	add.w	r3, r7, #20
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4806      	ldr	r0, [pc, #24]	@ (8000bf0 <MX_GPIO_Init+0x144>)
 8000bd6:	f001 f8dd 	bl	8001d94 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000bda:	bf00      	nop
 8000bdc:	3728      	adds	r7, #40	@ 0x28
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	58024400 	.word	0x58024400
 8000be8:	58021000 	.word	0x58021000
 8000bec:	58020400 	.word	0x58020400
 8000bf0:	58021800 	.word	0x58021800
 8000bf4:	58020000 	.word	0x58020000

08000bf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bfc:	b672      	cpsid	i
}
 8000bfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c00:	bf00      	nop
 8000c02:	e7fd      	b.n	8000c00 <Error_Handler+0x8>

08000c04 <wait>:
uint16_t NRF_CE_Pin;//Pino do CE do NRF
uint32_t CPU_Freq = 0x00; //Variável para salvar a frequência da CPU
int current_mode = NRF_MODE_POWERDOWN; // Modo atual do NRF


void wait(uint64_t us) {
 8000c04:	b5b0      	push	{r4, r5, r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	e9c7 0100 	strd	r0, r1, [r7]
	uint32_t volatile cycles = CPU_Freq * us / 1000000; //Quantos ciclos de CPU deverão ser esperados para alcancar tal tempo
 8000c0e:	4915      	ldr	r1, [pc, #84]	@ (8000c64 <wait+0x60>)
 8000c10:	6809      	ldr	r1, [r1, #0]
 8000c12:	2000      	movs	r0, #0
 8000c14:	460a      	mov	r2, r1
 8000c16:	4603      	mov	r3, r0
 8000c18:	6839      	ldr	r1, [r7, #0]
 8000c1a:	fb03 f001 	mul.w	r0, r3, r1
 8000c1e:	6879      	ldr	r1, [r7, #4]
 8000c20:	fb02 f101 	mul.w	r1, r2, r1
 8000c24:	4401      	add	r1, r0
 8000c26:	6838      	ldr	r0, [r7, #0]
 8000c28:	fba0 4502 	umull	r4, r5, r0, r2
 8000c2c:	194b      	adds	r3, r1, r5
 8000c2e:	461d      	mov	r5, r3
 8000c30:	4a0d      	ldr	r2, [pc, #52]	@ (8000c68 <wait+0x64>)
 8000c32:	f04f 0300 	mov.w	r3, #0
 8000c36:	4620      	mov	r0, r4
 8000c38:	4629      	mov	r1, r5
 8000c3a:	f7ff fb4d 	bl	80002d8 <__aeabi_uldivmod>
 8000c3e:	4602      	mov	r2, r0
 8000c40:	460b      	mov	r3, r1
 8000c42:	4613      	mov	r3, r2
 8000c44:	60fb      	str	r3, [r7, #12]
	uint32_t volatile current = 0; //Quantos se passaram
 8000c46:	2300      	movs	r3, #0
 8000c48:	60bb      	str	r3, [r7, #8]
	while (current <= cycles) {
 8000c4a:	e002      	b.n	8000c52 <wait+0x4e>
		current++;
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	3301      	adds	r3, #1
 8000c50:	60bb      	str	r3, [r7, #8]
	while (current <= cycles) {
 8000c52:	68ba      	ldr	r2, [r7, #8]
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	429a      	cmp	r2, r3
 8000c58:	d9f8      	bls.n	8000c4c <wait+0x48>
	}
}
 8000c5a:	bf00      	nop
 8000c5c:	bf00      	nop
 8000c5e:	3710      	adds	r7, #16
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bdb0      	pop	{r4, r5, r7, pc}
 8000c64:	24000114 	.word	0x24000114
 8000c68:	000f4240 	.word	0x000f4240

08000c6c <Set_NRF24>:

void Set_NRF24(NRF24 *nrf, SPI_HandleTypeDef *handle, GPIO_TypeDef *PortCS,
		uint16_t PinCS, GPIO_TypeDef *PortCE, uint16_t PinCE) {
 8000c6c:	b480      	push	{r7}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
 8000c78:	807b      	strh	r3, [r7, #2]
	nrf->spiHandle = handle;
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	68ba      	ldr	r2, [r7, #8]
 8000c7e:	601a      	str	r2, [r3, #0]
	nrf->csPinBank = PortCS;
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	687a      	ldr	r2, [r7, #4]
 8000c84:	605a      	str	r2, [r3, #4]
	nrf->cePinBank = PortCE;
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	69ba      	ldr	r2, [r7, #24]
 8000c8a:	609a      	str	r2, [r3, #8]
	nrf->csPin = PinCS;
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	887a      	ldrh	r2, [r7, #2]
 8000c90:	819a      	strh	r2, [r3, #12]
	nrf->cePin = PinCE;
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	8bba      	ldrh	r2, [r7, #28]
 8000c96:	81da      	strh	r2, [r3, #14]
	nrf->mode = NRF_MODE_POWERDOWN;
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	821a      	strh	r2, [r3, #16]
}
 8000c9e:	bf00      	nop
 8000ca0:	3714      	adds	r7, #20
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr

08000caa <NRF24_SendCommand>:

//nao sei se vc esqueceu ou tinha a intencao de mudar msm mas coloquei
NRF_Status NRF24_SendCommand(NRF24 *nrf, uint8_t cmd) {
 8000caa:	b580      	push	{r7, lr}
 8000cac:	b086      	sub	sp, #24
 8000cae:	af02      	add	r7, sp, #8
 8000cb0:	6078      	str	r0, [r7, #4]
 8000cb2:	460b      	mov	r3, r1
 8000cb4:	70fb      	strb	r3, [r7, #3]
	NRF_Status ret = NRF_OK;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	73fb      	strb	r3, [r7, #15]
	uint8_t status;

	HAL_GPIO_WritePin(nrf->csPinBank, nrf->csPin, GPIO_PIN_RESET); //csn_reset()
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6858      	ldr	r0, [r3, #4]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	899b      	ldrh	r3, [r3, #12]
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	f001 fa15 	bl	80020f4 <HAL_GPIO_WritePin>
	ret = (NRF_Status) HAL_SPI_TransmitReceive(nrf->spiHandle, &cmd, &status, 1,
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6818      	ldr	r0, [r3, #0]
 8000cce:	f107 020e 	add.w	r2, r7, #14
 8000cd2:	1cf9      	adds	r1, r7, #3
 8000cd4:	230a      	movs	r3, #10
 8000cd6:	9300      	str	r3, [sp, #0]
 8000cd8:	2301      	movs	r3, #1
 8000cda:	f004 fe5d 	bl	8005998 <HAL_SPI_TransmitReceive>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	73fb      	strb	r3, [r7, #15]
			NRF_SPI_TIMEOUT_TIME); //Envia o comando e retorna o status ********************************************
	if (ret != NRF_OK) { //Verifica se o comando foi enviado corretamente
 8000ce2:	7bfb      	ldrb	r3, [r7, #15]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <NRF24_SendCommand+0x42>
		return ret;
 8000ce8:	7bfb      	ldrb	r3, [r7, #15]
 8000cea:	e008      	b.n	8000cfe <NRF24_SendCommand+0x54>
	}
	HAL_GPIO_WritePin(nrf->csPinBank, nrf->csPin, GPIO_PIN_SET); //csn_set()
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6858      	ldr	r0, [r3, #4]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	899b      	ldrh	r3, [r3, #12]
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	f001 f9fc 	bl	80020f4 <HAL_GPIO_WritePin>

	return ret;
 8000cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3710      	adds	r7, #16
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <NRF24_SendWriteCommand>:

NRF_Status NRF24_SendWriteCommand(NRF24 *nrf, uint8_t cmd, uint8_t *write,
		uint8_t length) {
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b088      	sub	sp, #32
 8000d0a:	af02      	add	r7, sp, #8
 8000d0c:	60f8      	str	r0, [r7, #12]
 8000d0e:	607a      	str	r2, [r7, #4]
 8000d10:	461a      	mov	r2, r3
 8000d12:	460b      	mov	r3, r1
 8000d14:	72fb      	strb	r3, [r7, #11]
 8000d16:	4613      	mov	r3, r2
 8000d18:	72bb      	strb	r3, [r7, #10]
	NRF_Status ret = NRF_OK;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	75fb      	strb	r3, [r7, #23]
	uint8_t status;

	HAL_GPIO_WritePin(nrf->csPinBank, nrf->csPin, GPIO_PIN_RESET); //seleciona o dispositivo
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	6858      	ldr	r0, [r3, #4]
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	899b      	ldrh	r3, [r3, #12]
 8000d26:	2200      	movs	r2, #0
 8000d28:	4619      	mov	r1, r3
 8000d2a:	f001 f9e3 	bl	80020f4 <HAL_GPIO_WritePin>
	ret = (NRF_Status) HAL_SPI_TransmitReceive(nrf->spiHandle, &cmd, &status, 1,
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	6818      	ldr	r0, [r3, #0]
 8000d32:	f107 0216 	add.w	r2, r7, #22
 8000d36:	f107 010b 	add.w	r1, r7, #11
 8000d3a:	230a      	movs	r3, #10
 8000d3c:	9300      	str	r3, [sp, #0]
 8000d3e:	2301      	movs	r3, #1
 8000d40:	f004 fe2a 	bl	8005998 <HAL_SPI_TransmitReceive>
 8000d44:	4603      	mov	r3, r0
 8000d46:	75fb      	strb	r3, [r7, #23]
	NRF_SPI_TIMEOUT_TIME);
	if(ret != NRF_OK){
 8000d48:	7dfb      	ldrb	r3, [r7, #23]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d009      	beq.n	8000d62 <NRF24_SendWriteCommand+0x5c>
		HAL_GPIO_WritePin(nrf->csPinBank, nrf->csPin, GPIO_PIN_SET);
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	6858      	ldr	r0, [r3, #4]
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	899b      	ldrh	r3, [r3, #12]
 8000d56:	2201      	movs	r2, #1
 8000d58:	4619      	mov	r1, r3
 8000d5a:	f001 f9cb 	bl	80020f4 <HAL_GPIO_WritePin>
		return ret;
 8000d5e:	7dfb      	ldrb	r3, [r7, #23]
 8000d60:	e012      	b.n	8000d88 <NRF24_SendWriteCommand+0x82>
	}
	ret = (NRF_Status) HAL_SPI_Transmit(nrf->spiHandle, write, length,
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	6818      	ldr	r0, [r3, #0]
 8000d66:	7abb      	ldrb	r3, [r7, #10]
 8000d68:	b29a      	uxth	r2, r3
 8000d6a:	230a      	movs	r3, #10
 8000d6c:	6879      	ldr	r1, [r7, #4]
 8000d6e:	f004 f9b3 	bl	80050d8 <HAL_SPI_Transmit>
 8000d72:	4603      	mov	r3, r0
 8000d74:	75fb      	strb	r3, [r7, #23]
	NRF_SPI_TIMEOUT_TIME);
	HAL_GPIO_WritePin(nrf->csPinBank, nrf->csPin, GPIO_PIN_SET);
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	6858      	ldr	r0, [r3, #4]
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	899b      	ldrh	r3, [r3, #12]
 8000d7e:	2201      	movs	r2, #1
 8000d80:	4619      	mov	r1, r3
 8000d82:	f001 f9b7 	bl	80020f4 <HAL_GPIO_WritePin>
	return ret;
 8000d86:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3718      	adds	r7, #24
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <NRF24_SendReadCommand>:

NRF_Status NRF24_SendReadCommand(NRF24 *nrf, uint8_t cmd, uint8_t *read,
		uint8_t length) {
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b088      	sub	sp, #32
 8000d94:	af02      	add	r7, sp, #8
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	607a      	str	r2, [r7, #4]
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	460b      	mov	r3, r1
 8000d9e:	72fb      	strb	r3, [r7, #11]
 8000da0:	4613      	mov	r3, r2
 8000da2:	72bb      	strb	r3, [r7, #10]
	NRF_Status ret = NRF_OK;
 8000da4:	2300      	movs	r3, #0
 8000da6:	75fb      	strb	r3, [r7, #23]
	uint8_t status;

	HAL_GPIO_WritePin(nrf->csPinBank, nrf->csPin, GPIO_PIN_RESET);
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	6858      	ldr	r0, [r3, #4]
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	899b      	ldrh	r3, [r3, #12]
 8000db0:	2200      	movs	r2, #0
 8000db2:	4619      	mov	r1, r3
 8000db4:	f001 f99e 	bl	80020f4 <HAL_GPIO_WritePin>

	ret = (NRF_Status) HAL_SPI_TransmitReceive(nrf->spiHandle, &cmd, &status, 1,
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	6818      	ldr	r0, [r3, #0]
 8000dbc:	f107 0216 	add.w	r2, r7, #22
 8000dc0:	f107 010b 	add.w	r1, r7, #11
 8000dc4:	230a      	movs	r3, #10
 8000dc6:	9300      	str	r3, [sp, #0]
 8000dc8:	2301      	movs	r3, #1
 8000dca:	f004 fde5 	bl	8005998 <HAL_SPI_TransmitReceive>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	75fb      	strb	r3, [r7, #23]
	NRF_SPI_TIMEOUT_TIME);
	if(ret != NRF_OK){
 8000dd2:	7dfb      	ldrb	r3, [r7, #23]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d009      	beq.n	8000dec <NRF24_SendReadCommand+0x5c>
		HAL_GPIO_WritePin(nrf->csPinBank, nrf->csPin, GPIO_PIN_SET);
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	6858      	ldr	r0, [r3, #4]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	899b      	ldrh	r3, [r3, #12]
 8000de0:	2201      	movs	r2, #1
 8000de2:	4619      	mov	r1, r3
 8000de4:	f001 f986 	bl	80020f4 <HAL_GPIO_WritePin>
		return ret;
 8000de8:	7dfb      	ldrb	r3, [r7, #23]
 8000dea:	e012      	b.n	8000e12 <NRF24_SendReadCommand+0x82>
	}
	ret = (NRF_Status) HAL_SPI_Receive(nrf->spiHandle, read, length,
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	6818      	ldr	r0, [r3, #0]
 8000df0:	7abb      	ldrb	r3, [r7, #10]
 8000df2:	b29a      	uxth	r2, r3
 8000df4:	230a      	movs	r3, #10
 8000df6:	6879      	ldr	r1, [r7, #4]
 8000df8:	f004 fb5c 	bl	80054b4 <HAL_SPI_Receive>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	75fb      	strb	r3, [r7, #23]
	NRF_SPI_TIMEOUT_TIME);
	HAL_GPIO_WritePin(nrf->csPinBank, nrf->csPin, GPIO_PIN_SET);
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	6858      	ldr	r0, [r3, #4]
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	899b      	ldrh	r3, [r3, #12]
 8000e08:	2201      	movs	r2, #1
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	f001 f972 	bl	80020f4 <HAL_GPIO_WritePin>
	return ret;
 8000e10:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3718      	adds	r7, #24
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <NRF24_WriteRegister>:

NRF_Status NRF24_WriteRegister(NRF24 *nrf, uint8_t reg, uint8_t *write,
		uint8_t Length) {
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b084      	sub	sp, #16
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	60f8      	str	r0, [r7, #12]
 8000e22:	607a      	str	r2, [r7, #4]
 8000e24:	461a      	mov	r2, r3
 8000e26:	460b      	mov	r3, r1
 8000e28:	72fb      	strb	r3, [r7, #11]
 8000e2a:	4613      	mov	r3, r2
 8000e2c:	72bb      	strb	r3, [r7, #10]
	return NRF24_SendWriteCommand(nrf, NRF_CMD_W_REGISTER | reg, write, Length);
 8000e2e:	7afb      	ldrb	r3, [r7, #11]
 8000e30:	f043 0320 	orr.w	r3, r3, #32
 8000e34:	b2d9      	uxtb	r1, r3
 8000e36:	7abb      	ldrb	r3, [r7, #10]
 8000e38:	687a      	ldr	r2, [r7, #4]
 8000e3a:	68f8      	ldr	r0, [r7, #12]
 8000e3c:	f7ff ff63 	bl	8000d06 <NRF24_SendWriteCommand>
 8000e40:	4603      	mov	r3, r0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3710      	adds	r7, #16
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <NRF24_WriteRegisterByte>:

NRF_Status NRF24_WriteRegisterByte(NRF24 *nrf, uint8_t reg, uint8_t byte) {
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b084      	sub	sp, #16
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
 8000e52:	460b      	mov	r3, r1
 8000e54:	70fb      	strb	r3, [r7, #3]
 8000e56:	4613      	mov	r3, r2
 8000e58:	70bb      	strb	r3, [r7, #2]
	uint8_t write = byte;
 8000e5a:	78bb      	ldrb	r3, [r7, #2]
 8000e5c:	73fb      	strb	r3, [r7, #15]
	return NRF24_WriteRegister(nrf, reg, &write, 1);
 8000e5e:	f107 020f 	add.w	r2, r7, #15
 8000e62:	78f9      	ldrb	r1, [r7, #3]
 8000e64:	2301      	movs	r3, #1
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	f7ff ffd7 	bl	8000e1a <NRF24_WriteRegister>
 8000e6c:	4603      	mov	r3, r0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3710      	adds	r7, #16
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <NRF24_ReadRegister>:

NRF_Status NRF24_ReadRegister(NRF24 *nrf, uint8_t reg, uint8_t *read,
		uint8_t Length) {
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b084      	sub	sp, #16
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	60f8      	str	r0, [r7, #12]
 8000e7e:	607a      	str	r2, [r7, #4]
 8000e80:	461a      	mov	r2, r3
 8000e82:	460b      	mov	r3, r1
 8000e84:	72fb      	strb	r3, [r7, #11]
 8000e86:	4613      	mov	r3, r2
 8000e88:	72bb      	strb	r3, [r7, #10]
	return NRF24_SendReadCommand(nrf, NRF_CMD_R_REGISTER | reg, read, Length);
 8000e8a:	7abb      	ldrb	r3, [r7, #10]
 8000e8c:	7af9      	ldrb	r1, [r7, #11]
 8000e8e:	687a      	ldr	r2, [r7, #4]
 8000e90:	68f8      	ldr	r0, [r7, #12]
 8000e92:	f7ff ff7d 	bl	8000d90 <NRF24_SendReadCommand>
 8000e96:	4603      	mov	r3, r0
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3710      	adds	r7, #16
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <NRF24_ReadStatus>:
	uint8_t read;
	NRF24_SendReadCommand(nrf, NRF_CMD_R_REGISTER | reg, &read, 1);
	return read;
}

uint8_t NRF24_ReadStatus(NRF24 *nrf) {
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af02      	add	r7, sp, #8
 8000ea6:	6078      	str	r0, [r7, #4]
	uint8_t status = 0x00;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	73fb      	strb	r3, [r7, #15]
	uint8_t cmd = NRF_CMD_NOP;
 8000eac:	23ff      	movs	r3, #255	@ 0xff
 8000eae:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(nrf->csPinBank, nrf->csPin, GPIO_PIN_RESET);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6858      	ldr	r0, [r3, #4]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	899b      	ldrh	r3, [r3, #12]
 8000eb8:	2200      	movs	r2, #0
 8000eba:	4619      	mov	r1, r3
 8000ebc:	f001 f91a 	bl	80020f4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(nrf->spiHandle, &cmd, &status, 1,
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6818      	ldr	r0, [r3, #0]
 8000ec4:	f107 020f 	add.w	r2, r7, #15
 8000ec8:	f107 010e 	add.w	r1, r7, #14
 8000ecc:	230a      	movs	r3, #10
 8000ece:	9300      	str	r3, [sp, #0]
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	f004 fd61 	bl	8005998 <HAL_SPI_TransmitReceive>
	NRF_SPI_TIMEOUT_TIME);
	HAL_GPIO_WritePin(nrf->csPinBank, nrf->csPin, GPIO_PIN_SET);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6858      	ldr	r0, [r3, #4]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	899b      	ldrh	r3, [r3, #12]
 8000ede:	2201      	movs	r2, #1
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	f001 f907 	bl	80020f4 <HAL_GPIO_WritePin>

	return status;
 8000ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3710      	adds	r7, #16
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <NRF24_SetRegisterBit>:

NRF_Status NRF24_SetRegisterBit(NRF24 *nrf, uint8_t reg, uint8_t bit) {
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	460b      	mov	r3, r1
 8000efa:	70fb      	strb	r3, [r7, #3]
 8000efc:	4613      	mov	r3, r2
 8000efe:	70bb      	strb	r3, [r7, #2]
	NRF_Status ret = NRF_OK;
 8000f00:	2300      	movs	r3, #0
 8000f02:	73fb      	strb	r3, [r7, #15]
	uint8_t cfg = 0x00;
 8000f04:	2300      	movs	r3, #0
 8000f06:	73bb      	strb	r3, [r7, #14]

	ret = NRF24_ReadRegister(nrf, reg, &cfg, 1);
 8000f08:	f107 020e 	add.w	r2, r7, #14
 8000f0c:	78f9      	ldrb	r1, [r7, #3]
 8000f0e:	2301      	movs	r3, #1
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f7ff ffb0 	bl	8000e76 <NRF24_ReadRegister>
 8000f16:	4603      	mov	r3, r0
 8000f18:	73fb      	strb	r3, [r7, #15]
	if (ret != NRF_OK) {
 8000f1a:	7bfb      	ldrb	r3, [r7, #15]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <NRF24_SetRegisterBit+0x34>
		return ret;
 8000f20:	7bfb      	ldrb	r3, [r7, #15]
 8000f22:	e012      	b.n	8000f4a <NRF24_SetRegisterBit+0x5a>
	}
	cfg = cfg | (1 << bit);
 8000f24:	78bb      	ldrb	r3, [r7, #2]
 8000f26:	2201      	movs	r2, #1
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	b25a      	sxtb	r2, r3
 8000f2e:	7bbb      	ldrb	r3, [r7, #14]
 8000f30:	b25b      	sxtb	r3, r3
 8000f32:	4313      	orrs	r3, r2
 8000f34:	b25b      	sxtb	r3, r3
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	73bb      	strb	r3, [r7, #14]
	return NRF24_WriteRegister(nrf, reg, &cfg, 1);
 8000f3a:	f107 020e 	add.w	r2, r7, #14
 8000f3e:	78f9      	ldrb	r1, [r7, #3]
 8000f40:	2301      	movs	r3, #1
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f7ff ff69 	bl	8000e1a <NRF24_WriteRegister>
 8000f48:	4603      	mov	r3, r0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3710      	adds	r7, #16
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <NRF24_ResetRegisterBit>:

NRF_Status NRF24_ResetRegisterBit(NRF24 *nrf, uint8_t reg, uint8_t bit) {
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b084      	sub	sp, #16
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
 8000f5a:	460b      	mov	r3, r1
 8000f5c:	70fb      	strb	r3, [r7, #3]
 8000f5e:	4613      	mov	r3, r2
 8000f60:	70bb      	strb	r3, [r7, #2]
	NRF_Status ret = NRF_OK;
 8000f62:	2300      	movs	r3, #0
 8000f64:	73fb      	strb	r3, [r7, #15]
	uint8_t cfg = 0x00;
 8000f66:	2300      	movs	r3, #0
 8000f68:	73bb      	strb	r3, [r7, #14]

	ret = NRF24_ReadRegister(nrf, reg, &cfg, 1); //Pega a informação do byte do registro
 8000f6a:	f107 020e 	add.w	r2, r7, #14
 8000f6e:	78f9      	ldrb	r1, [r7, #3]
 8000f70:	2301      	movs	r3, #1
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f7ff ff7f 	bl	8000e76 <NRF24_ReadRegister>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	73fb      	strb	r3, [r7, #15]
	if (ret != NRF_OK) {
 8000f7c:	7bfb      	ldrb	r3, [r7, #15]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <NRF24_ResetRegisterBit+0x34>
		return ret;
 8000f82:	7bfb      	ldrb	r3, [r7, #15]
 8000f84:	e014      	b.n	8000fb0 <NRF24_ResetRegisterBit+0x5e>
	}

	cfg = cfg & ~(1 << bit); //Altera o bit por meio de um E binário
 8000f86:	78bb      	ldrb	r3, [r7, #2]
 8000f88:	2201      	movs	r2, #1
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	b25b      	sxtb	r3, r3
 8000f90:	43db      	mvns	r3, r3
 8000f92:	b25a      	sxtb	r2, r3
 8000f94:	7bbb      	ldrb	r3, [r7, #14]
 8000f96:	b25b      	sxtb	r3, r3
 8000f98:	4013      	ands	r3, r2
 8000f9a:	b25b      	sxtb	r3, r3
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	73bb      	strb	r3, [r7, #14]
	return NRF24_WriteRegister(nrf, reg, &cfg, 1); //Escreve o registro de volta
 8000fa0:	f107 020e 	add.w	r2, r7, #14
 8000fa4:	78f9      	ldrb	r1, [r7, #3]
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	f7ff ff36 	bl	8000e1a <NRF24_WriteRegister>
 8000fae:	4603      	mov	r3, r0
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3710      	adds	r7, #16
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <NRF24_EnterMode>:

//eu mudei isto ent acho que tem erros kkk

NRF_Status NRF24_EnterMode(NRF24 *nrf, uint8_t mode) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	70fb      	strb	r3, [r7, #3]
	NRF_Status ret = NRF_OK;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	73fb      	strb	r3, [r7, #15]

	switch (mode) {
 8000fc8:	78fb      	ldrb	r3, [r7, #3]
 8000fca:	2b03      	cmp	r3, #3
 8000fcc:	f200 8083 	bhi.w	80010d6 <NRF24_EnterMode+0x11e>
 8000fd0:	a201      	add	r2, pc, #4	@ (adr r2, 8000fd8 <NRF24_EnterMode+0x20>)
 8000fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fd6:	bf00      	nop
 8000fd8:	08000fe9 	.word	0x08000fe9
 8000fdc:	08001019 	.word	0x08001019
 8000fe0:	0800107f 	.word	0x0800107f
 8000fe4:	080010ab 	.word	0x080010ab
	case NRF_MODE_POWERDOWN:
		HAL_GPIO_WritePin(nrf->csPinBank, nrf->csPin, GPIO_PIN_SET); //csn_set();
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6858      	ldr	r0, [r3, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	899b      	ldrh	r3, [r3, #12]
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	f001 f87e 	bl	80020f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(nrf->cePinBank, nrf->cePin, GPIO_PIN_RESET); //ce_reset();
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6898      	ldr	r0, [r3, #8]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	89db      	ldrh	r3, [r3, #14]
 8001000:	2200      	movs	r2, #0
 8001002:	4619      	mov	r1, r3
 8001004:	f001 f876 	bl	80020f4 <HAL_GPIO_WritePin>
		ret = NRF24_ResetRegisterBit(nrf, NRF_REG_CONFIG, CFG_BIT_PWR_UP); //Seta o bit de Power up em 0 *****************************************8
 8001008:	2201      	movs	r2, #1
 800100a:	2100      	movs	r1, #0
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f7ff ffa0 	bl	8000f52 <NRF24_ResetRegisterBit>
 8001012:	4603      	mov	r3, r0
 8001014:	73fb      	strb	r3, [r7, #15]
		break;
 8001016:	e062      	b.n	80010de <NRF24_EnterMode+0x126>

	case NRF_MODE_STANDBY1:
		if (nrf->mode == NRF_MODE_POWERDOWN) {
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	8a1b      	ldrh	r3, [r3, #16]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d10d      	bne.n	800103c <NRF24_EnterMode+0x84>
			ret = NRF24_SetRegisterBit(nrf, NRF_REG_CONFIG, CFG_BIT_PWR_UP); //Seta o bit de Power up em 1
 8001020:	2201      	movs	r2, #1
 8001022:	2100      	movs	r1, #0
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f7ff ff63 	bl	8000ef0 <NRF24_SetRegisterBit>
 800102a:	4603      	mov	r3, r0
 800102c:	73fb      	strb	r3, [r7, #15]
			wait(1500);
 800102e:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8001032:	f04f 0100 	mov.w	r1, #0
 8001036:	f7ff fde5 	bl	8000c04 <wait>
			ret = NRF24_ResetRegisterBit(nrf, NRF_REG_CONFIG, CFG_BIT_PRIM_RX);
			HAL_GPIO_WritePin(nrf->cePinBank, nrf->cePin, GPIO_PIN_RESET); //ce_reset();
		} else if (nrf->mode == NRF_MODE_TX) {
			HAL_GPIO_WritePin(nrf->cePinBank, nrf->cePin, GPIO_PIN_RESET);
		}
		break;
 800103a:	e04f      	b.n	80010dc <NRF24_EnterMode+0x124>
		} else if (nrf->mode == NRF_MODE_RX) {
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	8a1b      	ldrh	r3, [r3, #16]
 8001040:	2b02      	cmp	r3, #2
 8001042:	d10f      	bne.n	8001064 <NRF24_EnterMode+0xac>
			ret = NRF24_ResetRegisterBit(nrf, NRF_REG_CONFIG, CFG_BIT_PRIM_RX);
 8001044:	2200      	movs	r2, #0
 8001046:	2100      	movs	r1, #0
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f7ff ff82 	bl	8000f52 <NRF24_ResetRegisterBit>
 800104e:	4603      	mov	r3, r0
 8001050:	73fb      	strb	r3, [r7, #15]
			HAL_GPIO_WritePin(nrf->cePinBank, nrf->cePin, GPIO_PIN_RESET); //ce_reset();
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6898      	ldr	r0, [r3, #8]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	89db      	ldrh	r3, [r3, #14]
 800105a:	2200      	movs	r2, #0
 800105c:	4619      	mov	r1, r3
 800105e:	f001 f849 	bl	80020f4 <HAL_GPIO_WritePin>
		break;
 8001062:	e03b      	b.n	80010dc <NRF24_EnterMode+0x124>
		} else if (nrf->mode == NRF_MODE_TX) {
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	8a1b      	ldrh	r3, [r3, #16]
 8001068:	2b03      	cmp	r3, #3
 800106a:	d137      	bne.n	80010dc <NRF24_EnterMode+0x124>
			HAL_GPIO_WritePin(nrf->cePinBank, nrf->cePin, GPIO_PIN_RESET);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6898      	ldr	r0, [r3, #8]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	89db      	ldrh	r3, [r3, #14]
 8001074:	2200      	movs	r2, #0
 8001076:	4619      	mov	r1, r3
 8001078:	f001 f83c 	bl	80020f4 <HAL_GPIO_WritePin>
		break;
 800107c:	e02e      	b.n	80010dc <NRF24_EnterMode+0x124>

	case NRF_MODE_RX:
		if (nrf->mode != NRF_MODE_STANDBY1) { //O dispositivo deve estar em standby para passar para o modo Rx
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	8a1b      	ldrh	r3, [r3, #16]
 8001082:	2b01      	cmp	r3, #1
 8001084:	d001      	beq.n	800108a <NRF24_EnterMode+0xd2>
			return NRF_BAD_TRANSITION;
 8001086:	2306      	movs	r3, #6
 8001088:	e031      	b.n	80010ee <NRF24_EnterMode+0x136>
		}
		ret = NRF24_SetRegisterBit(nrf, NRF_REG_CONFIG, CFG_BIT_PRIM_RX); // 1 = Rx
 800108a:	2200      	movs	r2, #0
 800108c:	2100      	movs	r1, #0
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f7ff ff2e 	bl	8000ef0 <NRF24_SetRegisterBit>
 8001094:	4603      	mov	r3, r0
 8001096:	73fb      	strb	r3, [r7, #15]
		HAL_GPIO_WritePin(nrf->cePinBank, nrf->cePin, GPIO_PIN_SET); //ce_set();
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6898      	ldr	r0, [r3, #8]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	89db      	ldrh	r3, [r3, #14]
 80010a0:	2201      	movs	r2, #1
 80010a2:	4619      	mov	r1, r3
 80010a4:	f001 f826 	bl	80020f4 <HAL_GPIO_WritePin>
		break;
 80010a8:	e019      	b.n	80010de <NRF24_EnterMode+0x126>

	case NRF_MODE_TX:
		if (nrf->mode != NRF_MODE_STANDBY1) {
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	8a1b      	ldrh	r3, [r3, #16]
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d001      	beq.n	80010b6 <NRF24_EnterMode+0xfe>
			return NRF_BAD_TRANSITION;
 80010b2:	2306      	movs	r3, #6
 80010b4:	e01b      	b.n	80010ee <NRF24_EnterMode+0x136>
		}
		ret = NRF24_ResetRegisterBit(nrf, NRF_REG_CONFIG, CFG_BIT_PRIM_RX); // 0 = Tx
 80010b6:	2200      	movs	r2, #0
 80010b8:	2100      	movs	r1, #0
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f7ff ff49 	bl	8000f52 <NRF24_ResetRegisterBit>
 80010c0:	4603      	mov	r3, r0
 80010c2:	73fb      	strb	r3, [r7, #15]
		HAL_GPIO_WritePin(nrf->cePinBank, nrf->cePin, GPIO_PIN_SET);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6898      	ldr	r0, [r3, #8]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	89db      	ldrh	r3, [r3, #14]
 80010cc:	2201      	movs	r2, #1
 80010ce:	4619      	mov	r1, r3
 80010d0:	f001 f810 	bl	80020f4 <HAL_GPIO_WritePin>
		break;
 80010d4:	e003      	b.n	80010de <NRF24_EnterMode+0x126>

	default:
		ret = NRF_ERROR;
 80010d6:	2304      	movs	r3, #4
 80010d8:	73fb      	strb	r3, [r7, #15]
		break;
 80010da:	e000      	b.n	80010de <NRF24_EnterMode+0x126>
		break;
 80010dc:	bf00      	nop
	}

	if (ret == NRF_OK) {
 80010de:	7bfb      	ldrb	r3, [r7, #15]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d103      	bne.n	80010ec <NRF24_EnterMode+0x134>
		nrf->mode = mode;
 80010e4:	78fb      	ldrb	r3, [r7, #3]
 80010e6:	b29a      	uxth	r2, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	821a      	strh	r2, [r3, #16]
	}

	return ret;
 80010ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop

080010f8 <NRF24_Init>:

NRF_Status NRF24_Init(NRF24 *nrf){
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]

	CPU_Freq = HAL_RCC_GetSysClockFreq();
 8001100:	f001 fec4 	bl	8002e8c <HAL_RCC_GetSysClockFreq>
 8001104:	4603      	mov	r3, r0
 8001106:	4a0e      	ldr	r2, [pc, #56]	@ (8001140 <NRF24_Init+0x48>)
 8001108:	6013      	str	r3, [r2, #0]
	if (CPU_Freq == 0x00) {
 800110a:	4b0d      	ldr	r3, [pc, #52]	@ (8001140 <NRF24_Init+0x48>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d101      	bne.n	8001116 <NRF24_Init+0x1e>
		return NRF_ERROR;
 8001112:	2304      	movs	r3, #4
 8001114:	e00f      	b.n	8001136 <NRF24_Init+0x3e>
	}

	// Make sure CSN is pulled high
	HAL_GPIO_WritePin(nrf->csPinBank, nrf->csPin, GPIO_PIN_SET);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6858      	ldr	r0, [r3, #4]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	899b      	ldrh	r3, [r3, #12]
 800111e:	2201      	movs	r2, #1
 8001120:	4619      	mov	r1, r3
 8001122:	f000 ffe7 	bl	80020f4 <HAL_GPIO_WritePin>

	// Takes ~100ms from power on to start up
	HAL_Delay(100);
 8001126:	2064      	movs	r0, #100	@ 0x64
 8001128:	f000 fc72 	bl	8001a10 <HAL_Delay>

	return NRF24_EnterMode(nrf, NRF_MODE_STANDBY1);
 800112c:	2101      	movs	r1, #1
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f7ff ff42 	bl	8000fb8 <NRF24_EnterMode>
 8001134:	4603      	mov	r3, r0
}
 8001136:	4618      	mov	r0, r3
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	24000114 	.word	0x24000114

08001144 <NRF24_Reset>:

void NRF24_Reset(NRF24 *nrf) {
 8001144:	b580      	push	{r7, lr}
 8001146:	b086      	sub	sp, #24
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
	NRF24_EnterMode(nrf, NRF_MODE_POWERDOWN);
 800114c:	2100      	movs	r1, #0
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f7ff ff32 	bl	8000fb8 <NRF24_EnterMode>
	NRF24_EnterMode(nrf, NRF_MODE_STANDBY1);
 8001154:	2101      	movs	r1, #1
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f7ff ff2e 	bl	8000fb8 <NRF24_EnterMode>

	// Flush FIFOs
	NRF24_EnterMode(nrf, NRF_MODE_TX);
 800115c:	2103      	movs	r1, #3
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f7ff ff2a 	bl	8000fb8 <NRF24_EnterMode>
	NRF24_SendCommand(nrf, NRF_CMD_FLUSH_TX);
 8001164:	21e1      	movs	r1, #225	@ 0xe1
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f7ff fd9f 	bl	8000caa <NRF24_SendCommand>
	NRF24_EnterMode(nrf, NRF_MODE_STANDBY1);
 800116c:	2101      	movs	r1, #1
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f7ff ff22 	bl	8000fb8 <NRF24_EnterMode>
	NRF24_EnterMode(nrf, NRF_MODE_RX);
 8001174:	2102      	movs	r1, #2
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f7ff ff1e 	bl	8000fb8 <NRF24_EnterMode>
	NRF24_SendCommand(nrf, NRF_CMD_FLUSH_RX);
 800117c:	21e2      	movs	r1, #226	@ 0xe2
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f7ff fd93 	bl	8000caa <NRF24_SendCommand>
	NRF24_EnterMode(nrf, NRF_MODE_STANDBY1);
 8001184:	2101      	movs	r1, #1
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f7ff ff16 	bl	8000fb8 <NRF24_EnterMode>

	// Flush register -> LER DATASHEET!!!!!!!!!!!!!!
	NRF24_WriteRegisterByte(nrf, NRF_REG_CONFIG, 0x0A); // 00001010
 800118c:	220a      	movs	r2, #10
 800118e:	2100      	movs	r1, #0
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f7ff fe5a 	bl	8000e4a <NRF24_WriteRegisterByte>
	NRF24_WriteRegisterByte(nrf, NRF_REG_EN_AA, 0x03); // 00000000 = AutoAcknologment desligado em todos os Pipes
 8001196:	2203      	movs	r2, #3
 8001198:	2101      	movs	r1, #1
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f7ff fe55 	bl	8000e4a <NRF24_WriteRegisterByte>
	NRF24_WriteRegisterByte(nrf, NRF_REG_EN_RXADDR, 0x03); //00000011 -> Pipes 0 e 1 no Rx
 80011a0:	2203      	movs	r2, #3
 80011a2:	2102      	movs	r1, #2
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f7ff fe50 	bl	8000e4a <NRF24_WriteRegisterByte>
	NRF24_WriteRegisterByte(nrf, NRF_REG_SETUP_AW, 0x03); //00000011 -> 5 bytes no adresss
 80011aa:	2203      	movs	r2, #3
 80011ac:	2103      	movs	r1, #3
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f7ff fe4b 	bl	8000e4a <NRF24_WriteRegisterByte>
	NRF24_WriteRegisterByte(nrf, NRF_REG_SETUP_RETR, 0x03); //00000000 -> re-transmit desabilitado
 80011b4:	2203      	movs	r2, #3
 80011b6:	2104      	movs	r1, #4
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f7ff fe46 	bl	8000e4a <NRF24_WriteRegisterByte>
	NRF24_WriteRegisterByte(nrf, NRF_REG_RF_CH, 0x02); //00000010 -> Canal 3
 80011be:	2202      	movs	r2, #2
 80011c0:	2105      	movs	r1, #5
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f7ff fe41 	bl	8000e4a <NRF24_WriteRegisterByte>
	NRF24_WriteRegisterByte(nrf, NRF_REG_RF_SETUP, 0x0e); //00001110 -> LNA desligado, 0dBm, 2MBs
 80011c8:	220e      	movs	r2, #14
 80011ca:	2106      	movs	r1, #6
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f7ff fe3c 	bl	8000e4a <NRF24_WriteRegisterByte>
	NRF24_WriteRegisterByte(nrf, NRF_REG_STATUS, 0x70); // clear flags
 80011d2:	2270      	movs	r2, #112	@ 0x70
 80011d4:	2107      	movs	r1, #7
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f7ff fe37 	bl	8000e4a <NRF24_WriteRegisterByte>

	uint8_t address[5] = { 0xE7, 0xE7, 0xE7, 0xE7, 0xE7 };
 80011dc:	4a34      	ldr	r2, [pc, #208]	@ (80012b0 <NRF24_Reset+0x16c>)
 80011de:	f107 0310 	add.w	r3, r7, #16
 80011e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011e6:	6018      	str	r0, [r3, #0]
 80011e8:	3304      	adds	r3, #4
 80011ea:	7019      	strb	r1, [r3, #0]
	uint8_t address2[5] = { 0xC2, 0xC2, 0xC2, 0xC2, 0xC2 };
 80011ec:	4a31      	ldr	r2, [pc, #196]	@ (80012b4 <NRF24_Reset+0x170>)
 80011ee:	f107 0308 	add.w	r3, r7, #8
 80011f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011f6:	6018      	str	r0, [r3, #0]
 80011f8:	3304      	adds	r3, #4
 80011fa:	7019      	strb	r1, [r3, #0]
	NRF24_WriteRegister(nrf, NRF_REG_RX_ADDR_P0, address, 5); //Adress do pipe 0
 80011fc:	f107 0210 	add.w	r2, r7, #16
 8001200:	2305      	movs	r3, #5
 8001202:	210a      	movs	r1, #10
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f7ff fe08 	bl	8000e1a <NRF24_WriteRegister>
	NRF24_WriteRegister(nrf, NRF_REG_RX_ADDR_P1, address2, 5); //Adress pipe 1
 800120a:	f107 0208 	add.w	r2, r7, #8
 800120e:	2305      	movs	r3, #5
 8001210:	210b      	movs	r1, #11
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f7ff fe01 	bl	8000e1a <NRF24_WriteRegister>
	NRF24_WriteRegisterByte(nrf, NRF_REG_RX_ADDR_P2, 0xC3);
 8001218:	22c3      	movs	r2, #195	@ 0xc3
 800121a:	210c      	movs	r1, #12
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f7ff fe14 	bl	8000e4a <NRF24_WriteRegisterByte>
	NRF24_WriteRegisterByte(nrf, NRF_REG_RX_ADDR_P3, 0xC4);
 8001222:	22c4      	movs	r2, #196	@ 0xc4
 8001224:	210d      	movs	r1, #13
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f7ff fe0f 	bl	8000e4a <NRF24_WriteRegisterByte>
	NRF24_WriteRegisterByte(nrf, NRF_REG_RX_ADDR_P4, 0xC5);
 800122c:	22c5      	movs	r2, #197	@ 0xc5
 800122e:	210e      	movs	r1, #14
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f7ff fe0a 	bl	8000e4a <NRF24_WriteRegisterByte>
	NRF24_WriteRegisterByte(nrf, NRF_REG_RX_ADDR_P5, 0xC6);
 8001236:	22c6      	movs	r2, #198	@ 0xc6
 8001238:	210f      	movs	r1, #15
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f7ff fe05 	bl	8000e4a <NRF24_WriteRegisterByte>
	NRF24_WriteRegister(nrf, NRF_REG_TX_ADDR, address, 5);
 8001240:	f107 0210 	add.w	r2, r7, #16
 8001244:	2305      	movs	r3, #5
 8001246:	2110      	movs	r1, #16
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f7ff fde6 	bl	8000e1a <NRF24_WriteRegister>
	NRF24_WriteRegisterByte(nrf, NRF_REG_RX_PW_P0, 0x00);
 800124e:	2200      	movs	r2, #0
 8001250:	2111      	movs	r1, #17
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f7ff fdf9 	bl	8000e4a <NRF24_WriteRegisterByte>
	NRF24_WriteRegisterByte(nrf, NRF_REG_RX_PW_P1, 0x00);
 8001258:	2200      	movs	r2, #0
 800125a:	2112      	movs	r1, #18
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f7ff fdf4 	bl	8000e4a <NRF24_WriteRegisterByte>
	NRF24_WriteRegisterByte(nrf, NRF_REG_RX_PW_P2, 0x00);
 8001262:	2200      	movs	r2, #0
 8001264:	2113      	movs	r1, #19
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f7ff fdef 	bl	8000e4a <NRF24_WriteRegisterByte>
	NRF24_WriteRegisterByte(nrf, NRF_REG_RX_PW_P3, 0x00);
 800126c:	2200      	movs	r2, #0
 800126e:	2114      	movs	r1, #20
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f7ff fdea 	bl	8000e4a <NRF24_WriteRegisterByte>
	NRF24_WriteRegisterByte(nrf, NRF_REG_RX_PW_P4, 0x00);
 8001276:	2200      	movs	r2, #0
 8001278:	2115      	movs	r1, #21
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7ff fde5 	bl	8000e4a <NRF24_WriteRegisterByte>
	NRF24_WriteRegisterByte(nrf, NRF_REG_RX_PW_P5, 0x00);
 8001280:	2200      	movs	r2, #0
 8001282:	2116      	movs	r1, #22
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f7ff fde0 	bl	8000e4a <NRF24_WriteRegisterByte>

	NRF24_WriteRegisterByte(nrf, NRF_REG_FIFO_STATUS, 0x00);
 800128a:	2200      	movs	r2, #0
 800128c:	2117      	movs	r1, #23
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f7ff fddb 	bl	8000e4a <NRF24_WriteRegisterByte>
	NRF24_WriteRegisterByte(nrf, NRF_REG_DYNPD, 0x00);
 8001294:	2200      	movs	r2, #0
 8001296:	211c      	movs	r1, #28
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f7ff fdd6 	bl	8000e4a <NRF24_WriteRegisterByte>
	NRF24_WriteRegisterByte(nrf, NRF_REG_FEATURE, 0x00);
 800129e:	2200      	movs	r2, #0
 80012a0:	211d      	movs	r1, #29
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f7ff fdd1 	bl	8000e4a <NRF24_WriteRegisterByte>
}
 80012a8:	bf00      	nop
 80012aa:	3718      	adds	r7, #24
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	08007214 	.word	0x08007214
 80012b4:	0800721c 	.word	0x0800721c

080012b8 <NRF24_WritePayload>:

NRF_Status NRF24_WritePayload(NRF24 *nrf, uint8_t *payload, uint8_t length) {
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	4613      	mov	r3, r2
 80012c4:	71fb      	strb	r3, [r7, #7]
	return NRF24_SendWriteCommand(nrf, NRF_CMD_W_TX_PAYLOAD, payload, length);
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	68ba      	ldr	r2, [r7, #8]
 80012ca:	21a0      	movs	r1, #160	@ 0xa0
 80012cc:	68f8      	ldr	r0, [r7, #12]
 80012ce:	f7ff fd1a 	bl	8000d06 <NRF24_SendWriteCommand>
 80012d2:	4603      	mov	r3, r0
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3710      	adds	r7, #16
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <NRF24_TransmitAndWait>:
	HAL_GPIO_WritePin(nrf->cePinBank, nrf->cePin, GPIO_PIN_SET); //ce_set();
	wait(10);
	HAL_GPIO_WritePin(nrf->cePinBank, nrf->cePin, GPIO_PIN_RESET); //ce_reset();
}

NRF_Status NRF24_TransmitAndWait(NRF24 *nrf, uint8_t *payload, uint8_t length) {
 80012dc:	b580      	push	{r7, lr}
 80012de:	b086      	sub	sp, #24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	4613      	mov	r3, r2
 80012e8:	71fb      	strb	r3, [r7, #7]
	NRF_Status ret = NRF_OK;
 80012ea:	2300      	movs	r3, #0
 80012ec:	75fb      	strb	r3, [r7, #23]

	ret = NRF24_WritePayload(nrf, payload, length);
 80012ee:	79fb      	ldrb	r3, [r7, #7]
 80012f0:	461a      	mov	r2, r3
 80012f2:	68b9      	ldr	r1, [r7, #8]
 80012f4:	68f8      	ldr	r0, [r7, #12]
 80012f6:	f7ff ffdf 	bl	80012b8 <NRF24_WritePayload>
 80012fa:	4603      	mov	r3, r0
 80012fc:	75fb      	strb	r3, [r7, #23]
	if (ret != NRF_OK) {
 80012fe:	7dfb      	ldrb	r3, [r7, #23]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <NRF24_TransmitAndWait+0x2c>

		return ret;
 8001304:	7dfb      	ldrb	r3, [r7, #23]
 8001306:	e02e      	b.n	8001366 <NRF24_TransmitAndWait+0x8a>
	}

	// Transmit
	HAL_GPIO_WritePin(nrf->cePinBank, nrf->cePin, GPIO_PIN_SET); //ce_set();
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	6898      	ldr	r0, [r3, #8]
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	89db      	ldrh	r3, [r3, #14]
 8001310:	2201      	movs	r2, #1
 8001312:	4619      	mov	r1, r3
 8001314:	f000 feee 	bl	80020f4 <HAL_GPIO_WritePin>

	// Wait for status update
	uint8_t status;
	for (;;) {
		status = NRF24_ReadStatus(nrf);
 8001318:	68f8      	ldr	r0, [r7, #12]
 800131a:	f7ff fdc1 	bl	8000ea0 <NRF24_ReadStatus>
 800131e:	4603      	mov	r3, r0
 8001320:	75bb      	strb	r3, [r7, #22]
		if (status & (1 << STATUS_BIT_TX_DS)) {
 8001322:	7dbb      	ldrb	r3, [r7, #22]
 8001324:	f003 0320 	and.w	r3, r3, #32
 8001328:	2b00      	cmp	r3, #0
 800132a:	d007      	beq.n	800133c <NRF24_TransmitAndWait+0x60>
			// Packet transmitted
			ret = NRF24_SetRegisterBit(nrf, NRF_REG_STATUS, STATUS_BIT_TX_DS); // clear flag
 800132c:	2205      	movs	r2, #5
 800132e:	2107      	movs	r1, #7
 8001330:	68f8      	ldr	r0, [r7, #12]
 8001332:	f7ff fddd 	bl	8000ef0 <NRF24_SetRegisterBit>
 8001336:	4603      	mov	r3, r0
 8001338:	75fb      	strb	r3, [r7, #23]
			break;
 800133a:	e00b      	b.n	8001354 <NRF24_TransmitAndWait+0x78>
		} else if (status & (1 << STATUS_BIT_MAX_RT)) {
 800133c:	7dbb      	ldrb	r3, [r7, #22]
 800133e:	f003 0310 	and.w	r3, r3, #16
 8001342:	2b00      	cmp	r3, #0
 8001344:	d0e8      	beq.n	8001318 <NRF24_TransmitAndWait+0x3c>
			// Max retransmits reached
			NRF24_SetRegisterBit(nrf, NRF_REG_STATUS, STATUS_BIT_MAX_RT); // clear flag
 8001346:	2204      	movs	r2, #4
 8001348:	2107      	movs	r1, #7
 800134a:	68f8      	ldr	r0, [r7, #12]
 800134c:	f7ff fdd0 	bl	8000ef0 <NRF24_SetRegisterBit>
			ret = NRF_MAX_RT;
 8001350:	2305      	movs	r3, #5
 8001352:	75fb      	strb	r3, [r7, #23]
			break;
		}
	}
	HAL_GPIO_WritePin(nrf->cePinBank, nrf->cePin, GPIO_PIN_RESET); //ce_reset();
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	6898      	ldr	r0, [r3, #8]
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	89db      	ldrh	r3, [r3, #14]
 800135c:	2200      	movs	r2, #0
 800135e:	4619      	mov	r1, r3
 8001360:	f000 fec8 	bl	80020f4 <HAL_GPIO_WritePin>

	return ret;
 8001364:	7dfb      	ldrb	r3, [r7, #23]
}
 8001366:	4618      	mov	r0, r3
 8001368:	3718      	adds	r7, #24
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <Tx_mode>:

void Tx_mode(NRF24 *nrf, uint8_t Adress[5]) {
 800136e:	b580      	push	{r7, lr}
 8001370:	b082      	sub	sp, #8
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
 8001376:	6039      	str	r1, [r7, #0]
	/*if (NRF24_Init(nrf, nrf->spiHandle, nrf->csPin, nrf->csPinBank, nrf->cePin, nrf->cePinBank) != NRF_OK) {
		Error_Handler();
	}*/
	NRF24_Reset(nrf);
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f7ff fee3 	bl	8001144 <NRF24_Reset>
	NRF24_WriteRegister(nrf, NRF_REG_TX_ADDR, Adress, 5);
 800137e:	2305      	movs	r3, #5
 8001380:	683a      	ldr	r2, [r7, #0]
 8001382:	2110      	movs	r1, #16
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f7ff fd48 	bl	8000e1a <NRF24_WriteRegister>
}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
	...

08001394 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800139a:	4b0a      	ldr	r3, [pc, #40]	@ (80013c4 <HAL_MspInit+0x30>)
 800139c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80013a0:	4a08      	ldr	r2, [pc, #32]	@ (80013c4 <HAL_MspInit+0x30>)
 80013a2:	f043 0302 	orr.w	r3, r3, #2
 80013a6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80013aa:	4b06      	ldr	r3, [pc, #24]	@ (80013c4 <HAL_MspInit+0x30>)
 80013ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80013b0:	f003 0302 	and.w	r3, r3, #2
 80013b4:	607b      	str	r3, [r7, #4]
 80013b6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013b8:	bf00      	nop
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	58024400 	.word	0x58024400

080013c8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b08a      	sub	sp, #40	@ 0x28
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d0:	f107 0314 	add.w	r3, r7, #20
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a29      	ldr	r2, [pc, #164]	@ (800148c <HAL_SPI_MspInit+0xc4>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d14c      	bne.n	8001484 <HAL_SPI_MspInit+0xbc>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013ea:	4b29      	ldr	r3, [pc, #164]	@ (8001490 <HAL_SPI_MspInit+0xc8>)
 80013ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80013f0:	4a27      	ldr	r2, [pc, #156]	@ (8001490 <HAL_SPI_MspInit+0xc8>)
 80013f2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80013f6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80013fa:	4b25      	ldr	r3, [pc, #148]	@ (8001490 <HAL_SPI_MspInit+0xc8>)
 80013fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001400:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001404:	613b      	str	r3, [r7, #16]
 8001406:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001408:	4b21      	ldr	r3, [pc, #132]	@ (8001490 <HAL_SPI_MspInit+0xc8>)
 800140a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800140e:	4a20      	ldr	r2, [pc, #128]	@ (8001490 <HAL_SPI_MspInit+0xc8>)
 8001410:	f043 0301 	orr.w	r3, r3, #1
 8001414:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001418:	4b1d      	ldr	r3, [pc, #116]	@ (8001490 <HAL_SPI_MspInit+0xc8>)
 800141a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001426:	4b1a      	ldr	r3, [pc, #104]	@ (8001490 <HAL_SPI_MspInit+0xc8>)
 8001428:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800142c:	4a18      	ldr	r2, [pc, #96]	@ (8001490 <HAL_SPI_MspInit+0xc8>)
 800142e:	f043 0302 	orr.w	r3, r3, #2
 8001432:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001436:	4b16      	ldr	r3, [pc, #88]	@ (8001490 <HAL_SPI_MspInit+0xc8>)
 8001438:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800143c:	f003 0302 	and.w	r3, r3, #2
 8001440:	60bb      	str	r3, [r7, #8]
 8001442:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001444:	2360      	movs	r3, #96	@ 0x60
 8001446:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001448:	2302      	movs	r3, #2
 800144a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144c:	2300      	movs	r3, #0
 800144e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001450:	2300      	movs	r3, #0
 8001452:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001454:	2305      	movs	r3, #5
 8001456:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001458:	f107 0314 	add.w	r3, r7, #20
 800145c:	4619      	mov	r1, r3
 800145e:	480d      	ldr	r0, [pc, #52]	@ (8001494 <HAL_SPI_MspInit+0xcc>)
 8001460:	f000 fc98 	bl	8001d94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001464:	2320      	movs	r3, #32
 8001466:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001468:	2302      	movs	r3, #2
 800146a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001470:	2300      	movs	r3, #0
 8001472:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001474:	2305      	movs	r3, #5
 8001476:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	4619      	mov	r1, r3
 800147e:	4806      	ldr	r0, [pc, #24]	@ (8001498 <HAL_SPI_MspInit+0xd0>)
 8001480:	f000 fc88 	bl	8001d94 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001484:	bf00      	nop
 8001486:	3728      	adds	r7, #40	@ 0x28
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40013000 	.word	0x40013000
 8001490:	58024400 	.word	0x58024400
 8001494:	58020000 	.word	0x58020000
 8001498:	58020400 	.word	0x58020400

0800149c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014a0:	bf00      	nop
 80014a2:	e7fd      	b.n	80014a0 <NMI_Handler+0x4>

080014a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014a8:	bf00      	nop
 80014aa:	e7fd      	b.n	80014a8 <HardFault_Handler+0x4>

080014ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014b0:	bf00      	nop
 80014b2:	e7fd      	b.n	80014b0 <MemManage_Handler+0x4>

080014b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014b8:	bf00      	nop
 80014ba:	e7fd      	b.n	80014b8 <BusFault_Handler+0x4>

080014bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014c0:	bf00      	nop
 80014c2:	e7fd      	b.n	80014c0 <UsageFault_Handler+0x4>

080014c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014c8:	bf00      	nop
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr

080014d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014d2:	b480      	push	{r7}
 80014d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr

080014ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014f2:	f000 fa6d 	bl	80019d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}

080014fa <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 80014fe:	2000      	movs	r0, #0
 8001500:	f000 f914 	bl	800172c <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001504:	bf00      	nop
 8001506:	bd80      	pop	{r7, pc}

08001508 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001508:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001540 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800150c:	f7ff f87a 	bl	8000604 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001510:	480c      	ldr	r0, [pc, #48]	@ (8001544 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001512:	490d      	ldr	r1, [pc, #52]	@ (8001548 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001514:	4a0d      	ldr	r2, [pc, #52]	@ (800154c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001516:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001518:	e002      	b.n	8001520 <LoopCopyDataInit>

0800151a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800151a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800151c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800151e:	3304      	adds	r3, #4

08001520 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001520:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001522:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001524:	d3f9      	bcc.n	800151a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001526:	4a0a      	ldr	r2, [pc, #40]	@ (8001550 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001528:	4c0a      	ldr	r4, [pc, #40]	@ (8001554 <LoopFillZerobss+0x22>)
  movs r3, #0
 800152a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800152c:	e001      	b.n	8001532 <LoopFillZerobss>

0800152e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800152e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001530:	3204      	adds	r2, #4

08001532 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001532:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001534:	d3fb      	bcc.n	800152e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001536:	f005 fe3d 	bl	80071b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800153a:	f7ff f8f9 	bl	8000730 <main>
  bx  lr
 800153e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001540:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001544:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001548:	2400004c 	.word	0x2400004c
  ldr r2, =_sidata
 800154c:	0800739c 	.word	0x0800739c
  ldr r2, =_sbss
 8001550:	2400004c 	.word	0x2400004c
  ldr r4, =_ebss
 8001554:	240001b8 	.word	0x240001b8

08001558 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001558:	e7fe      	b.n	8001558 <ADC3_IRQHandler>
	...

0800155c <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08c      	sub	sp, #48	@ 0x30
 8001560:	af00      	add	r7, sp, #0
 8001562:	4603      	mov	r3, r0
 8001564:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001566:	2300      	movs	r3, #0
 8001568:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800156a:	79fb      	ldrb	r3, [r7, #7]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d009      	beq.n	8001584 <BSP_LED_Init+0x28>
 8001570:	79fb      	ldrb	r3, [r7, #7]
 8001572:	2b01      	cmp	r3, #1
 8001574:	d006      	beq.n	8001584 <BSP_LED_Init+0x28>
 8001576:	79fb      	ldrb	r3, [r7, #7]
 8001578:	2b02      	cmp	r3, #2
 800157a:	d003      	beq.n	8001584 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800157c:	f06f 0301 	mvn.w	r3, #1
 8001580:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001582:	e055      	b.n	8001630 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8001584:	79fb      	ldrb	r3, [r7, #7]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d10f      	bne.n	80015aa <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 800158a:	4b2c      	ldr	r3, [pc, #176]	@ (800163c <BSP_LED_Init+0xe0>)
 800158c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001590:	4a2a      	ldr	r2, [pc, #168]	@ (800163c <BSP_LED_Init+0xe0>)
 8001592:	f043 0302 	orr.w	r3, r3, #2
 8001596:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800159a:	4b28      	ldr	r3, [pc, #160]	@ (800163c <BSP_LED_Init+0xe0>)
 800159c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015a0:	f003 0302 	and.w	r3, r3, #2
 80015a4:	617b      	str	r3, [r7, #20]
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	e021      	b.n	80015ee <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 80015aa:	79fb      	ldrb	r3, [r7, #7]
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d10f      	bne.n	80015d0 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 80015b0:	4b22      	ldr	r3, [pc, #136]	@ (800163c <BSP_LED_Init+0xe0>)
 80015b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015b6:	4a21      	ldr	r2, [pc, #132]	@ (800163c <BSP_LED_Init+0xe0>)
 80015b8:	f043 0310 	orr.w	r3, r3, #16
 80015bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015c0:	4b1e      	ldr	r3, [pc, #120]	@ (800163c <BSP_LED_Init+0xe0>)
 80015c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015c6:	f003 0310 	and.w	r3, r3, #16
 80015ca:	613b      	str	r3, [r7, #16]
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	e00e      	b.n	80015ee <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 80015d0:	4b1a      	ldr	r3, [pc, #104]	@ (800163c <BSP_LED_Init+0xe0>)
 80015d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015d6:	4a19      	ldr	r2, [pc, #100]	@ (800163c <BSP_LED_Init+0xe0>)
 80015d8:	f043 0302 	orr.w	r3, r3, #2
 80015dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015e0:	4b16      	ldr	r3, [pc, #88]	@ (800163c <BSP_LED_Init+0xe0>)
 80015e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 80015ee:	79fb      	ldrb	r3, [r7, #7]
 80015f0:	4a13      	ldr	r2, [pc, #76]	@ (8001640 <BSP_LED_Init+0xe4>)
 80015f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015f6:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80015f8:	2301      	movs	r3, #1
 80015fa:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001600:	2303      	movs	r3, #3
 8001602:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	4a0f      	ldr	r2, [pc, #60]	@ (8001644 <BSP_LED_Init+0xe8>)
 8001608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800160c:	f107 0218 	add.w	r2, r7, #24
 8001610:	4611      	mov	r1, r2
 8001612:	4618      	mov	r0, r3
 8001614:	f000 fbbe 	bl	8001d94 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001618:	79fb      	ldrb	r3, [r7, #7]
 800161a:	4a0a      	ldr	r2, [pc, #40]	@ (8001644 <BSP_LED_Init+0xe8>)
 800161c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001620:	79fb      	ldrb	r3, [r7, #7]
 8001622:	4a07      	ldr	r2, [pc, #28]	@ (8001640 <BSP_LED_Init+0xe4>)
 8001624:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001628:	2200      	movs	r2, #0
 800162a:	4619      	mov	r1, r3
 800162c:	f000 fd62 	bl	80020f4 <HAL_GPIO_WritePin>
  }

  return ret;
 8001630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8001632:	4618      	mov	r0, r3
 8001634:	3730      	adds	r7, #48	@ 0x30
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	58024400 	.word	0x58024400
 8001640:	08007368 	.word	0x08007368
 8001644:	2400002c 	.word	0x2400002c

08001648 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b088      	sub	sp, #32
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	460a      	mov	r2, r1
 8001652:	71fb      	strb	r3, [r7, #7]
 8001654:	4613      	mov	r3, r2
 8001656:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001658:	4b2e      	ldr	r3, [pc, #184]	@ (8001714 <BSP_PB_Init+0xcc>)
 800165a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800165e:	4a2d      	ldr	r2, [pc, #180]	@ (8001714 <BSP_PB_Init+0xcc>)
 8001660:	f043 0304 	orr.w	r3, r3, #4
 8001664:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001668:	4b2a      	ldr	r3, [pc, #168]	@ (8001714 <BSP_PB_Init+0xcc>)
 800166a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800166e:	f003 0304 	and.w	r3, r3, #4
 8001672:	60bb      	str	r3, [r7, #8]
 8001674:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8001676:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800167a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 800167c:	2302      	movs	r3, #2
 800167e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001680:	2302      	movs	r3, #2
 8001682:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8001684:	79bb      	ldrb	r3, [r7, #6]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d10c      	bne.n	80016a4 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800168a:	2300      	movs	r3, #0
 800168c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 800168e:	79fb      	ldrb	r3, [r7, #7]
 8001690:	4a21      	ldr	r2, [pc, #132]	@ (8001718 <BSP_PB_Init+0xd0>)
 8001692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001696:	f107 020c 	add.w	r2, r7, #12
 800169a:	4611      	mov	r1, r2
 800169c:	4618      	mov	r0, r3
 800169e:	f000 fb79 	bl	8001d94 <HAL_GPIO_Init>
 80016a2:	e031      	b.n	8001708 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80016a4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80016a8:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80016aa:	79fb      	ldrb	r3, [r7, #7]
 80016ac:	4a1a      	ldr	r2, [pc, #104]	@ (8001718 <BSP_PB_Init+0xd0>)
 80016ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016b2:	f107 020c 	add.w	r2, r7, #12
 80016b6:	4611      	mov	r1, r2
 80016b8:	4618      	mov	r0, r3
 80016ba:	f000 fb6b 	bl	8001d94 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 80016be:	79fb      	ldrb	r3, [r7, #7]
 80016c0:	00db      	lsls	r3, r3, #3
 80016c2:	4a16      	ldr	r2, [pc, #88]	@ (800171c <BSP_PB_Init+0xd4>)
 80016c4:	441a      	add	r2, r3
 80016c6:	79fb      	ldrb	r3, [r7, #7]
 80016c8:	4915      	ldr	r1, [pc, #84]	@ (8001720 <BSP_PB_Init+0xd8>)
 80016ca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80016ce:	4619      	mov	r1, r3
 80016d0:	4610      	mov	r0, r2
 80016d2:	f000 fb0e 	bl	8001cf2 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80016d6:	79fb      	ldrb	r3, [r7, #7]
 80016d8:	00db      	lsls	r3, r3, #3
 80016da:	4a10      	ldr	r2, [pc, #64]	@ (800171c <BSP_PB_Init+0xd4>)
 80016dc:	1898      	adds	r0, r3, r2
 80016de:	79fb      	ldrb	r3, [r7, #7]
 80016e0:	4a10      	ldr	r2, [pc, #64]	@ (8001724 <BSP_PB_Init+0xdc>)
 80016e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016e6:	461a      	mov	r2, r3
 80016e8:	2100      	movs	r1, #0
 80016ea:	f000 fae3 	bl	8001cb4 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80016ee:	2028      	movs	r0, #40	@ 0x28
 80016f0:	79fb      	ldrb	r3, [r7, #7]
 80016f2:	4a0d      	ldr	r2, [pc, #52]	@ (8001728 <BSP_PB_Init+0xe0>)
 80016f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016f8:	2200      	movs	r2, #0
 80016fa:	4619      	mov	r1, r3
 80016fc:	f000 fa93 	bl	8001c26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001700:	2328      	movs	r3, #40	@ 0x28
 8001702:	4618      	mov	r0, r3
 8001704:	f000 faa9 	bl	8001c5a <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001708:	2300      	movs	r3, #0
}
 800170a:	4618      	mov	r0, r3
 800170c:	3720      	adds	r7, #32
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	58024400 	.word	0x58024400
 8001718:	24000038 	.word	0x24000038
 800171c:	24000118 	.word	0x24000118
 8001720:	08007370 	.word	0x08007370
 8001724:	2400003c 	.word	0x2400003c
 8001728:	24000040 	.word	0x24000040

0800172c <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001736:	79fb      	ldrb	r3, [r7, #7]
 8001738:	00db      	lsls	r3, r3, #3
 800173a:	4a04      	ldr	r2, [pc, #16]	@ (800174c <BSP_PB_IRQHandler+0x20>)
 800173c:	4413      	add	r3, r2
 800173e:	4618      	mov	r0, r3
 8001740:	f000 faec 	bl	8001d1c <HAL_EXTI_IRQHandler>
}
 8001744:	bf00      	nop
 8001746:	3708      	adds	r7, #8
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	24000118 	.word	0x24000118

08001750 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 800175a:	bf00      	nop
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
	...

08001768 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	4603      	mov	r3, r0
 8001770:	6039      	str	r1, [r7, #0]
 8001772:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001774:	2300      	movs	r3, #0
 8001776:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8001778:	79fb      	ldrb	r3, [r7, #7]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d003      	beq.n	8001786 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800177e:	f06f 0301 	mvn.w	r3, #1
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	e018      	b.n	80017b8 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8001786:	79fb      	ldrb	r3, [r7, #7]
 8001788:	2294      	movs	r2, #148	@ 0x94
 800178a:	fb02 f303 	mul.w	r3, r2, r3
 800178e:	4a0d      	ldr	r2, [pc, #52]	@ (80017c4 <BSP_COM_Init+0x5c>)
 8001790:	4413      	add	r3, r2
 8001792:	4618      	mov	r0, r3
 8001794:	f000 f852 	bl	800183c <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001798:	79fb      	ldrb	r3, [r7, #7]
 800179a:	2294      	movs	r2, #148	@ 0x94
 800179c:	fb02 f303 	mul.w	r3, r2, r3
 80017a0:	4a08      	ldr	r2, [pc, #32]	@ (80017c4 <BSP_COM_Init+0x5c>)
 80017a2:	4413      	add	r3, r2
 80017a4:	6839      	ldr	r1, [r7, #0]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f000 f80e 	bl	80017c8 <MX_USART3_Init>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d002      	beq.n	80017b8 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80017b2:	f06f 0303 	mvn.w	r3, #3
 80017b6:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80017b8:	68fb      	ldr	r3, [r7, #12]
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3710      	adds	r7, #16
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	24000120 	.word	0x24000120

080017c8 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 80017d2:	4b15      	ldr	r3, [pc, #84]	@ (8001828 <MX_USART3_Init+0x60>)
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	220c      	movs	r2, #12
 80017e6:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	895b      	ldrh	r3, [r3, #10]
 80017ec:	461a      	mov	r2, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685a      	ldr	r2, [r3, #4]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	891b      	ldrh	r3, [r3, #8]
 80017fe:	461a      	mov	r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	899b      	ldrh	r3, [r3, #12]
 8001808:	461a      	mov	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001814:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f004 fce1 	bl	80061de <HAL_UART_Init>
 800181c:	4603      	mov	r3, r0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	24000028 	.word	0x24000028

0800182c <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001830:	2000      	movs	r0, #0
 8001832:	f7ff ff8d 	bl	8001750 <BSP_PB_Callback>
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
	...

0800183c <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b08a      	sub	sp, #40	@ 0x28
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001844:	4b27      	ldr	r3, [pc, #156]	@ (80018e4 <COM1_MspInit+0xa8>)
 8001846:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800184a:	4a26      	ldr	r2, [pc, #152]	@ (80018e4 <COM1_MspInit+0xa8>)
 800184c:	f043 0308 	orr.w	r3, r3, #8
 8001850:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001854:	4b23      	ldr	r3, [pc, #140]	@ (80018e4 <COM1_MspInit+0xa8>)
 8001856:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800185a:	f003 0308 	and.w	r3, r3, #8
 800185e:	613b      	str	r3, [r7, #16]
 8001860:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001862:	4b20      	ldr	r3, [pc, #128]	@ (80018e4 <COM1_MspInit+0xa8>)
 8001864:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001868:	4a1e      	ldr	r2, [pc, #120]	@ (80018e4 <COM1_MspInit+0xa8>)
 800186a:	f043 0308 	orr.w	r3, r3, #8
 800186e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001872:	4b1c      	ldr	r3, [pc, #112]	@ (80018e4 <COM1_MspInit+0xa8>)
 8001874:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001878:	f003 0308 	and.w	r3, r3, #8
 800187c:	60fb      	str	r3, [r7, #12]
 800187e:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001880:	4b18      	ldr	r3, [pc, #96]	@ (80018e4 <COM1_MspInit+0xa8>)
 8001882:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001886:	4a17      	ldr	r2, [pc, #92]	@ (80018e4 <COM1_MspInit+0xa8>)
 8001888:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800188c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001890:	4b14      	ldr	r3, [pc, #80]	@ (80018e4 <COM1_MspInit+0xa8>)
 8001892:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001896:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800189a:	60bb      	str	r3, [r7, #8]
 800189c:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 800189e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018a2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80018a4:	2302      	movs	r3, #2
 80018a6:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80018a8:	2302      	movs	r3, #2
 80018aa:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80018ac:	2301      	movs	r3, #1
 80018ae:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 80018b0:	2307      	movs	r3, #7
 80018b2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 80018b4:	f107 0314 	add.w	r3, r7, #20
 80018b8:	4619      	mov	r1, r3
 80018ba:	480b      	ldr	r0, [pc, #44]	@ (80018e8 <COM1_MspInit+0xac>)
 80018bc:	f000 fa6a 	bl	8001d94 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 80018c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018c4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80018c6:	2302      	movs	r3, #2
 80018c8:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 80018ca:	2307      	movs	r3, #7
 80018cc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 80018ce:	f107 0314 	add.w	r3, r7, #20
 80018d2:	4619      	mov	r1, r3
 80018d4:	4804      	ldr	r0, [pc, #16]	@ (80018e8 <COM1_MspInit+0xac>)
 80018d6:	f000 fa5d 	bl	8001d94 <HAL_GPIO_Init>
}
 80018da:	bf00      	nop
 80018dc:	3728      	adds	r7, #40	@ 0x28
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	58024400 	.word	0x58024400
 80018e8:	58020c00 	.word	0x58020c00

080018ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018f2:	2003      	movs	r0, #3
 80018f4:	f000 f98c 	bl	8001c10 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80018f8:	f001 fac8 	bl	8002e8c <HAL_RCC_GetSysClockFreq>
 80018fc:	4602      	mov	r2, r0
 80018fe:	4b15      	ldr	r3, [pc, #84]	@ (8001954 <HAL_Init+0x68>)
 8001900:	699b      	ldr	r3, [r3, #24]
 8001902:	0a1b      	lsrs	r3, r3, #8
 8001904:	f003 030f 	and.w	r3, r3, #15
 8001908:	4913      	ldr	r1, [pc, #76]	@ (8001958 <HAL_Init+0x6c>)
 800190a:	5ccb      	ldrb	r3, [r1, r3]
 800190c:	f003 031f 	and.w	r3, r3, #31
 8001910:	fa22 f303 	lsr.w	r3, r2, r3
 8001914:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001916:	4b0f      	ldr	r3, [pc, #60]	@ (8001954 <HAL_Init+0x68>)
 8001918:	699b      	ldr	r3, [r3, #24]
 800191a:	f003 030f 	and.w	r3, r3, #15
 800191e:	4a0e      	ldr	r2, [pc, #56]	@ (8001958 <HAL_Init+0x6c>)
 8001920:	5cd3      	ldrb	r3, [r2, r3]
 8001922:	f003 031f 	and.w	r3, r3, #31
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	fa22 f303 	lsr.w	r3, r2, r3
 800192c:	4a0b      	ldr	r2, [pc, #44]	@ (800195c <HAL_Init+0x70>)
 800192e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001930:	4a0b      	ldr	r2, [pc, #44]	@ (8001960 <HAL_Init+0x74>)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001936:	2000      	movs	r0, #0
 8001938:	f000 f814 	bl	8001964 <HAL_InitTick>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e002      	b.n	800194c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001946:	f7ff fd25 	bl	8001394 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800194a:	2300      	movs	r3, #0
}
 800194c:	4618      	mov	r0, r3
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	58024400 	.word	0x58024400
 8001958:	08007358 	.word	0x08007358
 800195c:	24000004 	.word	0x24000004
 8001960:	24000000 	.word	0x24000000

08001964 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800196c:	4b15      	ldr	r3, [pc, #84]	@ (80019c4 <HAL_InitTick+0x60>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d101      	bne.n	8001978 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e021      	b.n	80019bc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001978:	4b13      	ldr	r3, [pc, #76]	@ (80019c8 <HAL_InitTick+0x64>)
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	4b11      	ldr	r3, [pc, #68]	@ (80019c4 <HAL_InitTick+0x60>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	4619      	mov	r1, r3
 8001982:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001986:	fbb3 f3f1 	udiv	r3, r3, r1
 800198a:	fbb2 f3f3 	udiv	r3, r2, r3
 800198e:	4618      	mov	r0, r3
 8001990:	f000 f971 	bl	8001c76 <HAL_SYSTICK_Config>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e00e      	b.n	80019bc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2b0f      	cmp	r3, #15
 80019a2:	d80a      	bhi.n	80019ba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019a4:	2200      	movs	r2, #0
 80019a6:	6879      	ldr	r1, [r7, #4]
 80019a8:	f04f 30ff 	mov.w	r0, #4294967295
 80019ac:	f000 f93b 	bl	8001c26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019b0:	4a06      	ldr	r2, [pc, #24]	@ (80019cc <HAL_InitTick+0x68>)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019b6:	2300      	movs	r3, #0
 80019b8:	e000      	b.n	80019bc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	24000048 	.word	0x24000048
 80019c8:	24000000 	.word	0x24000000
 80019cc:	24000044 	.word	0x24000044

080019d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019d4:	4b06      	ldr	r3, [pc, #24]	@ (80019f0 <HAL_IncTick+0x20>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	461a      	mov	r2, r3
 80019da:	4b06      	ldr	r3, [pc, #24]	@ (80019f4 <HAL_IncTick+0x24>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4413      	add	r3, r2
 80019e0:	4a04      	ldr	r2, [pc, #16]	@ (80019f4 <HAL_IncTick+0x24>)
 80019e2:	6013      	str	r3, [r2, #0]
}
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	24000048 	.word	0x24000048
 80019f4:	240001b4 	.word	0x240001b4

080019f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  return uwTick;
 80019fc:	4b03      	ldr	r3, [pc, #12]	@ (8001a0c <HAL_GetTick+0x14>)
 80019fe:	681b      	ldr	r3, [r3, #0]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	240001b4 	.word	0x240001b4

08001a10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a18:	f7ff ffee 	bl	80019f8 <HAL_GetTick>
 8001a1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a28:	d005      	beq.n	8001a36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a2a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a54 <HAL_Delay+0x44>)
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	461a      	mov	r2, r3
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	4413      	add	r3, r2
 8001a34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a36:	bf00      	nop
 8001a38:	f7ff ffde 	bl	80019f8 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	68fa      	ldr	r2, [r7, #12]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d8f7      	bhi.n	8001a38 <HAL_Delay+0x28>
  {
  }
}
 8001a48:	bf00      	nop
 8001a4a:	bf00      	nop
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	24000048 	.word	0x24000048

08001a58 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001a5c:	4b03      	ldr	r3, [pc, #12]	@ (8001a6c <HAL_GetREVID+0x14>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	0c1b      	lsrs	r3, r3, #16
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	5c001000 	.word	0x5c001000

08001a70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f003 0307 	and.w	r3, r3, #7
 8001a7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a80:	4b0b      	ldr	r3, [pc, #44]	@ (8001ab0 <__NVIC_SetPriorityGrouping+0x40>)
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a86:	68ba      	ldr	r2, [r7, #8]
 8001a88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a98:	4b06      	ldr	r3, [pc, #24]	@ (8001ab4 <__NVIC_SetPriorityGrouping+0x44>)
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a9e:	4a04      	ldr	r2, [pc, #16]	@ (8001ab0 <__NVIC_SetPriorityGrouping+0x40>)
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	60d3      	str	r3, [r2, #12]
}
 8001aa4:	bf00      	nop
 8001aa6:	3714      	adds	r7, #20
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	e000ed00 	.word	0xe000ed00
 8001ab4:	05fa0000 	.word	0x05fa0000

08001ab8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001abc:	4b04      	ldr	r3, [pc, #16]	@ (8001ad0 <__NVIC_GetPriorityGrouping+0x18>)
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	0a1b      	lsrs	r3, r3, #8
 8001ac2:	f003 0307 	and.w	r3, r3, #7
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	e000ed00 	.word	0xe000ed00

08001ad4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	4603      	mov	r3, r0
 8001adc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ade:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	db0b      	blt.n	8001afe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ae6:	88fb      	ldrh	r3, [r7, #6]
 8001ae8:	f003 021f 	and.w	r2, r3, #31
 8001aec:	4907      	ldr	r1, [pc, #28]	@ (8001b0c <__NVIC_EnableIRQ+0x38>)
 8001aee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001af2:	095b      	lsrs	r3, r3, #5
 8001af4:	2001      	movs	r0, #1
 8001af6:	fa00 f202 	lsl.w	r2, r0, r2
 8001afa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001afe:	bf00      	nop
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	e000e100 	.word	0xe000e100

08001b10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	4603      	mov	r3, r0
 8001b18:	6039      	str	r1, [r7, #0]
 8001b1a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	db0a      	blt.n	8001b3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	b2da      	uxtb	r2, r3
 8001b28:	490c      	ldr	r1, [pc, #48]	@ (8001b5c <__NVIC_SetPriority+0x4c>)
 8001b2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b2e:	0112      	lsls	r2, r2, #4
 8001b30:	b2d2      	uxtb	r2, r2
 8001b32:	440b      	add	r3, r1
 8001b34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b38:	e00a      	b.n	8001b50 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	b2da      	uxtb	r2, r3
 8001b3e:	4908      	ldr	r1, [pc, #32]	@ (8001b60 <__NVIC_SetPriority+0x50>)
 8001b40:	88fb      	ldrh	r3, [r7, #6]
 8001b42:	f003 030f 	and.w	r3, r3, #15
 8001b46:	3b04      	subs	r3, #4
 8001b48:	0112      	lsls	r2, r2, #4
 8001b4a:	b2d2      	uxtb	r2, r2
 8001b4c:	440b      	add	r3, r1
 8001b4e:	761a      	strb	r2, [r3, #24]
}
 8001b50:	bf00      	nop
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr
 8001b5c:	e000e100 	.word	0xe000e100
 8001b60:	e000ed00 	.word	0xe000ed00

08001b64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b089      	sub	sp, #36	@ 0x24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	f003 0307 	and.w	r3, r3, #7
 8001b76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	f1c3 0307 	rsb	r3, r3, #7
 8001b7e:	2b04      	cmp	r3, #4
 8001b80:	bf28      	it	cs
 8001b82:	2304      	movcs	r3, #4
 8001b84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	3304      	adds	r3, #4
 8001b8a:	2b06      	cmp	r3, #6
 8001b8c:	d902      	bls.n	8001b94 <NVIC_EncodePriority+0x30>
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	3b03      	subs	r3, #3
 8001b92:	e000      	b.n	8001b96 <NVIC_EncodePriority+0x32>
 8001b94:	2300      	movs	r3, #0
 8001b96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b98:	f04f 32ff 	mov.w	r2, #4294967295
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba2:	43da      	mvns	r2, r3
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	401a      	ands	r2, r3
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bac:	f04f 31ff 	mov.w	r1, #4294967295
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb6:	43d9      	mvns	r1, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bbc:	4313      	orrs	r3, r2
         );
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3724      	adds	r7, #36	@ 0x24
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
	...

08001bcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bdc:	d301      	bcc.n	8001be2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bde:	2301      	movs	r3, #1
 8001be0:	e00f      	b.n	8001c02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001be2:	4a0a      	ldr	r2, [pc, #40]	@ (8001c0c <SysTick_Config+0x40>)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	3b01      	subs	r3, #1
 8001be8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bea:	210f      	movs	r1, #15
 8001bec:	f04f 30ff 	mov.w	r0, #4294967295
 8001bf0:	f7ff ff8e 	bl	8001b10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bf4:	4b05      	ldr	r3, [pc, #20]	@ (8001c0c <SysTick_Config+0x40>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bfa:	4b04      	ldr	r3, [pc, #16]	@ (8001c0c <SysTick_Config+0x40>)
 8001bfc:	2207      	movs	r2, #7
 8001bfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	e000e010 	.word	0xe000e010

08001c10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f7ff ff29 	bl	8001a70 <__NVIC_SetPriorityGrouping>
}
 8001c1e:	bf00      	nop
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b086      	sub	sp, #24
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	60b9      	str	r1, [r7, #8]
 8001c30:	607a      	str	r2, [r7, #4]
 8001c32:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c34:	f7ff ff40 	bl	8001ab8 <__NVIC_GetPriorityGrouping>
 8001c38:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	68b9      	ldr	r1, [r7, #8]
 8001c3e:	6978      	ldr	r0, [r7, #20]
 8001c40:	f7ff ff90 	bl	8001b64 <NVIC_EncodePriority>
 8001c44:	4602      	mov	r2, r0
 8001c46:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c4a:	4611      	mov	r1, r2
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff ff5f 	bl	8001b10 <__NVIC_SetPriority>
}
 8001c52:	bf00      	nop
 8001c54:	3718      	adds	r7, #24
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b082      	sub	sp, #8
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	4603      	mov	r3, r0
 8001c62:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff ff33 	bl	8001ad4 <__NVIC_EnableIRQ>
}
 8001c6e:	bf00      	nop
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b082      	sub	sp, #8
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f7ff ffa4 	bl	8001bcc <SysTick_Config>
 8001c84:	4603      	mov	r3, r0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
	...

08001c90 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8001c94:	4b06      	ldr	r3, [pc, #24]	@ (8001cb0 <HAL_GetCurrentCPUID+0x20>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c9c:	2b70      	cmp	r3, #112	@ 0x70
 8001c9e:	d101      	bne.n	8001ca4 <HAL_GetCurrentCPUID+0x14>
  {
    return  CM7_CPUID;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e000      	b.n	8001ca6 <HAL_GetCurrentCPUID+0x16>
  }
  else
  {
    return CM4_CPUID;
 8001ca4:	2301      	movs	r3, #1
  }
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	e000ed00 	.word	0xe000ed00

08001cb4 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b087      	sub	sp, #28
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	607a      	str	r2, [r7, #4]
 8001cc0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d101      	bne.n	8001cd0 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e00a      	b.n	8001ce6 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8001cd0:	7afb      	ldrb	r3, [r7, #11]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d103      	bne.n	8001cde <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	605a      	str	r2, [r3, #4]
      break;
 8001cdc:	e002      	b.n	8001ce4 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	75fb      	strb	r3, [r7, #23]
      break;
 8001ce2:	bf00      	nop
  }

  return status;
 8001ce4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	371c      	adds	r7, #28
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr

08001cf2 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	b083      	sub	sp, #12
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
 8001cfa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d101      	bne.n	8001d06 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e003      	b.n	8001d0e <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	683a      	ldr	r2, [r7, #0]
 8001d0a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
  }
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
	...

08001d1c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b086      	sub	sp, #24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	0c1b      	lsrs	r3, r3, #16
 8001d2a:	f003 0303 	and.w	r3, r3, #3
 8001d2e:	613b      	str	r3, [r7, #16]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 031f 	and.w	r3, r3, #31
 8001d38:	2201      	movs	r2, #1
 8001d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3e:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8001d40:	f7ff ffa6 	bl	8001c90 <HAL_GetCurrentCPUID>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b03      	cmp	r3, #3
 8001d48:	d105      	bne.n	8001d56 <HAL_EXTI_IRQHandler+0x3a>
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	011a      	lsls	r2, r3, #4
 8001d4e:	4b0f      	ldr	r3, [pc, #60]	@ (8001d8c <HAL_EXTI_IRQHandler+0x70>)
 8001d50:	4413      	add	r3, r2
 8001d52:	617b      	str	r3, [r7, #20]
 8001d54:	e004      	b.n	8001d60 <HAL_EXTI_IRQHandler+0x44>
  }
  else /* Cortex-M4*/
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	011a      	lsls	r2, r3, #4
 8001d5a:	4b0d      	ldr	r3, [pc, #52]	@ (8001d90 <HAL_EXTI_IRQHandler+0x74>)
 8001d5c:	4413      	add	r3, r2
 8001d5e:	617b      	str	r3, [r7, #20]
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	68fa      	ldr	r2, [r7, #12]
 8001d66:	4013      	ands	r3, r2
 8001d68:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d009      	beq.n	8001d84 <HAL_EXTI_IRQHandler+0x68>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	68fa      	ldr	r2, [r7, #12]
 8001d74:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d002      	beq.n	8001d84 <HAL_EXTI_IRQHandler+0x68>
    {
      hexti->PendingCallback();
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	4798      	blx	r3
    }
  }
}
 8001d84:	bf00      	nop
 8001d86:	3718      	adds	r7, #24
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	58000088 	.word	0x58000088
 8001d90:	580000c8 	.word	0x580000c8

08001d94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b089      	sub	sp, #36	@ 0x24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001da2:	4b89      	ldr	r3, [pc, #548]	@ (8001fc8 <HAL_GPIO_Init+0x234>)
 8001da4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001da6:	e194      	b.n	80020d2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	2101      	movs	r1, #1
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	fa01 f303 	lsl.w	r3, r1, r3
 8001db4:	4013      	ands	r3, r2
 8001db6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	f000 8186 	beq.w	80020cc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f003 0303 	and.w	r3, r3, #3
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d005      	beq.n	8001dd8 <HAL_GPIO_Init+0x44>
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f003 0303 	and.w	r3, r3, #3
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d130      	bne.n	8001e3a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	2203      	movs	r2, #3
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	43db      	mvns	r3, r3
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	4013      	ands	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	68da      	ldr	r2, [r3, #12]
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e0e:	2201      	movs	r2, #1
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	43db      	mvns	r3, r3
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	091b      	lsrs	r3, r3, #4
 8001e24:	f003 0201 	and.w	r2, r3, #1
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f003 0303 	and.w	r3, r3, #3
 8001e42:	2b03      	cmp	r3, #3
 8001e44:	d017      	beq.n	8001e76 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	2203      	movs	r2, #3
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	43db      	mvns	r3, r3
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	689a      	ldr	r2, [r3, #8]
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f003 0303 	and.w	r3, r3, #3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d123      	bne.n	8001eca <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	08da      	lsrs	r2, r3, #3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	3208      	adds	r2, #8
 8001e8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	f003 0307 	and.w	r3, r3, #7
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	220f      	movs	r2, #15
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	43db      	mvns	r3, r3
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	691a      	ldr	r2, [r3, #16]
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	f003 0307 	and.w	r3, r3, #7
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	08da      	lsrs	r2, r3, #3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	3208      	adds	r2, #8
 8001ec4:	69b9      	ldr	r1, [r7, #24]
 8001ec6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	2203      	movs	r2, #3
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	43db      	mvns	r3, r3
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f003 0203 	and.w	r2, r3, #3
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	f000 80e0 	beq.w	80020cc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f0c:	4b2f      	ldr	r3, [pc, #188]	@ (8001fcc <HAL_GPIO_Init+0x238>)
 8001f0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001f12:	4a2e      	ldr	r2, [pc, #184]	@ (8001fcc <HAL_GPIO_Init+0x238>)
 8001f14:	f043 0302 	orr.w	r3, r3, #2
 8001f18:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001f1c:	4b2b      	ldr	r3, [pc, #172]	@ (8001fcc <HAL_GPIO_Init+0x238>)
 8001f1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	60fb      	str	r3, [r7, #12]
 8001f28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f2a:	4a29      	ldr	r2, [pc, #164]	@ (8001fd0 <HAL_GPIO_Init+0x23c>)
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	089b      	lsrs	r3, r3, #2
 8001f30:	3302      	adds	r3, #2
 8001f32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	f003 0303 	and.w	r3, r3, #3
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	220f      	movs	r2, #15
 8001f42:	fa02 f303 	lsl.w	r3, r2, r3
 8001f46:	43db      	mvns	r3, r3
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a20      	ldr	r2, [pc, #128]	@ (8001fd4 <HAL_GPIO_Init+0x240>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d052      	beq.n	8001ffc <HAL_GPIO_Init+0x268>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a1f      	ldr	r2, [pc, #124]	@ (8001fd8 <HAL_GPIO_Init+0x244>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d031      	beq.n	8001fc2 <HAL_GPIO_Init+0x22e>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a1e      	ldr	r2, [pc, #120]	@ (8001fdc <HAL_GPIO_Init+0x248>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d02b      	beq.n	8001fbe <HAL_GPIO_Init+0x22a>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a1d      	ldr	r2, [pc, #116]	@ (8001fe0 <HAL_GPIO_Init+0x24c>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d025      	beq.n	8001fba <HAL_GPIO_Init+0x226>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a1c      	ldr	r2, [pc, #112]	@ (8001fe4 <HAL_GPIO_Init+0x250>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d01f      	beq.n	8001fb6 <HAL_GPIO_Init+0x222>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a1b      	ldr	r2, [pc, #108]	@ (8001fe8 <HAL_GPIO_Init+0x254>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d019      	beq.n	8001fb2 <HAL_GPIO_Init+0x21e>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a1a      	ldr	r2, [pc, #104]	@ (8001fec <HAL_GPIO_Init+0x258>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d013      	beq.n	8001fae <HAL_GPIO_Init+0x21a>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a19      	ldr	r2, [pc, #100]	@ (8001ff0 <HAL_GPIO_Init+0x25c>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d00d      	beq.n	8001faa <HAL_GPIO_Init+0x216>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a18      	ldr	r2, [pc, #96]	@ (8001ff4 <HAL_GPIO_Init+0x260>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d007      	beq.n	8001fa6 <HAL_GPIO_Init+0x212>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a17      	ldr	r2, [pc, #92]	@ (8001ff8 <HAL_GPIO_Init+0x264>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d101      	bne.n	8001fa2 <HAL_GPIO_Init+0x20e>
 8001f9e:	2309      	movs	r3, #9
 8001fa0:	e02d      	b.n	8001ffe <HAL_GPIO_Init+0x26a>
 8001fa2:	230a      	movs	r3, #10
 8001fa4:	e02b      	b.n	8001ffe <HAL_GPIO_Init+0x26a>
 8001fa6:	2308      	movs	r3, #8
 8001fa8:	e029      	b.n	8001ffe <HAL_GPIO_Init+0x26a>
 8001faa:	2307      	movs	r3, #7
 8001fac:	e027      	b.n	8001ffe <HAL_GPIO_Init+0x26a>
 8001fae:	2306      	movs	r3, #6
 8001fb0:	e025      	b.n	8001ffe <HAL_GPIO_Init+0x26a>
 8001fb2:	2305      	movs	r3, #5
 8001fb4:	e023      	b.n	8001ffe <HAL_GPIO_Init+0x26a>
 8001fb6:	2304      	movs	r3, #4
 8001fb8:	e021      	b.n	8001ffe <HAL_GPIO_Init+0x26a>
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e01f      	b.n	8001ffe <HAL_GPIO_Init+0x26a>
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	e01d      	b.n	8001ffe <HAL_GPIO_Init+0x26a>
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e01b      	b.n	8001ffe <HAL_GPIO_Init+0x26a>
 8001fc6:	bf00      	nop
 8001fc8:	58000080 	.word	0x58000080
 8001fcc:	58024400 	.word	0x58024400
 8001fd0:	58000400 	.word	0x58000400
 8001fd4:	58020000 	.word	0x58020000
 8001fd8:	58020400 	.word	0x58020400
 8001fdc:	58020800 	.word	0x58020800
 8001fe0:	58020c00 	.word	0x58020c00
 8001fe4:	58021000 	.word	0x58021000
 8001fe8:	58021400 	.word	0x58021400
 8001fec:	58021800 	.word	0x58021800
 8001ff0:	58021c00 	.word	0x58021c00
 8001ff4:	58022000 	.word	0x58022000
 8001ff8:	58022400 	.word	0x58022400
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	69fa      	ldr	r2, [r7, #28]
 8002000:	f002 0203 	and.w	r2, r2, #3
 8002004:	0092      	lsls	r2, r2, #2
 8002006:	4093      	lsls	r3, r2
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	4313      	orrs	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800200e:	4938      	ldr	r1, [pc, #224]	@ (80020f0 <HAL_GPIO_Init+0x35c>)
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	089b      	lsrs	r3, r3, #2
 8002014:	3302      	adds	r3, #2
 8002016:	69ba      	ldr	r2, [r7, #24]
 8002018:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800201c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	43db      	mvns	r3, r3
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	4013      	ands	r3, r2
 800202c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d003      	beq.n	8002042 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	4313      	orrs	r3, r2
 8002040:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002042:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800204a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	43db      	mvns	r3, r3
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	4013      	ands	r3, r2
 800205a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d003      	beq.n	8002070 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	4313      	orrs	r3, r2
 800206e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002070:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	43db      	mvns	r3, r3
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	4013      	ands	r3, r2
 8002086:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d003      	beq.n	800209c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	4313      	orrs	r3, r2
 800209a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	43db      	mvns	r3, r3
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	4013      	ands	r3, r2
 80020b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d003      	beq.n	80020c6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	3301      	adds	r3, #1
 80020d0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	fa22 f303 	lsr.w	r3, r2, r3
 80020dc:	2b00      	cmp	r3, #0
 80020de:	f47f ae63 	bne.w	8001da8 <HAL_GPIO_Init+0x14>
  }
}
 80020e2:	bf00      	nop
 80020e4:	bf00      	nop
 80020e6:	3724      	adds	r7, #36	@ 0x24
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr
 80020f0:	58000400 	.word	0x58000400

080020f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	460b      	mov	r3, r1
 80020fe:	807b      	strh	r3, [r7, #2]
 8002100:	4613      	mov	r3, r2
 8002102:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002104:	787b      	ldrb	r3, [r7, #1]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d003      	beq.n	8002112 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800210a:	887a      	ldrh	r2, [r7, #2]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002110:	e003      	b.n	800211a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002112:	887b      	ldrh	r3, [r7, #2]
 8002114:	041a      	lsls	r2, r3, #16
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	619a      	str	r2, [r3, #24]
}
 800211a:	bf00      	nop
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr

08002126 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002126:	b480      	push	{r7}
 8002128:	b085      	sub	sp, #20
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
 800212e:	460b      	mov	r3, r1
 8002130:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	695b      	ldr	r3, [r3, #20]
 8002136:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002138:	887a      	ldrh	r2, [r7, #2]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	4013      	ands	r3, r2
 800213e:	041a      	lsls	r2, r3, #16
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	43d9      	mvns	r1, r3
 8002144:	887b      	ldrh	r3, [r7, #2]
 8002146:	400b      	ands	r3, r1
 8002148:	431a      	orrs	r2, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	619a      	str	r2, [r3, #24]
}
 800214e:	bf00      	nop
 8002150:	3714      	adds	r7, #20
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
	...

0800215c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002164:	4a08      	ldr	r2, [pc, #32]	@ (8002188 <HAL_HSEM_FastTake+0x2c>)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	3320      	adds	r3, #32
 800216a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800216e:	4a07      	ldr	r2, [pc, #28]	@ (800218c <HAL_HSEM_FastTake+0x30>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d101      	bne.n	8002178 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002174:	2300      	movs	r3, #0
 8002176:	e000      	b.n	800217a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
}
 800217a:	4618      	mov	r0, r3
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	58026400 	.word	0x58026400
 800218c:	80000300 	.word	0x80000300

08002190 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800219a:	4906      	ldr	r1, [pc, #24]	@ (80021b4 <HAL_HSEM_Release+0x24>)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr
 80021b4:	58026400 	.word	0x58026400

080021b8 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80021c0:	4b29      	ldr	r3, [pc, #164]	@ (8002268 <HAL_PWREx_ConfigSupply+0xb0>)
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	f003 0307 	and.w	r3, r3, #7
 80021c8:	2b06      	cmp	r3, #6
 80021ca:	d00a      	beq.n	80021e2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80021cc:	4b26      	ldr	r3, [pc, #152]	@ (8002268 <HAL_PWREx_ConfigSupply+0xb0>)
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d001      	beq.n	80021de <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e040      	b.n	8002260 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80021de:	2300      	movs	r3, #0
 80021e0:	e03e      	b.n	8002260 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80021e2:	4b21      	ldr	r3, [pc, #132]	@ (8002268 <HAL_PWREx_ConfigSupply+0xb0>)
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80021ea:	491f      	ldr	r1, [pc, #124]	@ (8002268 <HAL_PWREx_ConfigSupply+0xb0>)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80021f2:	f7ff fc01 	bl	80019f8 <HAL_GetTick>
 80021f6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80021f8:	e009      	b.n	800220e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80021fa:	f7ff fbfd 	bl	80019f8 <HAL_GetTick>
 80021fe:	4602      	mov	r2, r0
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002208:	d901      	bls.n	800220e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e028      	b.n	8002260 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800220e:	4b16      	ldr	r3, [pc, #88]	@ (8002268 <HAL_PWREx_ConfigSupply+0xb0>)
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002216:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800221a:	d1ee      	bne.n	80021fa <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2b1e      	cmp	r3, #30
 8002220:	d008      	beq.n	8002234 <HAL_PWREx_ConfigSupply+0x7c>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2b2e      	cmp	r3, #46	@ 0x2e
 8002226:	d005      	beq.n	8002234 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2b1d      	cmp	r3, #29
 800222c:	d002      	beq.n	8002234 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2b2d      	cmp	r3, #45	@ 0x2d
 8002232:	d114      	bne.n	800225e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002234:	f7ff fbe0 	bl	80019f8 <HAL_GetTick>
 8002238:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800223a:	e009      	b.n	8002250 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800223c:	f7ff fbdc 	bl	80019f8 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800224a:	d901      	bls.n	8002250 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e007      	b.n	8002260 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002250:	4b05      	ldr	r3, [pc, #20]	@ (8002268 <HAL_PWREx_ConfigSupply+0xb0>)
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002258:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800225c:	d1ee      	bne.n	800223c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800225e:	2300      	movs	r3, #0
}
 8002260:	4618      	mov	r0, r3
 8002262:	3710      	adds	r7, #16
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	58024800 	.word	0x58024800

0800226c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b08c      	sub	sp, #48	@ 0x30
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d102      	bne.n	8002280 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	f000 bc48 	b.w	8002b10 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0301 	and.w	r3, r3, #1
 8002288:	2b00      	cmp	r3, #0
 800228a:	f000 8088 	beq.w	800239e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800228e:	4b99      	ldr	r3, [pc, #612]	@ (80024f4 <HAL_RCC_OscConfig+0x288>)
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002296:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002298:	4b96      	ldr	r3, [pc, #600]	@ (80024f4 <HAL_RCC_OscConfig+0x288>)
 800229a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800229c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800229e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022a0:	2b10      	cmp	r3, #16
 80022a2:	d007      	beq.n	80022b4 <HAL_RCC_OscConfig+0x48>
 80022a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022a6:	2b18      	cmp	r3, #24
 80022a8:	d111      	bne.n	80022ce <HAL_RCC_OscConfig+0x62>
 80022aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022ac:	f003 0303 	and.w	r3, r3, #3
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d10c      	bne.n	80022ce <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022b4:	4b8f      	ldr	r3, [pc, #572]	@ (80024f4 <HAL_RCC_OscConfig+0x288>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d06d      	beq.n	800239c <HAL_RCC_OscConfig+0x130>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d169      	bne.n	800239c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	f000 bc21 	b.w	8002b10 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022d6:	d106      	bne.n	80022e6 <HAL_RCC_OscConfig+0x7a>
 80022d8:	4b86      	ldr	r3, [pc, #536]	@ (80024f4 <HAL_RCC_OscConfig+0x288>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a85      	ldr	r2, [pc, #532]	@ (80024f4 <HAL_RCC_OscConfig+0x288>)
 80022de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022e2:	6013      	str	r3, [r2, #0]
 80022e4:	e02e      	b.n	8002344 <HAL_RCC_OscConfig+0xd8>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d10c      	bne.n	8002308 <HAL_RCC_OscConfig+0x9c>
 80022ee:	4b81      	ldr	r3, [pc, #516]	@ (80024f4 <HAL_RCC_OscConfig+0x288>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a80      	ldr	r2, [pc, #512]	@ (80024f4 <HAL_RCC_OscConfig+0x288>)
 80022f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022f8:	6013      	str	r3, [r2, #0]
 80022fa:	4b7e      	ldr	r3, [pc, #504]	@ (80024f4 <HAL_RCC_OscConfig+0x288>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a7d      	ldr	r2, [pc, #500]	@ (80024f4 <HAL_RCC_OscConfig+0x288>)
 8002300:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002304:	6013      	str	r3, [r2, #0]
 8002306:	e01d      	b.n	8002344 <HAL_RCC_OscConfig+0xd8>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002310:	d10c      	bne.n	800232c <HAL_RCC_OscConfig+0xc0>
 8002312:	4b78      	ldr	r3, [pc, #480]	@ (80024f4 <HAL_RCC_OscConfig+0x288>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a77      	ldr	r2, [pc, #476]	@ (80024f4 <HAL_RCC_OscConfig+0x288>)
 8002318:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800231c:	6013      	str	r3, [r2, #0]
 800231e:	4b75      	ldr	r3, [pc, #468]	@ (80024f4 <HAL_RCC_OscConfig+0x288>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a74      	ldr	r2, [pc, #464]	@ (80024f4 <HAL_RCC_OscConfig+0x288>)
 8002324:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002328:	6013      	str	r3, [r2, #0]
 800232a:	e00b      	b.n	8002344 <HAL_RCC_OscConfig+0xd8>
 800232c:	4b71      	ldr	r3, [pc, #452]	@ (80024f4 <HAL_RCC_OscConfig+0x288>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a70      	ldr	r2, [pc, #448]	@ (80024f4 <HAL_RCC_OscConfig+0x288>)
 8002332:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002336:	6013      	str	r3, [r2, #0]
 8002338:	4b6e      	ldr	r3, [pc, #440]	@ (80024f4 <HAL_RCC_OscConfig+0x288>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a6d      	ldr	r2, [pc, #436]	@ (80024f4 <HAL_RCC_OscConfig+0x288>)
 800233e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002342:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d013      	beq.n	8002374 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800234c:	f7ff fb54 	bl	80019f8 <HAL_GetTick>
 8002350:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002352:	e008      	b.n	8002366 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002354:	f7ff fb50 	bl	80019f8 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b64      	cmp	r3, #100	@ 0x64
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e3d4      	b.n	8002b10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002366:	4b63      	ldr	r3, [pc, #396]	@ (80024f4 <HAL_RCC_OscConfig+0x288>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d0f0      	beq.n	8002354 <HAL_RCC_OscConfig+0xe8>
 8002372:	e014      	b.n	800239e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002374:	f7ff fb40 	bl	80019f8 <HAL_GetTick>
 8002378:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800237a:	e008      	b.n	800238e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800237c:	f7ff fb3c 	bl	80019f8 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b64      	cmp	r3, #100	@ 0x64
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e3c0      	b.n	8002b10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800238e:	4b59      	ldr	r3, [pc, #356]	@ (80024f4 <HAL_RCC_OscConfig+0x288>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d1f0      	bne.n	800237c <HAL_RCC_OscConfig+0x110>
 800239a:	e000      	b.n	800239e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800239c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	f000 80ca 	beq.w	8002540 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023ac:	4b51      	ldr	r3, [pc, #324]	@ (80024f4 <HAL_RCC_OscConfig+0x288>)
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80023b4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80023b6:	4b4f      	ldr	r3, [pc, #316]	@ (80024f4 <HAL_RCC_OscConfig+0x288>)
 80023b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ba:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80023bc:	6a3b      	ldr	r3, [r7, #32]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d007      	beq.n	80023d2 <HAL_RCC_OscConfig+0x166>
 80023c2:	6a3b      	ldr	r3, [r7, #32]
 80023c4:	2b18      	cmp	r3, #24
 80023c6:	d156      	bne.n	8002476 <HAL_RCC_OscConfig+0x20a>
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	f003 0303 	and.w	r3, r3, #3
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d151      	bne.n	8002476 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023d2:	4b48      	ldr	r3, [pc, #288]	@ (80024f4 <HAL_RCC_OscConfig+0x288>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0304 	and.w	r3, r3, #4
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d005      	beq.n	80023ea <HAL_RCC_OscConfig+0x17e>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e392      	b.n	8002b10 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80023ea:	4b42      	ldr	r3, [pc, #264]	@ (80024f4 <HAL_RCC_OscConfig+0x288>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f023 0219 	bic.w	r2, r3, #25
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	493f      	ldr	r1, [pc, #252]	@ (80024f4 <HAL_RCC_OscConfig+0x288>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023fc:	f7ff fafc 	bl	80019f8 <HAL_GetTick>
 8002400:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002402:	e008      	b.n	8002416 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002404:	f7ff faf8 	bl	80019f8 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b02      	cmp	r3, #2
 8002410:	d901      	bls.n	8002416 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e37c      	b.n	8002b10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002416:	4b37      	ldr	r3, [pc, #220]	@ (80024f4 <HAL_RCC_OscConfig+0x288>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0304 	and.w	r3, r3, #4
 800241e:	2b00      	cmp	r3, #0
 8002420:	d0f0      	beq.n	8002404 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002422:	f7ff fb19 	bl	8001a58 <HAL_GetREVID>
 8002426:	4603      	mov	r3, r0
 8002428:	f241 0203 	movw	r2, #4099	@ 0x1003
 800242c:	4293      	cmp	r3, r2
 800242e:	d817      	bhi.n	8002460 <HAL_RCC_OscConfig+0x1f4>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	691b      	ldr	r3, [r3, #16]
 8002434:	2b40      	cmp	r3, #64	@ 0x40
 8002436:	d108      	bne.n	800244a <HAL_RCC_OscConfig+0x1de>
 8002438:	4b2e      	ldr	r3, [pc, #184]	@ (80024f4 <HAL_RCC_OscConfig+0x288>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002440:	4a2c      	ldr	r2, [pc, #176]	@ (80024f4 <HAL_RCC_OscConfig+0x288>)
 8002442:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002446:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002448:	e07a      	b.n	8002540 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800244a:	4b2a      	ldr	r3, [pc, #168]	@ (80024f4 <HAL_RCC_OscConfig+0x288>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	031b      	lsls	r3, r3, #12
 8002458:	4926      	ldr	r1, [pc, #152]	@ (80024f4 <HAL_RCC_OscConfig+0x288>)
 800245a:	4313      	orrs	r3, r2
 800245c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800245e:	e06f      	b.n	8002540 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002460:	4b24      	ldr	r3, [pc, #144]	@ (80024f4 <HAL_RCC_OscConfig+0x288>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	691b      	ldr	r3, [r3, #16]
 800246c:	061b      	lsls	r3, r3, #24
 800246e:	4921      	ldr	r1, [pc, #132]	@ (80024f4 <HAL_RCC_OscConfig+0x288>)
 8002470:	4313      	orrs	r3, r2
 8002472:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002474:	e064      	b.n	8002540 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d047      	beq.n	800250e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800247e:	4b1d      	ldr	r3, [pc, #116]	@ (80024f4 <HAL_RCC_OscConfig+0x288>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f023 0219 	bic.w	r2, r3, #25
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	491a      	ldr	r1, [pc, #104]	@ (80024f4 <HAL_RCC_OscConfig+0x288>)
 800248c:	4313      	orrs	r3, r2
 800248e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002490:	f7ff fab2 	bl	80019f8 <HAL_GetTick>
 8002494:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002496:	e008      	b.n	80024aa <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002498:	f7ff faae 	bl	80019f8 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e332      	b.n	8002b10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024aa:	4b12      	ldr	r3, [pc, #72]	@ (80024f4 <HAL_RCC_OscConfig+0x288>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0304 	and.w	r3, r3, #4
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d0f0      	beq.n	8002498 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024b6:	f7ff facf 	bl	8001a58 <HAL_GetREVID>
 80024ba:	4603      	mov	r3, r0
 80024bc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d819      	bhi.n	80024f8 <HAL_RCC_OscConfig+0x28c>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	691b      	ldr	r3, [r3, #16]
 80024c8:	2b40      	cmp	r3, #64	@ 0x40
 80024ca:	d108      	bne.n	80024de <HAL_RCC_OscConfig+0x272>
 80024cc:	4b09      	ldr	r3, [pc, #36]	@ (80024f4 <HAL_RCC_OscConfig+0x288>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80024d4:	4a07      	ldr	r2, [pc, #28]	@ (80024f4 <HAL_RCC_OscConfig+0x288>)
 80024d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024da:	6053      	str	r3, [r2, #4]
 80024dc:	e030      	b.n	8002540 <HAL_RCC_OscConfig+0x2d4>
 80024de:	4b05      	ldr	r3, [pc, #20]	@ (80024f4 <HAL_RCC_OscConfig+0x288>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	031b      	lsls	r3, r3, #12
 80024ec:	4901      	ldr	r1, [pc, #4]	@ (80024f4 <HAL_RCC_OscConfig+0x288>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	604b      	str	r3, [r1, #4]
 80024f2:	e025      	b.n	8002540 <HAL_RCC_OscConfig+0x2d4>
 80024f4:	58024400 	.word	0x58024400
 80024f8:	4b9a      	ldr	r3, [pc, #616]	@ (8002764 <HAL_RCC_OscConfig+0x4f8>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	691b      	ldr	r3, [r3, #16]
 8002504:	061b      	lsls	r3, r3, #24
 8002506:	4997      	ldr	r1, [pc, #604]	@ (8002764 <HAL_RCC_OscConfig+0x4f8>)
 8002508:	4313      	orrs	r3, r2
 800250a:	604b      	str	r3, [r1, #4]
 800250c:	e018      	b.n	8002540 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800250e:	4b95      	ldr	r3, [pc, #596]	@ (8002764 <HAL_RCC_OscConfig+0x4f8>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a94      	ldr	r2, [pc, #592]	@ (8002764 <HAL_RCC_OscConfig+0x4f8>)
 8002514:	f023 0301 	bic.w	r3, r3, #1
 8002518:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800251a:	f7ff fa6d 	bl	80019f8 <HAL_GetTick>
 800251e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002520:	e008      	b.n	8002534 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002522:	f7ff fa69 	bl	80019f8 <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	2b02      	cmp	r3, #2
 800252e:	d901      	bls.n	8002534 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e2ed      	b.n	8002b10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002534:	4b8b      	ldr	r3, [pc, #556]	@ (8002764 <HAL_RCC_OscConfig+0x4f8>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0304 	and.w	r3, r3, #4
 800253c:	2b00      	cmp	r3, #0
 800253e:	d1f0      	bne.n	8002522 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0310 	and.w	r3, r3, #16
 8002548:	2b00      	cmp	r3, #0
 800254a:	f000 80a9 	beq.w	80026a0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800254e:	4b85      	ldr	r3, [pc, #532]	@ (8002764 <HAL_RCC_OscConfig+0x4f8>)
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002556:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002558:	4b82      	ldr	r3, [pc, #520]	@ (8002764 <HAL_RCC_OscConfig+0x4f8>)
 800255a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800255c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	2b08      	cmp	r3, #8
 8002562:	d007      	beq.n	8002574 <HAL_RCC_OscConfig+0x308>
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	2b18      	cmp	r3, #24
 8002568:	d13a      	bne.n	80025e0 <HAL_RCC_OscConfig+0x374>
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	f003 0303 	and.w	r3, r3, #3
 8002570:	2b01      	cmp	r3, #1
 8002572:	d135      	bne.n	80025e0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002574:	4b7b      	ldr	r3, [pc, #492]	@ (8002764 <HAL_RCC_OscConfig+0x4f8>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800257c:	2b00      	cmp	r3, #0
 800257e:	d005      	beq.n	800258c <HAL_RCC_OscConfig+0x320>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	69db      	ldr	r3, [r3, #28]
 8002584:	2b80      	cmp	r3, #128	@ 0x80
 8002586:	d001      	beq.n	800258c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e2c1      	b.n	8002b10 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800258c:	f7ff fa64 	bl	8001a58 <HAL_GetREVID>
 8002590:	4603      	mov	r3, r0
 8002592:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002596:	4293      	cmp	r3, r2
 8002598:	d817      	bhi.n	80025ca <HAL_RCC_OscConfig+0x35e>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a1b      	ldr	r3, [r3, #32]
 800259e:	2b20      	cmp	r3, #32
 80025a0:	d108      	bne.n	80025b4 <HAL_RCC_OscConfig+0x348>
 80025a2:	4b70      	ldr	r3, [pc, #448]	@ (8002764 <HAL_RCC_OscConfig+0x4f8>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80025aa:	4a6e      	ldr	r2, [pc, #440]	@ (8002764 <HAL_RCC_OscConfig+0x4f8>)
 80025ac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80025b0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80025b2:	e075      	b.n	80026a0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80025b4:	4b6b      	ldr	r3, [pc, #428]	@ (8002764 <HAL_RCC_OscConfig+0x4f8>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a1b      	ldr	r3, [r3, #32]
 80025c0:	069b      	lsls	r3, r3, #26
 80025c2:	4968      	ldr	r1, [pc, #416]	@ (8002764 <HAL_RCC_OscConfig+0x4f8>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80025c8:	e06a      	b.n	80026a0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80025ca:	4b66      	ldr	r3, [pc, #408]	@ (8002764 <HAL_RCC_OscConfig+0x4f8>)
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a1b      	ldr	r3, [r3, #32]
 80025d6:	061b      	lsls	r3, r3, #24
 80025d8:	4962      	ldr	r1, [pc, #392]	@ (8002764 <HAL_RCC_OscConfig+0x4f8>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80025de:	e05f      	b.n	80026a0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	69db      	ldr	r3, [r3, #28]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d042      	beq.n	800266e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80025e8:	4b5e      	ldr	r3, [pc, #376]	@ (8002764 <HAL_RCC_OscConfig+0x4f8>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a5d      	ldr	r2, [pc, #372]	@ (8002764 <HAL_RCC_OscConfig+0x4f8>)
 80025ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f4:	f7ff fa00 	bl	80019f8 <HAL_GetTick>
 80025f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80025fa:	e008      	b.n	800260e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80025fc:	f7ff f9fc 	bl	80019f8 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b02      	cmp	r3, #2
 8002608:	d901      	bls.n	800260e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e280      	b.n	8002b10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800260e:	4b55      	ldr	r3, [pc, #340]	@ (8002764 <HAL_RCC_OscConfig+0x4f8>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002616:	2b00      	cmp	r3, #0
 8002618:	d0f0      	beq.n	80025fc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800261a:	f7ff fa1d 	bl	8001a58 <HAL_GetREVID>
 800261e:	4603      	mov	r3, r0
 8002620:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002624:	4293      	cmp	r3, r2
 8002626:	d817      	bhi.n	8002658 <HAL_RCC_OscConfig+0x3ec>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a1b      	ldr	r3, [r3, #32]
 800262c:	2b20      	cmp	r3, #32
 800262e:	d108      	bne.n	8002642 <HAL_RCC_OscConfig+0x3d6>
 8002630:	4b4c      	ldr	r3, [pc, #304]	@ (8002764 <HAL_RCC_OscConfig+0x4f8>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002638:	4a4a      	ldr	r2, [pc, #296]	@ (8002764 <HAL_RCC_OscConfig+0x4f8>)
 800263a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800263e:	6053      	str	r3, [r2, #4]
 8002640:	e02e      	b.n	80026a0 <HAL_RCC_OscConfig+0x434>
 8002642:	4b48      	ldr	r3, [pc, #288]	@ (8002764 <HAL_RCC_OscConfig+0x4f8>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a1b      	ldr	r3, [r3, #32]
 800264e:	069b      	lsls	r3, r3, #26
 8002650:	4944      	ldr	r1, [pc, #272]	@ (8002764 <HAL_RCC_OscConfig+0x4f8>)
 8002652:	4313      	orrs	r3, r2
 8002654:	604b      	str	r3, [r1, #4]
 8002656:	e023      	b.n	80026a0 <HAL_RCC_OscConfig+0x434>
 8002658:	4b42      	ldr	r3, [pc, #264]	@ (8002764 <HAL_RCC_OscConfig+0x4f8>)
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a1b      	ldr	r3, [r3, #32]
 8002664:	061b      	lsls	r3, r3, #24
 8002666:	493f      	ldr	r1, [pc, #252]	@ (8002764 <HAL_RCC_OscConfig+0x4f8>)
 8002668:	4313      	orrs	r3, r2
 800266a:	60cb      	str	r3, [r1, #12]
 800266c:	e018      	b.n	80026a0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800266e:	4b3d      	ldr	r3, [pc, #244]	@ (8002764 <HAL_RCC_OscConfig+0x4f8>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a3c      	ldr	r2, [pc, #240]	@ (8002764 <HAL_RCC_OscConfig+0x4f8>)
 8002674:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002678:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800267a:	f7ff f9bd 	bl	80019f8 <HAL_GetTick>
 800267e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002680:	e008      	b.n	8002694 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002682:	f7ff f9b9 	bl	80019f8 <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	2b02      	cmp	r3, #2
 800268e:	d901      	bls.n	8002694 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e23d      	b.n	8002b10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002694:	4b33      	ldr	r3, [pc, #204]	@ (8002764 <HAL_RCC_OscConfig+0x4f8>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800269c:	2b00      	cmp	r3, #0
 800269e:	d1f0      	bne.n	8002682 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0308 	and.w	r3, r3, #8
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d036      	beq.n	800271a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	695b      	ldr	r3, [r3, #20]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d019      	beq.n	80026e8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026b4:	4b2b      	ldr	r3, [pc, #172]	@ (8002764 <HAL_RCC_OscConfig+0x4f8>)
 80026b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026b8:	4a2a      	ldr	r2, [pc, #168]	@ (8002764 <HAL_RCC_OscConfig+0x4f8>)
 80026ba:	f043 0301 	orr.w	r3, r3, #1
 80026be:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c0:	f7ff f99a 	bl	80019f8 <HAL_GetTick>
 80026c4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80026c6:	e008      	b.n	80026da <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026c8:	f7ff f996 	bl	80019f8 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e21a      	b.n	8002b10 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80026da:	4b22      	ldr	r3, [pc, #136]	@ (8002764 <HAL_RCC_OscConfig+0x4f8>)
 80026dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d0f0      	beq.n	80026c8 <HAL_RCC_OscConfig+0x45c>
 80026e6:	e018      	b.n	800271a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026e8:	4b1e      	ldr	r3, [pc, #120]	@ (8002764 <HAL_RCC_OscConfig+0x4f8>)
 80026ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026ec:	4a1d      	ldr	r2, [pc, #116]	@ (8002764 <HAL_RCC_OscConfig+0x4f8>)
 80026ee:	f023 0301 	bic.w	r3, r3, #1
 80026f2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026f4:	f7ff f980 	bl	80019f8 <HAL_GetTick>
 80026f8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026fc:	f7ff f97c 	bl	80019f8 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e200      	b.n	8002b10 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800270e:	4b15      	ldr	r3, [pc, #84]	@ (8002764 <HAL_RCC_OscConfig+0x4f8>)
 8002710:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1f0      	bne.n	80026fc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0320 	and.w	r3, r3, #32
 8002722:	2b00      	cmp	r3, #0
 8002724:	d039      	beq.n	800279a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d01c      	beq.n	8002768 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800272e:	4b0d      	ldr	r3, [pc, #52]	@ (8002764 <HAL_RCC_OscConfig+0x4f8>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a0c      	ldr	r2, [pc, #48]	@ (8002764 <HAL_RCC_OscConfig+0x4f8>)
 8002734:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002738:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800273a:	f7ff f95d 	bl	80019f8 <HAL_GetTick>
 800273e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002740:	e008      	b.n	8002754 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002742:	f7ff f959 	bl	80019f8 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b02      	cmp	r3, #2
 800274e:	d901      	bls.n	8002754 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e1dd      	b.n	8002b10 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002754:	4b03      	ldr	r3, [pc, #12]	@ (8002764 <HAL_RCC_OscConfig+0x4f8>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d0f0      	beq.n	8002742 <HAL_RCC_OscConfig+0x4d6>
 8002760:	e01b      	b.n	800279a <HAL_RCC_OscConfig+0x52e>
 8002762:	bf00      	nop
 8002764:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002768:	4b9b      	ldr	r3, [pc, #620]	@ (80029d8 <HAL_RCC_OscConfig+0x76c>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a9a      	ldr	r2, [pc, #616]	@ (80029d8 <HAL_RCC_OscConfig+0x76c>)
 800276e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002772:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002774:	f7ff f940 	bl	80019f8 <HAL_GetTick>
 8002778:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800277a:	e008      	b.n	800278e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800277c:	f7ff f93c 	bl	80019f8 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	2b02      	cmp	r3, #2
 8002788:	d901      	bls.n	800278e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e1c0      	b.n	8002b10 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800278e:	4b92      	ldr	r3, [pc, #584]	@ (80029d8 <HAL_RCC_OscConfig+0x76c>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1f0      	bne.n	800277c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0304 	and.w	r3, r3, #4
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	f000 8081 	beq.w	80028aa <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80027a8:	4b8c      	ldr	r3, [pc, #560]	@ (80029dc <HAL_RCC_OscConfig+0x770>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a8b      	ldr	r2, [pc, #556]	@ (80029dc <HAL_RCC_OscConfig+0x770>)
 80027ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027b4:	f7ff f920 	bl	80019f8 <HAL_GetTick>
 80027b8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027ba:	e008      	b.n	80027ce <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027bc:	f7ff f91c 	bl	80019f8 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b64      	cmp	r3, #100	@ 0x64
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e1a0      	b.n	8002b10 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027ce:	4b83      	ldr	r3, [pc, #524]	@ (80029dc <HAL_RCC_OscConfig+0x770>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d0f0      	beq.n	80027bc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d106      	bne.n	80027f0 <HAL_RCC_OscConfig+0x584>
 80027e2:	4b7d      	ldr	r3, [pc, #500]	@ (80029d8 <HAL_RCC_OscConfig+0x76c>)
 80027e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027e6:	4a7c      	ldr	r2, [pc, #496]	@ (80029d8 <HAL_RCC_OscConfig+0x76c>)
 80027e8:	f043 0301 	orr.w	r3, r3, #1
 80027ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80027ee:	e02d      	b.n	800284c <HAL_RCC_OscConfig+0x5e0>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d10c      	bne.n	8002812 <HAL_RCC_OscConfig+0x5a6>
 80027f8:	4b77      	ldr	r3, [pc, #476]	@ (80029d8 <HAL_RCC_OscConfig+0x76c>)
 80027fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027fc:	4a76      	ldr	r2, [pc, #472]	@ (80029d8 <HAL_RCC_OscConfig+0x76c>)
 80027fe:	f023 0301 	bic.w	r3, r3, #1
 8002802:	6713      	str	r3, [r2, #112]	@ 0x70
 8002804:	4b74      	ldr	r3, [pc, #464]	@ (80029d8 <HAL_RCC_OscConfig+0x76c>)
 8002806:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002808:	4a73      	ldr	r2, [pc, #460]	@ (80029d8 <HAL_RCC_OscConfig+0x76c>)
 800280a:	f023 0304 	bic.w	r3, r3, #4
 800280e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002810:	e01c      	b.n	800284c <HAL_RCC_OscConfig+0x5e0>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	2b05      	cmp	r3, #5
 8002818:	d10c      	bne.n	8002834 <HAL_RCC_OscConfig+0x5c8>
 800281a:	4b6f      	ldr	r3, [pc, #444]	@ (80029d8 <HAL_RCC_OscConfig+0x76c>)
 800281c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800281e:	4a6e      	ldr	r2, [pc, #440]	@ (80029d8 <HAL_RCC_OscConfig+0x76c>)
 8002820:	f043 0304 	orr.w	r3, r3, #4
 8002824:	6713      	str	r3, [r2, #112]	@ 0x70
 8002826:	4b6c      	ldr	r3, [pc, #432]	@ (80029d8 <HAL_RCC_OscConfig+0x76c>)
 8002828:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800282a:	4a6b      	ldr	r2, [pc, #428]	@ (80029d8 <HAL_RCC_OscConfig+0x76c>)
 800282c:	f043 0301 	orr.w	r3, r3, #1
 8002830:	6713      	str	r3, [r2, #112]	@ 0x70
 8002832:	e00b      	b.n	800284c <HAL_RCC_OscConfig+0x5e0>
 8002834:	4b68      	ldr	r3, [pc, #416]	@ (80029d8 <HAL_RCC_OscConfig+0x76c>)
 8002836:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002838:	4a67      	ldr	r2, [pc, #412]	@ (80029d8 <HAL_RCC_OscConfig+0x76c>)
 800283a:	f023 0301 	bic.w	r3, r3, #1
 800283e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002840:	4b65      	ldr	r3, [pc, #404]	@ (80029d8 <HAL_RCC_OscConfig+0x76c>)
 8002842:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002844:	4a64      	ldr	r2, [pc, #400]	@ (80029d8 <HAL_RCC_OscConfig+0x76c>)
 8002846:	f023 0304 	bic.w	r3, r3, #4
 800284a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d015      	beq.n	8002880 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002854:	f7ff f8d0 	bl	80019f8 <HAL_GetTick>
 8002858:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800285a:	e00a      	b.n	8002872 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800285c:	f7ff f8cc 	bl	80019f8 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	f241 3288 	movw	r2, #5000	@ 0x1388
 800286a:	4293      	cmp	r3, r2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e14e      	b.n	8002b10 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002872:	4b59      	ldr	r3, [pc, #356]	@ (80029d8 <HAL_RCC_OscConfig+0x76c>)
 8002874:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d0ee      	beq.n	800285c <HAL_RCC_OscConfig+0x5f0>
 800287e:	e014      	b.n	80028aa <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002880:	f7ff f8ba 	bl	80019f8 <HAL_GetTick>
 8002884:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002886:	e00a      	b.n	800289e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002888:	f7ff f8b6 	bl	80019f8 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002896:	4293      	cmp	r3, r2
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e138      	b.n	8002b10 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800289e:	4b4e      	ldr	r3, [pc, #312]	@ (80029d8 <HAL_RCC_OscConfig+0x76c>)
 80028a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d1ee      	bne.n	8002888 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	f000 812d 	beq.w	8002b0e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80028b4:	4b48      	ldr	r3, [pc, #288]	@ (80029d8 <HAL_RCC_OscConfig+0x76c>)
 80028b6:	691b      	ldr	r3, [r3, #16]
 80028b8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80028bc:	2b18      	cmp	r3, #24
 80028be:	f000 80bd 	beq.w	8002a3c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	f040 809e 	bne.w	8002a08 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028cc:	4b42      	ldr	r3, [pc, #264]	@ (80029d8 <HAL_RCC_OscConfig+0x76c>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a41      	ldr	r2, [pc, #260]	@ (80029d8 <HAL_RCC_OscConfig+0x76c>)
 80028d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80028d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d8:	f7ff f88e 	bl	80019f8 <HAL_GetTick>
 80028dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028e0:	f7ff f88a 	bl	80019f8 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e10e      	b.n	8002b10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028f2:	4b39      	ldr	r3, [pc, #228]	@ (80029d8 <HAL_RCC_OscConfig+0x76c>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1f0      	bne.n	80028e0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028fe:	4b36      	ldr	r3, [pc, #216]	@ (80029d8 <HAL_RCC_OscConfig+0x76c>)
 8002900:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002902:	4b37      	ldr	r3, [pc, #220]	@ (80029e0 <HAL_RCC_OscConfig+0x774>)
 8002904:	4013      	ands	r3, r2
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800290e:	0112      	lsls	r2, r2, #4
 8002910:	430a      	orrs	r2, r1
 8002912:	4931      	ldr	r1, [pc, #196]	@ (80029d8 <HAL_RCC_OscConfig+0x76c>)
 8002914:	4313      	orrs	r3, r2
 8002916:	628b      	str	r3, [r1, #40]	@ 0x28
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800291c:	3b01      	subs	r3, #1
 800291e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002926:	3b01      	subs	r3, #1
 8002928:	025b      	lsls	r3, r3, #9
 800292a:	b29b      	uxth	r3, r3
 800292c:	431a      	orrs	r2, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002932:	3b01      	subs	r3, #1
 8002934:	041b      	lsls	r3, r3, #16
 8002936:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800293a:	431a      	orrs	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002940:	3b01      	subs	r3, #1
 8002942:	061b      	lsls	r3, r3, #24
 8002944:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002948:	4923      	ldr	r1, [pc, #140]	@ (80029d8 <HAL_RCC_OscConfig+0x76c>)
 800294a:	4313      	orrs	r3, r2
 800294c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800294e:	4b22      	ldr	r3, [pc, #136]	@ (80029d8 <HAL_RCC_OscConfig+0x76c>)
 8002950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002952:	4a21      	ldr	r2, [pc, #132]	@ (80029d8 <HAL_RCC_OscConfig+0x76c>)
 8002954:	f023 0301 	bic.w	r3, r3, #1
 8002958:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800295a:	4b1f      	ldr	r3, [pc, #124]	@ (80029d8 <HAL_RCC_OscConfig+0x76c>)
 800295c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800295e:	4b21      	ldr	r3, [pc, #132]	@ (80029e4 <HAL_RCC_OscConfig+0x778>)
 8002960:	4013      	ands	r3, r2
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002966:	00d2      	lsls	r2, r2, #3
 8002968:	491b      	ldr	r1, [pc, #108]	@ (80029d8 <HAL_RCC_OscConfig+0x76c>)
 800296a:	4313      	orrs	r3, r2
 800296c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800296e:	4b1a      	ldr	r3, [pc, #104]	@ (80029d8 <HAL_RCC_OscConfig+0x76c>)
 8002970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002972:	f023 020c 	bic.w	r2, r3, #12
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800297a:	4917      	ldr	r1, [pc, #92]	@ (80029d8 <HAL_RCC_OscConfig+0x76c>)
 800297c:	4313      	orrs	r3, r2
 800297e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002980:	4b15      	ldr	r3, [pc, #84]	@ (80029d8 <HAL_RCC_OscConfig+0x76c>)
 8002982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002984:	f023 0202 	bic.w	r2, r3, #2
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800298c:	4912      	ldr	r1, [pc, #72]	@ (80029d8 <HAL_RCC_OscConfig+0x76c>)
 800298e:	4313      	orrs	r3, r2
 8002990:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002992:	4b11      	ldr	r3, [pc, #68]	@ (80029d8 <HAL_RCC_OscConfig+0x76c>)
 8002994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002996:	4a10      	ldr	r2, [pc, #64]	@ (80029d8 <HAL_RCC_OscConfig+0x76c>)
 8002998:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800299c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800299e:	4b0e      	ldr	r3, [pc, #56]	@ (80029d8 <HAL_RCC_OscConfig+0x76c>)
 80029a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029a2:	4a0d      	ldr	r2, [pc, #52]	@ (80029d8 <HAL_RCC_OscConfig+0x76c>)
 80029a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80029aa:	4b0b      	ldr	r3, [pc, #44]	@ (80029d8 <HAL_RCC_OscConfig+0x76c>)
 80029ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ae:	4a0a      	ldr	r2, [pc, #40]	@ (80029d8 <HAL_RCC_OscConfig+0x76c>)
 80029b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80029b6:	4b08      	ldr	r3, [pc, #32]	@ (80029d8 <HAL_RCC_OscConfig+0x76c>)
 80029b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ba:	4a07      	ldr	r2, [pc, #28]	@ (80029d8 <HAL_RCC_OscConfig+0x76c>)
 80029bc:	f043 0301 	orr.w	r3, r3, #1
 80029c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029c2:	4b05      	ldr	r3, [pc, #20]	@ (80029d8 <HAL_RCC_OscConfig+0x76c>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a04      	ldr	r2, [pc, #16]	@ (80029d8 <HAL_RCC_OscConfig+0x76c>)
 80029c8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ce:	f7ff f813 	bl	80019f8 <HAL_GetTick>
 80029d2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80029d4:	e011      	b.n	80029fa <HAL_RCC_OscConfig+0x78e>
 80029d6:	bf00      	nop
 80029d8:	58024400 	.word	0x58024400
 80029dc:	58024800 	.word	0x58024800
 80029e0:	fffffc0c 	.word	0xfffffc0c
 80029e4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029e8:	f7ff f806 	bl	80019f8 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e08a      	b.n	8002b10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80029fa:	4b47      	ldr	r3, [pc, #284]	@ (8002b18 <HAL_RCC_OscConfig+0x8ac>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d0f0      	beq.n	80029e8 <HAL_RCC_OscConfig+0x77c>
 8002a06:	e082      	b.n	8002b0e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a08:	4b43      	ldr	r3, [pc, #268]	@ (8002b18 <HAL_RCC_OscConfig+0x8ac>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a42      	ldr	r2, [pc, #264]	@ (8002b18 <HAL_RCC_OscConfig+0x8ac>)
 8002a0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a14:	f7fe fff0 	bl	80019f8 <HAL_GetTick>
 8002a18:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a1a:	e008      	b.n	8002a2e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a1c:	f7fe ffec 	bl	80019f8 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e070      	b.n	8002b10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a2e:	4b3a      	ldr	r3, [pc, #232]	@ (8002b18 <HAL_RCC_OscConfig+0x8ac>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1f0      	bne.n	8002a1c <HAL_RCC_OscConfig+0x7b0>
 8002a3a:	e068      	b.n	8002b0e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002a3c:	4b36      	ldr	r3, [pc, #216]	@ (8002b18 <HAL_RCC_OscConfig+0x8ac>)
 8002a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a40:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002a42:	4b35      	ldr	r3, [pc, #212]	@ (8002b18 <HAL_RCC_OscConfig+0x8ac>)
 8002a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a46:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d031      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	f003 0203 	and.w	r2, r3, #3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d12a      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	091b      	lsrs	r3, r3, #4
 8002a62:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d122      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a78:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d11a      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	0a5b      	lsrs	r3, r3, #9
 8002a82:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a8a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d111      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	0c1b      	lsrs	r3, r3, #16
 8002a94:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a9c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d108      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	0e1b      	lsrs	r3, r3, #24
 8002aa6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aae:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d001      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e02b      	b.n	8002b10 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002ab8:	4b17      	ldr	r3, [pc, #92]	@ (8002b18 <HAL_RCC_OscConfig+0x8ac>)
 8002aba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002abc:	08db      	lsrs	r3, r3, #3
 8002abe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002ac2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ac8:	693a      	ldr	r2, [r7, #16]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d01f      	beq.n	8002b0e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002ace:	4b12      	ldr	r3, [pc, #72]	@ (8002b18 <HAL_RCC_OscConfig+0x8ac>)
 8002ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ad2:	4a11      	ldr	r2, [pc, #68]	@ (8002b18 <HAL_RCC_OscConfig+0x8ac>)
 8002ad4:	f023 0301 	bic.w	r3, r3, #1
 8002ad8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ada:	f7fe ff8d 	bl	80019f8 <HAL_GetTick>
 8002ade:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002ae0:	bf00      	nop
 8002ae2:	f7fe ff89 	bl	80019f8 <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d0f9      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002aee:	4b0a      	ldr	r3, [pc, #40]	@ (8002b18 <HAL_RCC_OscConfig+0x8ac>)
 8002af0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002af2:	4b0a      	ldr	r3, [pc, #40]	@ (8002b1c <HAL_RCC_OscConfig+0x8b0>)
 8002af4:	4013      	ands	r3, r2
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002afa:	00d2      	lsls	r2, r2, #3
 8002afc:	4906      	ldr	r1, [pc, #24]	@ (8002b18 <HAL_RCC_OscConfig+0x8ac>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002b02:	4b05      	ldr	r3, [pc, #20]	@ (8002b18 <HAL_RCC_OscConfig+0x8ac>)
 8002b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b06:	4a04      	ldr	r2, [pc, #16]	@ (8002b18 <HAL_RCC_OscConfig+0x8ac>)
 8002b08:	f043 0301 	orr.w	r3, r3, #1
 8002b0c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3730      	adds	r7, #48	@ 0x30
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	58024400 	.word	0x58024400
 8002b1c:	ffff0007 	.word	0xffff0007

08002b20 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b086      	sub	sp, #24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d101      	bne.n	8002b34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e19c      	b.n	8002e6e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b34:	4b8a      	ldr	r3, [pc, #552]	@ (8002d60 <HAL_RCC_ClockConfig+0x240>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 030f 	and.w	r3, r3, #15
 8002b3c:	683a      	ldr	r2, [r7, #0]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d910      	bls.n	8002b64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b42:	4b87      	ldr	r3, [pc, #540]	@ (8002d60 <HAL_RCC_ClockConfig+0x240>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f023 020f 	bic.w	r2, r3, #15
 8002b4a:	4985      	ldr	r1, [pc, #532]	@ (8002d60 <HAL_RCC_ClockConfig+0x240>)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b52:	4b83      	ldr	r3, [pc, #524]	@ (8002d60 <HAL_RCC_ClockConfig+0x240>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 030f 	and.w	r3, r3, #15
 8002b5a:	683a      	ldr	r2, [r7, #0]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d001      	beq.n	8002b64 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e184      	b.n	8002e6e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0304 	and.w	r3, r3, #4
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d010      	beq.n	8002b92 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	691a      	ldr	r2, [r3, #16]
 8002b74:	4b7b      	ldr	r3, [pc, #492]	@ (8002d64 <HAL_RCC_ClockConfig+0x244>)
 8002b76:	699b      	ldr	r3, [r3, #24]
 8002b78:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d908      	bls.n	8002b92 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002b80:	4b78      	ldr	r3, [pc, #480]	@ (8002d64 <HAL_RCC_ClockConfig+0x244>)
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	691b      	ldr	r3, [r3, #16]
 8002b8c:	4975      	ldr	r1, [pc, #468]	@ (8002d64 <HAL_RCC_ClockConfig+0x244>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0308 	and.w	r3, r3, #8
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d010      	beq.n	8002bc0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	695a      	ldr	r2, [r3, #20]
 8002ba2:	4b70      	ldr	r3, [pc, #448]	@ (8002d64 <HAL_RCC_ClockConfig+0x244>)
 8002ba4:	69db      	ldr	r3, [r3, #28]
 8002ba6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d908      	bls.n	8002bc0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002bae:	4b6d      	ldr	r3, [pc, #436]	@ (8002d64 <HAL_RCC_ClockConfig+0x244>)
 8002bb0:	69db      	ldr	r3, [r3, #28]
 8002bb2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	695b      	ldr	r3, [r3, #20]
 8002bba:	496a      	ldr	r1, [pc, #424]	@ (8002d64 <HAL_RCC_ClockConfig+0x244>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0310 	and.w	r3, r3, #16
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d010      	beq.n	8002bee <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	699a      	ldr	r2, [r3, #24]
 8002bd0:	4b64      	ldr	r3, [pc, #400]	@ (8002d64 <HAL_RCC_ClockConfig+0x244>)
 8002bd2:	69db      	ldr	r3, [r3, #28]
 8002bd4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d908      	bls.n	8002bee <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002bdc:	4b61      	ldr	r3, [pc, #388]	@ (8002d64 <HAL_RCC_ClockConfig+0x244>)
 8002bde:	69db      	ldr	r3, [r3, #28]
 8002be0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	495e      	ldr	r1, [pc, #376]	@ (8002d64 <HAL_RCC_ClockConfig+0x244>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0320 	and.w	r3, r3, #32
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d010      	beq.n	8002c1c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	69da      	ldr	r2, [r3, #28]
 8002bfe:	4b59      	ldr	r3, [pc, #356]	@ (8002d64 <HAL_RCC_ClockConfig+0x244>)
 8002c00:	6a1b      	ldr	r3, [r3, #32]
 8002c02:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d908      	bls.n	8002c1c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002c0a:	4b56      	ldr	r3, [pc, #344]	@ (8002d64 <HAL_RCC_ClockConfig+0x244>)
 8002c0c:	6a1b      	ldr	r3, [r3, #32]
 8002c0e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	69db      	ldr	r3, [r3, #28]
 8002c16:	4953      	ldr	r1, [pc, #332]	@ (8002d64 <HAL_RCC_ClockConfig+0x244>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0302 	and.w	r3, r3, #2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d010      	beq.n	8002c4a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	68da      	ldr	r2, [r3, #12]
 8002c2c:	4b4d      	ldr	r3, [pc, #308]	@ (8002d64 <HAL_RCC_ClockConfig+0x244>)
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	f003 030f 	and.w	r3, r3, #15
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d908      	bls.n	8002c4a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c38:	4b4a      	ldr	r3, [pc, #296]	@ (8002d64 <HAL_RCC_ClockConfig+0x244>)
 8002c3a:	699b      	ldr	r3, [r3, #24]
 8002c3c:	f023 020f 	bic.w	r2, r3, #15
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	4947      	ldr	r1, [pc, #284]	@ (8002d64 <HAL_RCC_ClockConfig+0x244>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d055      	beq.n	8002d02 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002c56:	4b43      	ldr	r3, [pc, #268]	@ (8002d64 <HAL_RCC_ClockConfig+0x244>)
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	4940      	ldr	r1, [pc, #256]	@ (8002d64 <HAL_RCC_ClockConfig+0x244>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d107      	bne.n	8002c80 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c70:	4b3c      	ldr	r3, [pc, #240]	@ (8002d64 <HAL_RCC_ClockConfig+0x244>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d121      	bne.n	8002cc0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e0f6      	b.n	8002e6e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	2b03      	cmp	r3, #3
 8002c86:	d107      	bne.n	8002c98 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c88:	4b36      	ldr	r3, [pc, #216]	@ (8002d64 <HAL_RCC_ClockConfig+0x244>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d115      	bne.n	8002cc0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e0ea      	b.n	8002e6e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d107      	bne.n	8002cb0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002ca0:	4b30      	ldr	r3, [pc, #192]	@ (8002d64 <HAL_RCC_ClockConfig+0x244>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d109      	bne.n	8002cc0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e0de      	b.n	8002e6e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002cb0:	4b2c      	ldr	r3, [pc, #176]	@ (8002d64 <HAL_RCC_ClockConfig+0x244>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0304 	and.w	r3, r3, #4
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d101      	bne.n	8002cc0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e0d6      	b.n	8002e6e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002cc0:	4b28      	ldr	r3, [pc, #160]	@ (8002d64 <HAL_RCC_ClockConfig+0x244>)
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	f023 0207 	bic.w	r2, r3, #7
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	4925      	ldr	r1, [pc, #148]	@ (8002d64 <HAL_RCC_ClockConfig+0x244>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cd2:	f7fe fe91 	bl	80019f8 <HAL_GetTick>
 8002cd6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cd8:	e00a      	b.n	8002cf0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cda:	f7fe fe8d 	bl	80019f8 <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d901      	bls.n	8002cf0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e0be      	b.n	8002e6e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cf0:	4b1c      	ldr	r3, [pc, #112]	@ (8002d64 <HAL_RCC_ClockConfig+0x244>)
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	00db      	lsls	r3, r3, #3
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d1eb      	bne.n	8002cda <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d010      	beq.n	8002d30 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	68da      	ldr	r2, [r3, #12]
 8002d12:	4b14      	ldr	r3, [pc, #80]	@ (8002d64 <HAL_RCC_ClockConfig+0x244>)
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	f003 030f 	and.w	r3, r3, #15
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d208      	bcs.n	8002d30 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d1e:	4b11      	ldr	r3, [pc, #68]	@ (8002d64 <HAL_RCC_ClockConfig+0x244>)
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	f023 020f 	bic.w	r2, r3, #15
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	490e      	ldr	r1, [pc, #56]	@ (8002d64 <HAL_RCC_ClockConfig+0x244>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d30:	4b0b      	ldr	r3, [pc, #44]	@ (8002d60 <HAL_RCC_ClockConfig+0x240>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 030f 	and.w	r3, r3, #15
 8002d38:	683a      	ldr	r2, [r7, #0]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d214      	bcs.n	8002d68 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d3e:	4b08      	ldr	r3, [pc, #32]	@ (8002d60 <HAL_RCC_ClockConfig+0x240>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f023 020f 	bic.w	r2, r3, #15
 8002d46:	4906      	ldr	r1, [pc, #24]	@ (8002d60 <HAL_RCC_ClockConfig+0x240>)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d4e:	4b04      	ldr	r3, [pc, #16]	@ (8002d60 <HAL_RCC_ClockConfig+0x240>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 030f 	and.w	r3, r3, #15
 8002d56:	683a      	ldr	r2, [r7, #0]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d005      	beq.n	8002d68 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e086      	b.n	8002e6e <HAL_RCC_ClockConfig+0x34e>
 8002d60:	52002000 	.word	0x52002000
 8002d64:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0304 	and.w	r3, r3, #4
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d010      	beq.n	8002d96 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	691a      	ldr	r2, [r3, #16]
 8002d78:	4b3f      	ldr	r3, [pc, #252]	@ (8002e78 <HAL_RCC_ClockConfig+0x358>)
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d208      	bcs.n	8002d96 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002d84:	4b3c      	ldr	r3, [pc, #240]	@ (8002e78 <HAL_RCC_ClockConfig+0x358>)
 8002d86:	699b      	ldr	r3, [r3, #24]
 8002d88:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	691b      	ldr	r3, [r3, #16]
 8002d90:	4939      	ldr	r1, [pc, #228]	@ (8002e78 <HAL_RCC_ClockConfig+0x358>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0308 	and.w	r3, r3, #8
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d010      	beq.n	8002dc4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	695a      	ldr	r2, [r3, #20]
 8002da6:	4b34      	ldr	r3, [pc, #208]	@ (8002e78 <HAL_RCC_ClockConfig+0x358>)
 8002da8:	69db      	ldr	r3, [r3, #28]
 8002daa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d208      	bcs.n	8002dc4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002db2:	4b31      	ldr	r3, [pc, #196]	@ (8002e78 <HAL_RCC_ClockConfig+0x358>)
 8002db4:	69db      	ldr	r3, [r3, #28]
 8002db6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	492e      	ldr	r1, [pc, #184]	@ (8002e78 <HAL_RCC_ClockConfig+0x358>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0310 	and.w	r3, r3, #16
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d010      	beq.n	8002df2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	699a      	ldr	r2, [r3, #24]
 8002dd4:	4b28      	ldr	r3, [pc, #160]	@ (8002e78 <HAL_RCC_ClockConfig+0x358>)
 8002dd6:	69db      	ldr	r3, [r3, #28]
 8002dd8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d208      	bcs.n	8002df2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002de0:	4b25      	ldr	r3, [pc, #148]	@ (8002e78 <HAL_RCC_ClockConfig+0x358>)
 8002de2:	69db      	ldr	r3, [r3, #28]
 8002de4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	4922      	ldr	r1, [pc, #136]	@ (8002e78 <HAL_RCC_ClockConfig+0x358>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0320 	and.w	r3, r3, #32
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d010      	beq.n	8002e20 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	69da      	ldr	r2, [r3, #28]
 8002e02:	4b1d      	ldr	r3, [pc, #116]	@ (8002e78 <HAL_RCC_ClockConfig+0x358>)
 8002e04:	6a1b      	ldr	r3, [r3, #32]
 8002e06:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d208      	bcs.n	8002e20 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002e0e:	4b1a      	ldr	r3, [pc, #104]	@ (8002e78 <HAL_RCC_ClockConfig+0x358>)
 8002e10:	6a1b      	ldr	r3, [r3, #32]
 8002e12:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	69db      	ldr	r3, [r3, #28]
 8002e1a:	4917      	ldr	r1, [pc, #92]	@ (8002e78 <HAL_RCC_ClockConfig+0x358>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002e20:	f000 f834 	bl	8002e8c <HAL_RCC_GetSysClockFreq>
 8002e24:	4602      	mov	r2, r0
 8002e26:	4b14      	ldr	r3, [pc, #80]	@ (8002e78 <HAL_RCC_ClockConfig+0x358>)
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	0a1b      	lsrs	r3, r3, #8
 8002e2c:	f003 030f 	and.w	r3, r3, #15
 8002e30:	4912      	ldr	r1, [pc, #72]	@ (8002e7c <HAL_RCC_ClockConfig+0x35c>)
 8002e32:	5ccb      	ldrb	r3, [r1, r3]
 8002e34:	f003 031f 	and.w	r3, r3, #31
 8002e38:	fa22 f303 	lsr.w	r3, r2, r3
 8002e3c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002e3e:	4b0e      	ldr	r3, [pc, #56]	@ (8002e78 <HAL_RCC_ClockConfig+0x358>)
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	f003 030f 	and.w	r3, r3, #15
 8002e46:	4a0d      	ldr	r2, [pc, #52]	@ (8002e7c <HAL_RCC_ClockConfig+0x35c>)
 8002e48:	5cd3      	ldrb	r3, [r2, r3]
 8002e4a:	f003 031f 	and.w	r3, r3, #31
 8002e4e:	693a      	ldr	r2, [r7, #16]
 8002e50:	fa22 f303 	lsr.w	r3, r2, r3
 8002e54:	4a0a      	ldr	r2, [pc, #40]	@ (8002e80 <HAL_RCC_ClockConfig+0x360>)
 8002e56:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002e58:	4a0a      	ldr	r2, [pc, #40]	@ (8002e84 <HAL_RCC_ClockConfig+0x364>)
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002e5e:	4b0a      	ldr	r3, [pc, #40]	@ (8002e88 <HAL_RCC_ClockConfig+0x368>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7fe fd7e 	bl	8001964 <HAL_InitTick>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3718      	adds	r7, #24
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	58024400 	.word	0x58024400
 8002e7c:	08007358 	.word	0x08007358
 8002e80:	24000004 	.word	0x24000004
 8002e84:	24000000 	.word	0x24000000
 8002e88:	24000044 	.word	0x24000044

08002e8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b089      	sub	sp, #36	@ 0x24
 8002e90:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e92:	4bb3      	ldr	r3, [pc, #716]	@ (8003160 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e9a:	2b18      	cmp	r3, #24
 8002e9c:	f200 8155 	bhi.w	800314a <HAL_RCC_GetSysClockFreq+0x2be>
 8002ea0:	a201      	add	r2, pc, #4	@ (adr r2, 8002ea8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea6:	bf00      	nop
 8002ea8:	08002f0d 	.word	0x08002f0d
 8002eac:	0800314b 	.word	0x0800314b
 8002eb0:	0800314b 	.word	0x0800314b
 8002eb4:	0800314b 	.word	0x0800314b
 8002eb8:	0800314b 	.word	0x0800314b
 8002ebc:	0800314b 	.word	0x0800314b
 8002ec0:	0800314b 	.word	0x0800314b
 8002ec4:	0800314b 	.word	0x0800314b
 8002ec8:	08002f33 	.word	0x08002f33
 8002ecc:	0800314b 	.word	0x0800314b
 8002ed0:	0800314b 	.word	0x0800314b
 8002ed4:	0800314b 	.word	0x0800314b
 8002ed8:	0800314b 	.word	0x0800314b
 8002edc:	0800314b 	.word	0x0800314b
 8002ee0:	0800314b 	.word	0x0800314b
 8002ee4:	0800314b 	.word	0x0800314b
 8002ee8:	08002f39 	.word	0x08002f39
 8002eec:	0800314b 	.word	0x0800314b
 8002ef0:	0800314b 	.word	0x0800314b
 8002ef4:	0800314b 	.word	0x0800314b
 8002ef8:	0800314b 	.word	0x0800314b
 8002efc:	0800314b 	.word	0x0800314b
 8002f00:	0800314b 	.word	0x0800314b
 8002f04:	0800314b 	.word	0x0800314b
 8002f08:	08002f3f 	.word	0x08002f3f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f0c:	4b94      	ldr	r3, [pc, #592]	@ (8003160 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0320 	and.w	r3, r3, #32
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d009      	beq.n	8002f2c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002f18:	4b91      	ldr	r3, [pc, #580]	@ (8003160 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	08db      	lsrs	r3, r3, #3
 8002f1e:	f003 0303 	and.w	r3, r3, #3
 8002f22:	4a90      	ldr	r2, [pc, #576]	@ (8003164 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002f24:	fa22 f303 	lsr.w	r3, r2, r3
 8002f28:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002f2a:	e111      	b.n	8003150 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002f2c:	4b8d      	ldr	r3, [pc, #564]	@ (8003164 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002f2e:	61bb      	str	r3, [r7, #24]
      break;
 8002f30:	e10e      	b.n	8003150 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002f32:	4b8d      	ldr	r3, [pc, #564]	@ (8003168 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002f34:	61bb      	str	r3, [r7, #24]
      break;
 8002f36:	e10b      	b.n	8003150 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002f38:	4b8c      	ldr	r3, [pc, #560]	@ (800316c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002f3a:	61bb      	str	r3, [r7, #24]
      break;
 8002f3c:	e108      	b.n	8003150 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002f3e:	4b88      	ldr	r3, [pc, #544]	@ (8003160 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f42:	f003 0303 	and.w	r3, r3, #3
 8002f46:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002f48:	4b85      	ldr	r3, [pc, #532]	@ (8003160 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f4c:	091b      	lsrs	r3, r3, #4
 8002f4e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f52:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002f54:	4b82      	ldr	r3, [pc, #520]	@ (8003160 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f58:	f003 0301 	and.w	r3, r3, #1
 8002f5c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002f5e:	4b80      	ldr	r3, [pc, #512]	@ (8003160 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f62:	08db      	lsrs	r3, r3, #3
 8002f64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002f68:	68fa      	ldr	r2, [r7, #12]
 8002f6a:	fb02 f303 	mul.w	r3, r2, r3
 8002f6e:	ee07 3a90 	vmov	s15, r3
 8002f72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f76:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	f000 80e1 	beq.w	8003144 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	f000 8083 	beq.w	8003090 <HAL_RCC_GetSysClockFreq+0x204>
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	f200 80a1 	bhi.w	80030d4 <HAL_RCC_GetSysClockFreq+0x248>
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d003      	beq.n	8002fa0 <HAL_RCC_GetSysClockFreq+0x114>
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d056      	beq.n	800304c <HAL_RCC_GetSysClockFreq+0x1c0>
 8002f9e:	e099      	b.n	80030d4 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002fa0:	4b6f      	ldr	r3, [pc, #444]	@ (8003160 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0320 	and.w	r3, r3, #32
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d02d      	beq.n	8003008 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002fac:	4b6c      	ldr	r3, [pc, #432]	@ (8003160 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	08db      	lsrs	r3, r3, #3
 8002fb2:	f003 0303 	and.w	r3, r3, #3
 8002fb6:	4a6b      	ldr	r2, [pc, #428]	@ (8003164 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002fb8:	fa22 f303 	lsr.w	r3, r2, r3
 8002fbc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	ee07 3a90 	vmov	s15, r3
 8002fc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	ee07 3a90 	vmov	s15, r3
 8002fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fd6:	4b62      	ldr	r3, [pc, #392]	@ (8003160 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fde:	ee07 3a90 	vmov	s15, r3
 8002fe2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fe6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002fea:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003170 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002fee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ff2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ff6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002ffa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003002:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003006:	e087      	b.n	8003118 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	ee07 3a90 	vmov	s15, r3
 800300e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003012:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003174 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003016:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800301a:	4b51      	ldr	r3, [pc, #324]	@ (8003160 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800301c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800301e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003022:	ee07 3a90 	vmov	s15, r3
 8003026:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800302a:	ed97 6a02 	vldr	s12, [r7, #8]
 800302e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003170 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003032:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003036:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800303a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800303e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003042:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003046:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800304a:	e065      	b.n	8003118 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	ee07 3a90 	vmov	s15, r3
 8003052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003056:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003178 <HAL_RCC_GetSysClockFreq+0x2ec>
 800305a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800305e:	4b40      	ldr	r3, [pc, #256]	@ (8003160 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003062:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003066:	ee07 3a90 	vmov	s15, r3
 800306a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800306e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003072:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003170 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003076:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800307a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800307e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003082:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800308a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800308e:	e043      	b.n	8003118 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	ee07 3a90 	vmov	s15, r3
 8003096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800309a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800317c <HAL_RCC_GetSysClockFreq+0x2f0>
 800309e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030a2:	4b2f      	ldr	r3, [pc, #188]	@ (8003160 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030aa:	ee07 3a90 	vmov	s15, r3
 80030ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80030b6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003170 <HAL_RCC_GetSysClockFreq+0x2e4>
 80030ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80030c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80030d2:	e021      	b.n	8003118 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	ee07 3a90 	vmov	s15, r3
 80030da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030de:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003178 <HAL_RCC_GetSysClockFreq+0x2ec>
 80030e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030e6:	4b1e      	ldr	r3, [pc, #120]	@ (8003160 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030ee:	ee07 3a90 	vmov	s15, r3
 80030f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80030fa:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003170 <HAL_RCC_GetSysClockFreq+0x2e4>
 80030fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003102:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003106:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800310a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800310e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003112:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003116:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003118:	4b11      	ldr	r3, [pc, #68]	@ (8003160 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800311a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800311c:	0a5b      	lsrs	r3, r3, #9
 800311e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003122:	3301      	adds	r3, #1
 8003124:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	ee07 3a90 	vmov	s15, r3
 800312c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003130:	edd7 6a07 	vldr	s13, [r7, #28]
 8003134:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003138:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800313c:	ee17 3a90 	vmov	r3, s15
 8003140:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003142:	e005      	b.n	8003150 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003144:	2300      	movs	r3, #0
 8003146:	61bb      	str	r3, [r7, #24]
      break;
 8003148:	e002      	b.n	8003150 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800314a:	4b07      	ldr	r3, [pc, #28]	@ (8003168 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800314c:	61bb      	str	r3, [r7, #24]
      break;
 800314e:	bf00      	nop
  }

  return sysclockfreq;
 8003150:	69bb      	ldr	r3, [r7, #24]
}
 8003152:	4618      	mov	r0, r3
 8003154:	3724      	adds	r7, #36	@ 0x24
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	58024400 	.word	0x58024400
 8003164:	03d09000 	.word	0x03d09000
 8003168:	003d0900 	.word	0x003d0900
 800316c:	017d7840 	.word	0x017d7840
 8003170:	46000000 	.word	0x46000000
 8003174:	4c742400 	.word	0x4c742400
 8003178:	4a742400 	.word	0x4a742400
 800317c:	4bbebc20 	.word	0x4bbebc20

08003180 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003186:	f7ff fe81 	bl	8002e8c <HAL_RCC_GetSysClockFreq>
 800318a:	4602      	mov	r2, r0
 800318c:	4b10      	ldr	r3, [pc, #64]	@ (80031d0 <HAL_RCC_GetHCLKFreq+0x50>)
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	0a1b      	lsrs	r3, r3, #8
 8003192:	f003 030f 	and.w	r3, r3, #15
 8003196:	490f      	ldr	r1, [pc, #60]	@ (80031d4 <HAL_RCC_GetHCLKFreq+0x54>)
 8003198:	5ccb      	ldrb	r3, [r1, r3]
 800319a:	f003 031f 	and.w	r3, r3, #31
 800319e:	fa22 f303 	lsr.w	r3, r2, r3
 80031a2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80031a4:	4b0a      	ldr	r3, [pc, #40]	@ (80031d0 <HAL_RCC_GetHCLKFreq+0x50>)
 80031a6:	699b      	ldr	r3, [r3, #24]
 80031a8:	f003 030f 	and.w	r3, r3, #15
 80031ac:	4a09      	ldr	r2, [pc, #36]	@ (80031d4 <HAL_RCC_GetHCLKFreq+0x54>)
 80031ae:	5cd3      	ldrb	r3, [r2, r3]
 80031b0:	f003 031f 	and.w	r3, r3, #31
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	fa22 f303 	lsr.w	r3, r2, r3
 80031ba:	4a07      	ldr	r2, [pc, #28]	@ (80031d8 <HAL_RCC_GetHCLKFreq+0x58>)
 80031bc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80031be:	4a07      	ldr	r2, [pc, #28]	@ (80031dc <HAL_RCC_GetHCLKFreq+0x5c>)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80031c4:	4b04      	ldr	r3, [pc, #16]	@ (80031d8 <HAL_RCC_GetHCLKFreq+0x58>)
 80031c6:	681b      	ldr	r3, [r3, #0]
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3708      	adds	r7, #8
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	58024400 	.word	0x58024400
 80031d4:	08007358 	.word	0x08007358
 80031d8:	24000004 	.word	0x24000004
 80031dc:	24000000 	.word	0x24000000

080031e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80031e4:	f7ff ffcc 	bl	8003180 <HAL_RCC_GetHCLKFreq>
 80031e8:	4602      	mov	r2, r0
 80031ea:	4b06      	ldr	r3, [pc, #24]	@ (8003204 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031ec:	69db      	ldr	r3, [r3, #28]
 80031ee:	091b      	lsrs	r3, r3, #4
 80031f0:	f003 0307 	and.w	r3, r3, #7
 80031f4:	4904      	ldr	r1, [pc, #16]	@ (8003208 <HAL_RCC_GetPCLK1Freq+0x28>)
 80031f6:	5ccb      	ldrb	r3, [r1, r3]
 80031f8:	f003 031f 	and.w	r3, r3, #31
 80031fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003200:	4618      	mov	r0, r3
 8003202:	bd80      	pop	{r7, pc}
 8003204:	58024400 	.word	0x58024400
 8003208:	08007358 	.word	0x08007358

0800320c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003210:	f7ff ffb6 	bl	8003180 <HAL_RCC_GetHCLKFreq>
 8003214:	4602      	mov	r2, r0
 8003216:	4b06      	ldr	r3, [pc, #24]	@ (8003230 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003218:	69db      	ldr	r3, [r3, #28]
 800321a:	0a1b      	lsrs	r3, r3, #8
 800321c:	f003 0307 	and.w	r3, r3, #7
 8003220:	4904      	ldr	r1, [pc, #16]	@ (8003234 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003222:	5ccb      	ldrb	r3, [r1, r3]
 8003224:	f003 031f 	and.w	r3, r3, #31
 8003228:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800322c:	4618      	mov	r0, r3
 800322e:	bd80      	pop	{r7, pc}
 8003230:	58024400 	.word	0x58024400
 8003234:	08007358 	.word	0x08007358

08003238 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003238:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800323c:	b0ca      	sub	sp, #296	@ 0x128
 800323e:	af00      	add	r7, sp, #0
 8003240:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003244:	2300      	movs	r3, #0
 8003246:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800324a:	2300      	movs	r3, #0
 800324c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003250:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003258:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800325c:	2500      	movs	r5, #0
 800325e:	ea54 0305 	orrs.w	r3, r4, r5
 8003262:	d049      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003264:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003268:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800326a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800326e:	d02f      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003270:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003274:	d828      	bhi.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003276:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800327a:	d01a      	beq.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800327c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003280:	d822      	bhi.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003282:	2b00      	cmp	r3, #0
 8003284:	d003      	beq.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003286:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800328a:	d007      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800328c:	e01c      	b.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800328e:	4bb8      	ldr	r3, [pc, #736]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003292:	4ab7      	ldr	r2, [pc, #732]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003294:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003298:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800329a:	e01a      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800329c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032a0:	3308      	adds	r3, #8
 80032a2:	2102      	movs	r1, #2
 80032a4:	4618      	mov	r0, r3
 80032a6:	f001 fc8f 	bl	8004bc8 <RCCEx_PLL2_Config>
 80032aa:	4603      	mov	r3, r0
 80032ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80032b0:	e00f      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80032b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032b6:	3328      	adds	r3, #40	@ 0x28
 80032b8:	2102      	movs	r1, #2
 80032ba:	4618      	mov	r0, r3
 80032bc:	f001 fd36 	bl	8004d2c <RCCEx_PLL3_Config>
 80032c0:	4603      	mov	r3, r0
 80032c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80032c6:	e004      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80032ce:	e000      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80032d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d10a      	bne.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80032da:	4ba5      	ldr	r3, [pc, #660]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032de:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80032e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80032e8:	4aa1      	ldr	r2, [pc, #644]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032ea:	430b      	orrs	r3, r1
 80032ec:	6513      	str	r3, [r2, #80]	@ 0x50
 80032ee:	e003      	b.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80032f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003300:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003304:	f04f 0900 	mov.w	r9, #0
 8003308:	ea58 0309 	orrs.w	r3, r8, r9
 800330c:	d047      	beq.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800330e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003312:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003314:	2b04      	cmp	r3, #4
 8003316:	d82a      	bhi.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003318:	a201      	add	r2, pc, #4	@ (adr r2, 8003320 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800331a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800331e:	bf00      	nop
 8003320:	08003335 	.word	0x08003335
 8003324:	08003343 	.word	0x08003343
 8003328:	08003359 	.word	0x08003359
 800332c:	08003377 	.word	0x08003377
 8003330:	08003377 	.word	0x08003377
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003334:	4b8e      	ldr	r3, [pc, #568]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003338:	4a8d      	ldr	r2, [pc, #564]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800333a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800333e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003340:	e01a      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003342:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003346:	3308      	adds	r3, #8
 8003348:	2100      	movs	r1, #0
 800334a:	4618      	mov	r0, r3
 800334c:	f001 fc3c 	bl	8004bc8 <RCCEx_PLL2_Config>
 8003350:	4603      	mov	r3, r0
 8003352:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003356:	e00f      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003358:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800335c:	3328      	adds	r3, #40	@ 0x28
 800335e:	2100      	movs	r1, #0
 8003360:	4618      	mov	r0, r3
 8003362:	f001 fce3 	bl	8004d2c <RCCEx_PLL3_Config>
 8003366:	4603      	mov	r3, r0
 8003368:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800336c:	e004      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003374:	e000      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003376:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003378:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800337c:	2b00      	cmp	r3, #0
 800337e:	d10a      	bne.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003380:	4b7b      	ldr	r3, [pc, #492]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003382:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003384:	f023 0107 	bic.w	r1, r3, #7
 8003388:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800338c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800338e:	4a78      	ldr	r2, [pc, #480]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003390:	430b      	orrs	r3, r1
 8003392:	6513      	str	r3, [r2, #80]	@ 0x50
 8003394:	e003      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003396:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800339a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800339e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80033aa:	f04f 0b00 	mov.w	fp, #0
 80033ae:	ea5a 030b 	orrs.w	r3, sl, fp
 80033b2:	d04c      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80033b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033be:	d030      	beq.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80033c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033c4:	d829      	bhi.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80033c6:	2bc0      	cmp	r3, #192	@ 0xc0
 80033c8:	d02d      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80033ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80033cc:	d825      	bhi.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80033ce:	2b80      	cmp	r3, #128	@ 0x80
 80033d0:	d018      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80033d2:	2b80      	cmp	r3, #128	@ 0x80
 80033d4:	d821      	bhi.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d002      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80033da:	2b40      	cmp	r3, #64	@ 0x40
 80033dc:	d007      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80033de:	e01c      	b.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033e0:	4b63      	ldr	r3, [pc, #396]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033e4:	4a62      	ldr	r2, [pc, #392]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80033ec:	e01c      	b.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80033ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033f2:	3308      	adds	r3, #8
 80033f4:	2100      	movs	r1, #0
 80033f6:	4618      	mov	r0, r3
 80033f8:	f001 fbe6 	bl	8004bc8 <RCCEx_PLL2_Config>
 80033fc:	4603      	mov	r3, r0
 80033fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003402:	e011      	b.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003404:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003408:	3328      	adds	r3, #40	@ 0x28
 800340a:	2100      	movs	r1, #0
 800340c:	4618      	mov	r0, r3
 800340e:	f001 fc8d 	bl	8004d2c <RCCEx_PLL3_Config>
 8003412:	4603      	mov	r3, r0
 8003414:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003418:	e006      	b.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003420:	e002      	b.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003422:	bf00      	nop
 8003424:	e000      	b.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003426:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003428:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800342c:	2b00      	cmp	r3, #0
 800342e:	d10a      	bne.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003430:	4b4f      	ldr	r3, [pc, #316]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003432:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003434:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003438:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800343c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800343e:	4a4c      	ldr	r2, [pc, #304]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003440:	430b      	orrs	r3, r1
 8003442:	6513      	str	r3, [r2, #80]	@ 0x50
 8003444:	e003      	b.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003446:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800344a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800344e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003456:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800345a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800345e:	2300      	movs	r3, #0
 8003460:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003464:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003468:	460b      	mov	r3, r1
 800346a:	4313      	orrs	r3, r2
 800346c:	d053      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800346e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003472:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003476:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800347a:	d035      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800347c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003480:	d82e      	bhi.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003482:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003486:	d031      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003488:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800348c:	d828      	bhi.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800348e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003492:	d01a      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003494:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003498:	d822      	bhi.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800349a:	2b00      	cmp	r3, #0
 800349c:	d003      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800349e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80034a2:	d007      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80034a4:	e01c      	b.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034a6:	4b32      	ldr	r3, [pc, #200]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034aa:	4a31      	ldr	r2, [pc, #196]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034b2:	e01c      	b.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034b8:	3308      	adds	r3, #8
 80034ba:	2100      	movs	r1, #0
 80034bc:	4618      	mov	r0, r3
 80034be:	f001 fb83 	bl	8004bc8 <RCCEx_PLL2_Config>
 80034c2:	4603      	mov	r3, r0
 80034c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80034c8:	e011      	b.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80034ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034ce:	3328      	adds	r3, #40	@ 0x28
 80034d0:	2100      	movs	r1, #0
 80034d2:	4618      	mov	r0, r3
 80034d4:	f001 fc2a 	bl	8004d2c <RCCEx_PLL3_Config>
 80034d8:	4603      	mov	r3, r0
 80034da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034de:	e006      	b.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80034e6:	e002      	b.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80034e8:	bf00      	nop
 80034ea:	e000      	b.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80034ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d10b      	bne.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80034f6:	4b1e      	ldr	r3, [pc, #120]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034fa:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80034fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003502:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003506:	4a1a      	ldr	r2, [pc, #104]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003508:	430b      	orrs	r3, r1
 800350a:	6593      	str	r3, [r2, #88]	@ 0x58
 800350c:	e003      	b.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800350e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003512:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003516:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800351a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800351e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003522:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003526:	2300      	movs	r3, #0
 8003528:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800352c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003530:	460b      	mov	r3, r1
 8003532:	4313      	orrs	r3, r2
 8003534:	d056      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003536:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800353a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800353e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003542:	d038      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003544:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003548:	d831      	bhi.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x376>
 800354a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800354e:	d034      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003550:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003554:	d82b      	bhi.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003556:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800355a:	d01d      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800355c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003560:	d825      	bhi.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003562:	2b00      	cmp	r3, #0
 8003564:	d006      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003566:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800356a:	d00a      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800356c:	e01f      	b.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x376>
 800356e:	bf00      	nop
 8003570:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003574:	4ba2      	ldr	r3, [pc, #648]	@ (8003800 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003578:	4aa1      	ldr	r2, [pc, #644]	@ (8003800 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800357a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800357e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003580:	e01c      	b.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003582:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003586:	3308      	adds	r3, #8
 8003588:	2100      	movs	r1, #0
 800358a:	4618      	mov	r0, r3
 800358c:	f001 fb1c 	bl	8004bc8 <RCCEx_PLL2_Config>
 8003590:	4603      	mov	r3, r0
 8003592:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003596:	e011      	b.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003598:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800359c:	3328      	adds	r3, #40	@ 0x28
 800359e:	2100      	movs	r1, #0
 80035a0:	4618      	mov	r0, r3
 80035a2:	f001 fbc3 	bl	8004d2c <RCCEx_PLL3_Config>
 80035a6:	4603      	mov	r3, r0
 80035a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035ac:	e006      	b.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80035b4:	e002      	b.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80035b6:	bf00      	nop
 80035b8:	e000      	b.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80035ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d10b      	bne.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80035c4:	4b8e      	ldr	r3, [pc, #568]	@ (8003800 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035c8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80035cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035d0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80035d4:	4a8a      	ldr	r2, [pc, #552]	@ (8003800 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035d6:	430b      	orrs	r3, r1
 80035d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80035da:	e003      	b.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80035e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ec:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80035f0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80035f4:	2300      	movs	r3, #0
 80035f6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80035fa:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80035fe:	460b      	mov	r3, r1
 8003600:	4313      	orrs	r3, r2
 8003602:	d03a      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003604:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003608:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800360a:	2b30      	cmp	r3, #48	@ 0x30
 800360c:	d01f      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800360e:	2b30      	cmp	r3, #48	@ 0x30
 8003610:	d819      	bhi.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003612:	2b20      	cmp	r3, #32
 8003614:	d00c      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003616:	2b20      	cmp	r3, #32
 8003618:	d815      	bhi.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800361a:	2b00      	cmp	r3, #0
 800361c:	d019      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800361e:	2b10      	cmp	r3, #16
 8003620:	d111      	bne.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003622:	4b77      	ldr	r3, [pc, #476]	@ (8003800 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003626:	4a76      	ldr	r2, [pc, #472]	@ (8003800 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003628:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800362c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800362e:	e011      	b.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003630:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003634:	3308      	adds	r3, #8
 8003636:	2102      	movs	r1, #2
 8003638:	4618      	mov	r0, r3
 800363a:	f001 fac5 	bl	8004bc8 <RCCEx_PLL2_Config>
 800363e:	4603      	mov	r3, r0
 8003640:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003644:	e006      	b.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800364c:	e002      	b.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800364e:	bf00      	nop
 8003650:	e000      	b.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003652:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003654:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003658:	2b00      	cmp	r3, #0
 800365a:	d10a      	bne.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800365c:	4b68      	ldr	r3, [pc, #416]	@ (8003800 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800365e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003660:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003664:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800366a:	4a65      	ldr	r2, [pc, #404]	@ (8003800 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800366c:	430b      	orrs	r3, r1
 800366e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003670:	e003      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003672:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003676:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800367a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800367e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003682:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003686:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800368a:	2300      	movs	r3, #0
 800368c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003690:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003694:	460b      	mov	r3, r1
 8003696:	4313      	orrs	r3, r2
 8003698:	d051      	beq.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800369a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800369e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80036a4:	d035      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80036a6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80036aa:	d82e      	bhi.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80036ac:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80036b0:	d031      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80036b2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80036b6:	d828      	bhi.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80036b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036bc:	d01a      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80036be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036c2:	d822      	bhi.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d003      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80036c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036cc:	d007      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80036ce:	e01c      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036d0:	4b4b      	ldr	r3, [pc, #300]	@ (8003800 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036d4:	4a4a      	ldr	r2, [pc, #296]	@ (8003800 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80036dc:	e01c      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036e2:	3308      	adds	r3, #8
 80036e4:	2100      	movs	r1, #0
 80036e6:	4618      	mov	r0, r3
 80036e8:	f001 fa6e 	bl	8004bc8 <RCCEx_PLL2_Config>
 80036ec:	4603      	mov	r3, r0
 80036ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80036f2:	e011      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036f8:	3328      	adds	r3, #40	@ 0x28
 80036fa:	2100      	movs	r1, #0
 80036fc:	4618      	mov	r0, r3
 80036fe:	f001 fb15 	bl	8004d2c <RCCEx_PLL3_Config>
 8003702:	4603      	mov	r3, r0
 8003704:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003708:	e006      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003710:	e002      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003712:	bf00      	nop
 8003714:	e000      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003716:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003718:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800371c:	2b00      	cmp	r3, #0
 800371e:	d10a      	bne.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003720:	4b37      	ldr	r3, [pc, #220]	@ (8003800 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003722:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003724:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003728:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800372c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800372e:	4a34      	ldr	r2, [pc, #208]	@ (8003800 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003730:	430b      	orrs	r3, r1
 8003732:	6513      	str	r3, [r2, #80]	@ 0x50
 8003734:	e003      	b.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003736:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800373a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800373e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003746:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800374a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800374e:	2300      	movs	r3, #0
 8003750:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003754:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003758:	460b      	mov	r3, r1
 800375a:	4313      	orrs	r3, r2
 800375c:	d056      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800375e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003762:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003764:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003768:	d033      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800376a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800376e:	d82c      	bhi.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003770:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003774:	d02f      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003776:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800377a:	d826      	bhi.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x592>
 800377c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003780:	d02b      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003782:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003786:	d820      	bhi.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003788:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800378c:	d012      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800378e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003792:	d81a      	bhi.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003794:	2b00      	cmp	r3, #0
 8003796:	d022      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003798:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800379c:	d115      	bne.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800379e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037a2:	3308      	adds	r3, #8
 80037a4:	2101      	movs	r1, #1
 80037a6:	4618      	mov	r0, r3
 80037a8:	f001 fa0e 	bl	8004bc8 <RCCEx_PLL2_Config>
 80037ac:	4603      	mov	r3, r0
 80037ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80037b2:	e015      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80037b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037b8:	3328      	adds	r3, #40	@ 0x28
 80037ba:	2101      	movs	r1, #1
 80037bc:	4618      	mov	r0, r3
 80037be:	f001 fab5 	bl	8004d2c <RCCEx_PLL3_Config>
 80037c2:	4603      	mov	r3, r0
 80037c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80037c8:	e00a      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037d0:	e006      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80037d2:	bf00      	nop
 80037d4:	e004      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80037d6:	bf00      	nop
 80037d8:	e002      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80037da:	bf00      	nop
 80037dc:	e000      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80037de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d10d      	bne.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80037e8:	4b05      	ldr	r3, [pc, #20]	@ (8003800 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037ec:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80037f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80037f6:	4a02      	ldr	r2, [pc, #8]	@ (8003800 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037f8:	430b      	orrs	r3, r1
 80037fa:	6513      	str	r3, [r2, #80]	@ 0x50
 80037fc:	e006      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80037fe:	bf00      	nop
 8003800:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003804:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003808:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800380c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003814:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003818:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800381c:	2300      	movs	r3, #0
 800381e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003822:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003826:	460b      	mov	r3, r1
 8003828:	4313      	orrs	r3, r2
 800382a:	d055      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800382c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003830:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003834:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003838:	d033      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800383a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800383e:	d82c      	bhi.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003840:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003844:	d02f      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003846:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800384a:	d826      	bhi.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800384c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003850:	d02b      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003852:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003856:	d820      	bhi.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003858:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800385c:	d012      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800385e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003862:	d81a      	bhi.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003864:	2b00      	cmp	r3, #0
 8003866:	d022      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003868:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800386c:	d115      	bne.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800386e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003872:	3308      	adds	r3, #8
 8003874:	2101      	movs	r1, #1
 8003876:	4618      	mov	r0, r3
 8003878:	f001 f9a6 	bl	8004bc8 <RCCEx_PLL2_Config>
 800387c:	4603      	mov	r3, r0
 800387e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003882:	e015      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003884:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003888:	3328      	adds	r3, #40	@ 0x28
 800388a:	2101      	movs	r1, #1
 800388c:	4618      	mov	r0, r3
 800388e:	f001 fa4d 	bl	8004d2c <RCCEx_PLL3_Config>
 8003892:	4603      	mov	r3, r0
 8003894:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003898:	e00a      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038a0:	e006      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80038a2:	bf00      	nop
 80038a4:	e004      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80038a6:	bf00      	nop
 80038a8:	e002      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80038aa:	bf00      	nop
 80038ac:	e000      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80038ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d10b      	bne.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80038b8:	4ba3      	ldr	r3, [pc, #652]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038bc:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80038c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80038c8:	4a9f      	ldr	r2, [pc, #636]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038ca:	430b      	orrs	r3, r1
 80038cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80038ce:	e003      	b.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80038d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80038e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80038e8:	2300      	movs	r3, #0
 80038ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80038ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80038f2:	460b      	mov	r3, r1
 80038f4:	4313      	orrs	r3, r2
 80038f6:	d037      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80038f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003902:	d00e      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003904:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003908:	d816      	bhi.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800390a:	2b00      	cmp	r3, #0
 800390c:	d018      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800390e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003912:	d111      	bne.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003914:	4b8c      	ldr	r3, [pc, #560]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003918:	4a8b      	ldr	r2, [pc, #556]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800391a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800391e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003920:	e00f      	b.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003922:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003926:	3308      	adds	r3, #8
 8003928:	2101      	movs	r1, #1
 800392a:	4618      	mov	r0, r3
 800392c:	f001 f94c 	bl	8004bc8 <RCCEx_PLL2_Config>
 8003930:	4603      	mov	r3, r0
 8003932:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003936:	e004      	b.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800393e:	e000      	b.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003940:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003942:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003946:	2b00      	cmp	r3, #0
 8003948:	d10a      	bne.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800394a:	4b7f      	ldr	r3, [pc, #508]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800394c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800394e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003952:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003956:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003958:	4a7b      	ldr	r2, [pc, #492]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800395a:	430b      	orrs	r3, r1
 800395c:	6513      	str	r3, [r2, #80]	@ 0x50
 800395e:	e003      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003960:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003964:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003968:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800396c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003970:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003974:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003978:	2300      	movs	r3, #0
 800397a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800397e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003982:	460b      	mov	r3, r1
 8003984:	4313      	orrs	r3, r2
 8003986:	d039      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003988:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800398c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800398e:	2b03      	cmp	r3, #3
 8003990:	d81c      	bhi.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003992:	a201      	add	r2, pc, #4	@ (adr r2, 8003998 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003998:	080039d5 	.word	0x080039d5
 800399c:	080039a9 	.word	0x080039a9
 80039a0:	080039b7 	.word	0x080039b7
 80039a4:	080039d5 	.word	0x080039d5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039a8:	4b67      	ldr	r3, [pc, #412]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ac:	4a66      	ldr	r2, [pc, #408]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80039b4:	e00f      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80039b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ba:	3308      	adds	r3, #8
 80039bc:	2102      	movs	r1, #2
 80039be:	4618      	mov	r0, r3
 80039c0:	f001 f902 	bl	8004bc8 <RCCEx_PLL2_Config>
 80039c4:	4603      	mov	r3, r0
 80039c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80039ca:	e004      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80039d2:	e000      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80039d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d10a      	bne.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80039de:	4b5a      	ldr	r3, [pc, #360]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039e2:	f023 0103 	bic.w	r1, r3, #3
 80039e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039ec:	4a56      	ldr	r2, [pc, #344]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039ee:	430b      	orrs	r3, r1
 80039f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80039f2:	e003      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a04:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003a08:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003a12:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003a16:	460b      	mov	r3, r1
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	f000 809f 	beq.w	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a1e:	4b4b      	ldr	r3, [pc, #300]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a4a      	ldr	r2, [pc, #296]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003a24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a28:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a2a:	f7fd ffe5 	bl	80019f8 <HAL_GetTick>
 8003a2e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a32:	e00b      	b.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a34:	f7fd ffe0 	bl	80019f8 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	2b64      	cmp	r3, #100	@ 0x64
 8003a42:	d903      	bls.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a4a:	e005      	b.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a4c:	4b3f      	ldr	r3, [pc, #252]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d0ed      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003a58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d179      	bne.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003a60:	4b39      	ldr	r3, [pc, #228]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a62:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a68:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003a6c:	4053      	eors	r3, r2
 8003a6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d015      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a76:	4b34      	ldr	r3, [pc, #208]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a7e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a82:	4b31      	ldr	r3, [pc, #196]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a86:	4a30      	ldr	r2, [pc, #192]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a8c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a8e:	4b2e      	ldr	r3, [pc, #184]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a92:	4a2d      	ldr	r2, [pc, #180]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a98:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003a9a:	4a2b      	ldr	r2, [pc, #172]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003aa0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aa6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003aaa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003aae:	d118      	bne.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab0:	f7fd ffa2 	bl	80019f8 <HAL_GetTick>
 8003ab4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ab8:	e00d      	b.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aba:	f7fd ff9d 	bl	80019f8 <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003ac4:	1ad2      	subs	r2, r2, r3
 8003ac6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d903      	bls.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003ad4:	e005      	b.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ad6:	4b1c      	ldr	r3, [pc, #112]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ad8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d0eb      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003ae2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d129      	bne.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003af2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003af6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003afa:	d10e      	bne.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003afc:	4b12      	ldr	r3, [pc, #72]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003afe:	691b      	ldr	r3, [r3, #16]
 8003b00:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003b04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b08:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003b0c:	091a      	lsrs	r2, r3, #4
 8003b0e:	4b10      	ldr	r3, [pc, #64]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003b10:	4013      	ands	r3, r2
 8003b12:	4a0d      	ldr	r2, [pc, #52]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b14:	430b      	orrs	r3, r1
 8003b16:	6113      	str	r3, [r2, #16]
 8003b18:	e005      	b.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003b1a:	4b0b      	ldr	r3, [pc, #44]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	4a0a      	ldr	r2, [pc, #40]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b20:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003b24:	6113      	str	r3, [r2, #16]
 8003b26:	4b08      	ldr	r3, [pc, #32]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b28:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b2e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003b32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b36:	4a04      	ldr	r2, [pc, #16]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b38:	430b      	orrs	r3, r1
 8003b3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b3c:	e00e      	b.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003b46:	e009      	b.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003b48:	58024400 	.word	0x58024400
 8003b4c:	58024800 	.word	0x58024800
 8003b50:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b58:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003b5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b64:	f002 0301 	and.w	r3, r2, #1
 8003b68:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003b72:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003b76:	460b      	mov	r3, r1
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	f000 8089 	beq.w	8003c90 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b82:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b84:	2b28      	cmp	r3, #40	@ 0x28
 8003b86:	d86b      	bhi.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003b88:	a201      	add	r2, pc, #4	@ (adr r2, 8003b90 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b8e:	bf00      	nop
 8003b90:	08003c69 	.word	0x08003c69
 8003b94:	08003c61 	.word	0x08003c61
 8003b98:	08003c61 	.word	0x08003c61
 8003b9c:	08003c61 	.word	0x08003c61
 8003ba0:	08003c61 	.word	0x08003c61
 8003ba4:	08003c61 	.word	0x08003c61
 8003ba8:	08003c61 	.word	0x08003c61
 8003bac:	08003c61 	.word	0x08003c61
 8003bb0:	08003c35 	.word	0x08003c35
 8003bb4:	08003c61 	.word	0x08003c61
 8003bb8:	08003c61 	.word	0x08003c61
 8003bbc:	08003c61 	.word	0x08003c61
 8003bc0:	08003c61 	.word	0x08003c61
 8003bc4:	08003c61 	.word	0x08003c61
 8003bc8:	08003c61 	.word	0x08003c61
 8003bcc:	08003c61 	.word	0x08003c61
 8003bd0:	08003c4b 	.word	0x08003c4b
 8003bd4:	08003c61 	.word	0x08003c61
 8003bd8:	08003c61 	.word	0x08003c61
 8003bdc:	08003c61 	.word	0x08003c61
 8003be0:	08003c61 	.word	0x08003c61
 8003be4:	08003c61 	.word	0x08003c61
 8003be8:	08003c61 	.word	0x08003c61
 8003bec:	08003c61 	.word	0x08003c61
 8003bf0:	08003c69 	.word	0x08003c69
 8003bf4:	08003c61 	.word	0x08003c61
 8003bf8:	08003c61 	.word	0x08003c61
 8003bfc:	08003c61 	.word	0x08003c61
 8003c00:	08003c61 	.word	0x08003c61
 8003c04:	08003c61 	.word	0x08003c61
 8003c08:	08003c61 	.word	0x08003c61
 8003c0c:	08003c61 	.word	0x08003c61
 8003c10:	08003c69 	.word	0x08003c69
 8003c14:	08003c61 	.word	0x08003c61
 8003c18:	08003c61 	.word	0x08003c61
 8003c1c:	08003c61 	.word	0x08003c61
 8003c20:	08003c61 	.word	0x08003c61
 8003c24:	08003c61 	.word	0x08003c61
 8003c28:	08003c61 	.word	0x08003c61
 8003c2c:	08003c61 	.word	0x08003c61
 8003c30:	08003c69 	.word	0x08003c69
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c38:	3308      	adds	r3, #8
 8003c3a:	2101      	movs	r1, #1
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f000 ffc3 	bl	8004bc8 <RCCEx_PLL2_Config>
 8003c42:	4603      	mov	r3, r0
 8003c44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003c48:	e00f      	b.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c4e:	3328      	adds	r3, #40	@ 0x28
 8003c50:	2101      	movs	r1, #1
 8003c52:	4618      	mov	r0, r3
 8003c54:	f001 f86a 	bl	8004d2c <RCCEx_PLL3_Config>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003c5e:	e004      	b.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c66:	e000      	b.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003c68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d10a      	bne.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003c72:	4bbf      	ldr	r3, [pc, #764]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003c74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c76:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c7e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c80:	4abb      	ldr	r2, [pc, #748]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003c82:	430b      	orrs	r3, r1
 8003c84:	6553      	str	r3, [r2, #84]	@ 0x54
 8003c86:	e003      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c8c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003c90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c98:	f002 0302 	and.w	r3, r2, #2
 8003c9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003ca6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003caa:	460b      	mov	r3, r1
 8003cac:	4313      	orrs	r3, r2
 8003cae:	d041      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003cb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cb4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003cb6:	2b05      	cmp	r3, #5
 8003cb8:	d824      	bhi.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003cba:	a201      	add	r2, pc, #4	@ (adr r2, 8003cc0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc0:	08003d0d 	.word	0x08003d0d
 8003cc4:	08003cd9 	.word	0x08003cd9
 8003cc8:	08003cef 	.word	0x08003cef
 8003ccc:	08003d0d 	.word	0x08003d0d
 8003cd0:	08003d0d 	.word	0x08003d0d
 8003cd4:	08003d0d 	.word	0x08003d0d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003cd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cdc:	3308      	adds	r3, #8
 8003cde:	2101      	movs	r1, #1
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f000 ff71 	bl	8004bc8 <RCCEx_PLL2_Config>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003cec:	e00f      	b.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cf2:	3328      	adds	r3, #40	@ 0x28
 8003cf4:	2101      	movs	r1, #1
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f001 f818 	bl	8004d2c <RCCEx_PLL3_Config>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003d02:	e004      	b.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d0a:	e000      	b.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003d0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d10a      	bne.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003d16:	4b96      	ldr	r3, [pc, #600]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d1a:	f023 0107 	bic.w	r1, r3, #7
 8003d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d22:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d24:	4a92      	ldr	r2, [pc, #584]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d26:	430b      	orrs	r3, r1
 8003d28:	6553      	str	r3, [r2, #84]	@ 0x54
 8003d2a:	e003      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d30:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d3c:	f002 0304 	and.w	r3, r2, #4
 8003d40:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d44:	2300      	movs	r3, #0
 8003d46:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d4a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003d4e:	460b      	mov	r3, r1
 8003d50:	4313      	orrs	r3, r2
 8003d52:	d044      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d5c:	2b05      	cmp	r3, #5
 8003d5e:	d825      	bhi.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003d60:	a201      	add	r2, pc, #4	@ (adr r2, 8003d68 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d66:	bf00      	nop
 8003d68:	08003db5 	.word	0x08003db5
 8003d6c:	08003d81 	.word	0x08003d81
 8003d70:	08003d97 	.word	0x08003d97
 8003d74:	08003db5 	.word	0x08003db5
 8003d78:	08003db5 	.word	0x08003db5
 8003d7c:	08003db5 	.word	0x08003db5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d84:	3308      	adds	r3, #8
 8003d86:	2101      	movs	r1, #1
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f000 ff1d 	bl	8004bc8 <RCCEx_PLL2_Config>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003d94:	e00f      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d9a:	3328      	adds	r3, #40	@ 0x28
 8003d9c:	2101      	movs	r1, #1
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f000 ffc4 	bl	8004d2c <RCCEx_PLL3_Config>
 8003da4:	4603      	mov	r3, r0
 8003da6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003daa:	e004      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003db2:	e000      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003db4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003db6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d10b      	bne.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003dbe:	4b6c      	ldr	r3, [pc, #432]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003dc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dc2:	f023 0107 	bic.w	r1, r3, #7
 8003dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dce:	4a68      	ldr	r2, [pc, #416]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003dd0:	430b      	orrs	r3, r1
 8003dd2:	6593      	str	r3, [r2, #88]	@ 0x58
 8003dd4:	e003      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dda:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de6:	f002 0320 	and.w	r3, r2, #32
 8003dea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003dee:	2300      	movs	r3, #0
 8003df0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003df4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003df8:	460b      	mov	r3, r1
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	d055      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e06:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e0a:	d033      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003e0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e10:	d82c      	bhi.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003e12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e16:	d02f      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003e18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e1c:	d826      	bhi.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003e1e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003e22:	d02b      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003e24:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003e28:	d820      	bhi.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003e2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e2e:	d012      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003e30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e34:	d81a      	bhi.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d022      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003e3a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e3e:	d115      	bne.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e44:	3308      	adds	r3, #8
 8003e46:	2100      	movs	r1, #0
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f000 febd 	bl	8004bc8 <RCCEx_PLL2_Config>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003e54:	e015      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e5a:	3328      	adds	r3, #40	@ 0x28
 8003e5c:	2102      	movs	r1, #2
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f000 ff64 	bl	8004d2c <RCCEx_PLL3_Config>
 8003e64:	4603      	mov	r3, r0
 8003e66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003e6a:	e00a      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e72:	e006      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003e74:	bf00      	nop
 8003e76:	e004      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003e78:	bf00      	nop
 8003e7a:	e002      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003e7c:	bf00      	nop
 8003e7e:	e000      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003e80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d10b      	bne.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e8a:	4b39      	ldr	r3, [pc, #228]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e8e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e9a:	4a35      	ldr	r2, [pc, #212]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e9c:	430b      	orrs	r3, r1
 8003e9e:	6553      	str	r3, [r2, #84]	@ 0x54
 8003ea0:	e003      	b.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ea2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ea6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003eb6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003eba:	2300      	movs	r3, #0
 8003ebc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003ec0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	d058      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003eca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ece:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003ed2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003ed6:	d033      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003ed8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003edc:	d82c      	bhi.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003ede:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ee2:	d02f      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003ee4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ee8:	d826      	bhi.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003eea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003eee:	d02b      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003ef0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ef4:	d820      	bhi.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003ef6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003efa:	d012      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003efc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f00:	d81a      	bhi.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d022      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003f06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f0a:	d115      	bne.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f10:	3308      	adds	r3, #8
 8003f12:	2100      	movs	r1, #0
 8003f14:	4618      	mov	r0, r3
 8003f16:	f000 fe57 	bl	8004bc8 <RCCEx_PLL2_Config>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003f20:	e015      	b.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f26:	3328      	adds	r3, #40	@ 0x28
 8003f28:	2102      	movs	r1, #2
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f000 fefe 	bl	8004d2c <RCCEx_PLL3_Config>
 8003f30:	4603      	mov	r3, r0
 8003f32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003f36:	e00a      	b.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f3e:	e006      	b.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003f40:	bf00      	nop
 8003f42:	e004      	b.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003f44:	bf00      	nop
 8003f46:	e002      	b.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003f48:	bf00      	nop
 8003f4a:	e000      	b.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003f4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d10e      	bne.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f56:	4b06      	ldr	r3, [pc, #24]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f5a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f62:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f66:	4a02      	ldr	r2, [pc, #8]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f68:	430b      	orrs	r3, r1
 8003f6a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f6c:	e006      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003f6e:	bf00      	nop
 8003f70:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f78:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003f7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f84:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003f88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003f92:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003f96:	460b      	mov	r3, r1
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	d055      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003f9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fa0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003fa4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003fa8:	d033      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003faa:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003fae:	d82c      	bhi.n	800400a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003fb0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fb4:	d02f      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003fb6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fba:	d826      	bhi.n	800400a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003fbc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003fc0:	d02b      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003fc2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003fc6:	d820      	bhi.n	800400a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003fc8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003fcc:	d012      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003fce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003fd2:	d81a      	bhi.n	800400a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d022      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003fd8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fdc:	d115      	bne.n	800400a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fe2:	3308      	adds	r3, #8
 8003fe4:	2100      	movs	r1, #0
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f000 fdee 	bl	8004bc8 <RCCEx_PLL2_Config>
 8003fec:	4603      	mov	r3, r0
 8003fee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003ff2:	e015      	b.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003ff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ff8:	3328      	adds	r3, #40	@ 0x28
 8003ffa:	2102      	movs	r1, #2
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f000 fe95 	bl	8004d2c <RCCEx_PLL3_Config>
 8004002:	4603      	mov	r3, r0
 8004004:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004008:	e00a      	b.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004010:	e006      	b.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004012:	bf00      	nop
 8004014:	e004      	b.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004016:	bf00      	nop
 8004018:	e002      	b.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800401a:	bf00      	nop
 800401c:	e000      	b.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800401e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004020:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004024:	2b00      	cmp	r3, #0
 8004026:	d10b      	bne.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004028:	4ba1      	ldr	r3, [pc, #644]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800402a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800402c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004030:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004034:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004038:	4a9d      	ldr	r2, [pc, #628]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800403a:	430b      	orrs	r3, r1
 800403c:	6593      	str	r3, [r2, #88]	@ 0x58
 800403e:	e003      	b.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004040:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004044:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004048:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800404c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004050:	f002 0308 	and.w	r3, r2, #8
 8004054:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004058:	2300      	movs	r3, #0
 800405a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800405e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004062:	460b      	mov	r3, r1
 8004064:	4313      	orrs	r3, r2
 8004066:	d01e      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004068:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800406c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004070:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004074:	d10c      	bne.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004076:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800407a:	3328      	adds	r3, #40	@ 0x28
 800407c:	2102      	movs	r1, #2
 800407e:	4618      	mov	r0, r3
 8004080:	f000 fe54 	bl	8004d2c <RCCEx_PLL3_Config>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d002      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004090:	4b87      	ldr	r3, [pc, #540]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004092:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004094:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004098:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800409c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040a0:	4a83      	ldr	r2, [pc, #524]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040a2:	430b      	orrs	r3, r1
 80040a4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80040a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ae:	f002 0310 	and.w	r3, r2, #16
 80040b2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80040b6:	2300      	movs	r3, #0
 80040b8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80040bc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80040c0:	460b      	mov	r3, r1
 80040c2:	4313      	orrs	r3, r2
 80040c4:	d01e      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80040c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80040ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040d2:	d10c      	bne.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80040d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040d8:	3328      	adds	r3, #40	@ 0x28
 80040da:	2102      	movs	r1, #2
 80040dc:	4618      	mov	r0, r3
 80040de:	f000 fe25 	bl	8004d2c <RCCEx_PLL3_Config>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d002      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80040ee:	4b70      	ldr	r3, [pc, #448]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040f2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80040f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80040fe:	4a6c      	ldr	r2, [pc, #432]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004100:	430b      	orrs	r3, r1
 8004102:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004104:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800410c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004110:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004114:	2300      	movs	r3, #0
 8004116:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800411a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800411e:	460b      	mov	r3, r1
 8004120:	4313      	orrs	r3, r2
 8004122:	d03e      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004124:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004128:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800412c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004130:	d022      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004132:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004136:	d81b      	bhi.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004138:	2b00      	cmp	r3, #0
 800413a:	d003      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800413c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004140:	d00b      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004142:	e015      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004144:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004148:	3308      	adds	r3, #8
 800414a:	2100      	movs	r1, #0
 800414c:	4618      	mov	r0, r3
 800414e:	f000 fd3b 	bl	8004bc8 <RCCEx_PLL2_Config>
 8004152:	4603      	mov	r3, r0
 8004154:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004158:	e00f      	b.n	800417a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800415a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800415e:	3328      	adds	r3, #40	@ 0x28
 8004160:	2102      	movs	r1, #2
 8004162:	4618      	mov	r0, r3
 8004164:	f000 fde2 	bl	8004d2c <RCCEx_PLL3_Config>
 8004168:	4603      	mov	r3, r0
 800416a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800416e:	e004      	b.n	800417a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004176:	e000      	b.n	800417a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004178:	bf00      	nop
    }

    if (ret == HAL_OK)
 800417a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800417e:	2b00      	cmp	r3, #0
 8004180:	d10b      	bne.n	800419a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004182:	4b4b      	ldr	r3, [pc, #300]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004184:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004186:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800418a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800418e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004192:	4a47      	ldr	r2, [pc, #284]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004194:	430b      	orrs	r3, r1
 8004196:	6593      	str	r3, [r2, #88]	@ 0x58
 8004198:	e003      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800419a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800419e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80041a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041aa:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80041ae:	67bb      	str	r3, [r7, #120]	@ 0x78
 80041b0:	2300      	movs	r3, #0
 80041b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80041b4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80041b8:	460b      	mov	r3, r1
 80041ba:	4313      	orrs	r3, r2
 80041bc:	d03b      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80041be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041c6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80041ca:	d01f      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80041cc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80041d0:	d818      	bhi.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80041d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80041d6:	d003      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80041d8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80041dc:	d007      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80041de:	e011      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041e0:	4b33      	ldr	r3, [pc, #204]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041e4:	4a32      	ldr	r2, [pc, #200]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80041ec:	e00f      	b.n	800420e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80041ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041f2:	3328      	adds	r3, #40	@ 0x28
 80041f4:	2101      	movs	r1, #1
 80041f6:	4618      	mov	r0, r3
 80041f8:	f000 fd98 	bl	8004d2c <RCCEx_PLL3_Config>
 80041fc:	4603      	mov	r3, r0
 80041fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004202:	e004      	b.n	800420e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800420a:	e000      	b.n	800420e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800420c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800420e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004212:	2b00      	cmp	r3, #0
 8004214:	d10b      	bne.n	800422e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004216:	4b26      	ldr	r3, [pc, #152]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004218:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800421a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800421e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004222:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004226:	4a22      	ldr	r2, [pc, #136]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004228:	430b      	orrs	r3, r1
 800422a:	6553      	str	r3, [r2, #84]	@ 0x54
 800422c:	e003      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800422e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004232:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004236:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800423a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800423e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004242:	673b      	str	r3, [r7, #112]	@ 0x70
 8004244:	2300      	movs	r3, #0
 8004246:	677b      	str	r3, [r7, #116]	@ 0x74
 8004248:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800424c:	460b      	mov	r3, r1
 800424e:	4313      	orrs	r3, r2
 8004250:	d034      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004252:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004256:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004258:	2b00      	cmp	r3, #0
 800425a:	d003      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800425c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004260:	d007      	beq.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004262:	e011      	b.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004264:	4b12      	ldr	r3, [pc, #72]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004268:	4a11      	ldr	r2, [pc, #68]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800426a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800426e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004270:	e00e      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004272:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004276:	3308      	adds	r3, #8
 8004278:	2102      	movs	r1, #2
 800427a:	4618      	mov	r0, r3
 800427c:	f000 fca4 	bl	8004bc8 <RCCEx_PLL2_Config>
 8004280:	4603      	mov	r3, r0
 8004282:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004286:	e003      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800428e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004290:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004294:	2b00      	cmp	r3, #0
 8004296:	d10d      	bne.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004298:	4b05      	ldr	r3, [pc, #20]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800429a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800429c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80042a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042a6:	4a02      	ldr	r2, [pc, #8]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042a8:	430b      	orrs	r3, r1
 80042aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80042ac:	e006      	b.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80042ae:	bf00      	nop
 80042b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80042bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80042c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80042ca:	2300      	movs	r3, #0
 80042cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80042ce:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80042d2:	460b      	mov	r3, r1
 80042d4:	4313      	orrs	r3, r2
 80042d6:	d00c      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80042d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042dc:	3328      	adds	r3, #40	@ 0x28
 80042de:	2102      	movs	r1, #2
 80042e0:	4618      	mov	r0, r3
 80042e2:	f000 fd23 	bl	8004d2c <RCCEx_PLL3_Config>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d002      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80042f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042fa:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80042fe:	663b      	str	r3, [r7, #96]	@ 0x60
 8004300:	2300      	movs	r3, #0
 8004302:	667b      	str	r3, [r7, #100]	@ 0x64
 8004304:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004308:	460b      	mov	r3, r1
 800430a:	4313      	orrs	r3, r2
 800430c:	d038      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800430e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004312:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004316:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800431a:	d018      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800431c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004320:	d811      	bhi.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004322:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004326:	d014      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004328:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800432c:	d80b      	bhi.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800432e:	2b00      	cmp	r3, #0
 8004330:	d011      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004332:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004336:	d106      	bne.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004338:	4bc3      	ldr	r3, [pc, #780]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800433a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800433c:	4ac2      	ldr	r2, [pc, #776]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800433e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004342:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004344:	e008      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800434c:	e004      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800434e:	bf00      	nop
 8004350:	e002      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004352:	bf00      	nop
 8004354:	e000      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004356:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004358:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800435c:	2b00      	cmp	r3, #0
 800435e:	d10b      	bne.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004360:	4bb9      	ldr	r3, [pc, #740]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004362:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004364:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004368:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800436c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004370:	4ab5      	ldr	r2, [pc, #724]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004372:	430b      	orrs	r3, r1
 8004374:	6553      	str	r3, [r2, #84]	@ 0x54
 8004376:	e003      	b.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004378:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800437c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004380:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004388:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800438c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800438e:	2300      	movs	r3, #0
 8004390:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004392:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004396:	460b      	mov	r3, r1
 8004398:	4313      	orrs	r3, r2
 800439a:	d009      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800439c:	4baa      	ldr	r3, [pc, #680]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800439e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043a0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80043a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043aa:	4aa7      	ldr	r2, [pc, #668]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043ac:	430b      	orrs	r3, r1
 80043ae:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80043b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80043bc:	653b      	str	r3, [r7, #80]	@ 0x50
 80043be:	2300      	movs	r3, #0
 80043c0:	657b      	str	r3, [r7, #84]	@ 0x54
 80043c2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80043c6:	460b      	mov	r3, r1
 80043c8:	4313      	orrs	r3, r2
 80043ca:	d00a      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80043cc:	4b9e      	ldr	r3, [pc, #632]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043ce:	691b      	ldr	r3, [r3, #16]
 80043d0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80043d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043d8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80043dc:	4a9a      	ldr	r2, [pc, #616]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043de:	430b      	orrs	r3, r1
 80043e0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80043e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ea:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80043ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043f0:	2300      	movs	r3, #0
 80043f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043f4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80043f8:	460b      	mov	r3, r1
 80043fa:	4313      	orrs	r3, r2
 80043fc:	d009      	beq.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80043fe:	4b92      	ldr	r3, [pc, #584]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004400:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004402:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004406:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800440a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800440c:	4a8e      	ldr	r2, [pc, #568]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800440e:	430b      	orrs	r3, r1
 8004410:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004412:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800441a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800441e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004420:	2300      	movs	r3, #0
 8004422:	647b      	str	r3, [r7, #68]	@ 0x44
 8004424:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004428:	460b      	mov	r3, r1
 800442a:	4313      	orrs	r3, r2
 800442c:	d00e      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800442e:	4b86      	ldr	r3, [pc, #536]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	4a85      	ldr	r2, [pc, #532]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004434:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004438:	6113      	str	r3, [r2, #16]
 800443a:	4b83      	ldr	r3, [pc, #524]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800443c:	6919      	ldr	r1, [r3, #16]
 800443e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004442:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004446:	4a80      	ldr	r2, [pc, #512]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004448:	430b      	orrs	r3, r1
 800444a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800444c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004454:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004458:	63bb      	str	r3, [r7, #56]	@ 0x38
 800445a:	2300      	movs	r3, #0
 800445c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800445e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004462:	460b      	mov	r3, r1
 8004464:	4313      	orrs	r3, r2
 8004466:	d009      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004468:	4b77      	ldr	r3, [pc, #476]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800446a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800446c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004470:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004474:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004476:	4a74      	ldr	r2, [pc, #464]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004478:	430b      	orrs	r3, r1
 800447a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800447c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004484:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004488:	633b      	str	r3, [r7, #48]	@ 0x30
 800448a:	2300      	movs	r3, #0
 800448c:	637b      	str	r3, [r7, #52]	@ 0x34
 800448e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004492:	460b      	mov	r3, r1
 8004494:	4313      	orrs	r3, r2
 8004496:	d00a      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004498:	4b6b      	ldr	r3, [pc, #428]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800449a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800449c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80044a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80044a8:	4a67      	ldr	r2, [pc, #412]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044aa:	430b      	orrs	r3, r1
 80044ac:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80044ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b6:	2100      	movs	r1, #0
 80044b8:	62b9      	str	r1, [r7, #40]	@ 0x28
 80044ba:	f003 0301 	and.w	r3, r3, #1
 80044be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044c0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80044c4:	460b      	mov	r3, r1
 80044c6:	4313      	orrs	r3, r2
 80044c8:	d011      	beq.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80044ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044ce:	3308      	adds	r3, #8
 80044d0:	2100      	movs	r1, #0
 80044d2:	4618      	mov	r0, r3
 80044d4:	f000 fb78 	bl	8004bc8 <RCCEx_PLL2_Config>
 80044d8:	4603      	mov	r3, r0
 80044da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80044de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d003      	beq.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80044ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f6:	2100      	movs	r1, #0
 80044f8:	6239      	str	r1, [r7, #32]
 80044fa:	f003 0302 	and.w	r3, r3, #2
 80044fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8004500:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004504:	460b      	mov	r3, r1
 8004506:	4313      	orrs	r3, r2
 8004508:	d011      	beq.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800450a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800450e:	3308      	adds	r3, #8
 8004510:	2101      	movs	r1, #1
 8004512:	4618      	mov	r0, r3
 8004514:	f000 fb58 	bl	8004bc8 <RCCEx_PLL2_Config>
 8004518:	4603      	mov	r3, r0
 800451a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800451e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004522:	2b00      	cmp	r3, #0
 8004524:	d003      	beq.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004526:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800452a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800452e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004536:	2100      	movs	r1, #0
 8004538:	61b9      	str	r1, [r7, #24]
 800453a:	f003 0304 	and.w	r3, r3, #4
 800453e:	61fb      	str	r3, [r7, #28]
 8004540:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004544:	460b      	mov	r3, r1
 8004546:	4313      	orrs	r3, r2
 8004548:	d011      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800454a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800454e:	3308      	adds	r3, #8
 8004550:	2102      	movs	r1, #2
 8004552:	4618      	mov	r0, r3
 8004554:	f000 fb38 	bl	8004bc8 <RCCEx_PLL2_Config>
 8004558:	4603      	mov	r3, r0
 800455a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800455e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004562:	2b00      	cmp	r3, #0
 8004564:	d003      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004566:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800456a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800456e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004576:	2100      	movs	r1, #0
 8004578:	6139      	str	r1, [r7, #16]
 800457a:	f003 0308 	and.w	r3, r3, #8
 800457e:	617b      	str	r3, [r7, #20]
 8004580:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004584:	460b      	mov	r3, r1
 8004586:	4313      	orrs	r3, r2
 8004588:	d011      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800458a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800458e:	3328      	adds	r3, #40	@ 0x28
 8004590:	2100      	movs	r1, #0
 8004592:	4618      	mov	r0, r3
 8004594:	f000 fbca 	bl	8004d2c <RCCEx_PLL3_Config>
 8004598:	4603      	mov	r3, r0
 800459a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800459e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d003      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80045ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b6:	2100      	movs	r1, #0
 80045b8:	60b9      	str	r1, [r7, #8]
 80045ba:	f003 0310 	and.w	r3, r3, #16
 80045be:	60fb      	str	r3, [r7, #12]
 80045c0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80045c4:	460b      	mov	r3, r1
 80045c6:	4313      	orrs	r3, r2
 80045c8:	d011      	beq.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80045ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ce:	3328      	adds	r3, #40	@ 0x28
 80045d0:	2101      	movs	r1, #1
 80045d2:	4618      	mov	r0, r3
 80045d4:	f000 fbaa 	bl	8004d2c <RCCEx_PLL3_Config>
 80045d8:	4603      	mov	r3, r0
 80045da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80045de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d003      	beq.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80045ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f6:	2100      	movs	r1, #0
 80045f8:	6039      	str	r1, [r7, #0]
 80045fa:	f003 0320 	and.w	r3, r3, #32
 80045fe:	607b      	str	r3, [r7, #4]
 8004600:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004604:	460b      	mov	r3, r1
 8004606:	4313      	orrs	r3, r2
 8004608:	d011      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800460a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800460e:	3328      	adds	r3, #40	@ 0x28
 8004610:	2102      	movs	r1, #2
 8004612:	4618      	mov	r0, r3
 8004614:	f000 fb8a 	bl	8004d2c <RCCEx_PLL3_Config>
 8004618:	4603      	mov	r3, r0
 800461a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800461e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004622:	2b00      	cmp	r3, #0
 8004624:	d003      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004626:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800462a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800462e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004632:	2b00      	cmp	r3, #0
 8004634:	d101      	bne.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004636:	2300      	movs	r3, #0
 8004638:	e000      	b.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
}
 800463c:	4618      	mov	r0, r3
 800463e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004642:	46bd      	mov	sp, r7
 8004644:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004648:	58024400 	.word	0x58024400

0800464c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004650:	f7fe fd96 	bl	8003180 <HAL_RCC_GetHCLKFreq>
 8004654:	4602      	mov	r2, r0
 8004656:	4b06      	ldr	r3, [pc, #24]	@ (8004670 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004658:	6a1b      	ldr	r3, [r3, #32]
 800465a:	091b      	lsrs	r3, r3, #4
 800465c:	f003 0307 	and.w	r3, r3, #7
 8004660:	4904      	ldr	r1, [pc, #16]	@ (8004674 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004662:	5ccb      	ldrb	r3, [r1, r3]
 8004664:	f003 031f 	and.w	r3, r3, #31
 8004668:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800466c:	4618      	mov	r0, r3
 800466e:	bd80      	pop	{r7, pc}
 8004670:	58024400 	.word	0x58024400
 8004674:	08007358 	.word	0x08007358

08004678 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004678:	b480      	push	{r7}
 800467a:	b089      	sub	sp, #36	@ 0x24
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004680:	4ba1      	ldr	r3, [pc, #644]	@ (8004908 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004684:	f003 0303 	and.w	r3, r3, #3
 8004688:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800468a:	4b9f      	ldr	r3, [pc, #636]	@ (8004908 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800468c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800468e:	0b1b      	lsrs	r3, r3, #12
 8004690:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004694:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004696:	4b9c      	ldr	r3, [pc, #624]	@ (8004908 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800469a:	091b      	lsrs	r3, r3, #4
 800469c:	f003 0301 	and.w	r3, r3, #1
 80046a0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80046a2:	4b99      	ldr	r3, [pc, #612]	@ (8004908 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046a6:	08db      	lsrs	r3, r3, #3
 80046a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80046ac:	693a      	ldr	r2, [r7, #16]
 80046ae:	fb02 f303 	mul.w	r3, r2, r3
 80046b2:	ee07 3a90 	vmov	s15, r3
 80046b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	f000 8111 	beq.w	80048e8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	f000 8083 	beq.w	80047d4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	2b02      	cmp	r3, #2
 80046d2:	f200 80a1 	bhi.w	8004818 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d003      	beq.n	80046e4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d056      	beq.n	8004790 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80046e2:	e099      	b.n	8004818 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80046e4:	4b88      	ldr	r3, [pc, #544]	@ (8004908 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0320 	and.w	r3, r3, #32
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d02d      	beq.n	800474c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80046f0:	4b85      	ldr	r3, [pc, #532]	@ (8004908 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	08db      	lsrs	r3, r3, #3
 80046f6:	f003 0303 	and.w	r3, r3, #3
 80046fa:	4a84      	ldr	r2, [pc, #528]	@ (800490c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80046fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004700:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	ee07 3a90 	vmov	s15, r3
 8004708:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	ee07 3a90 	vmov	s15, r3
 8004712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800471a:	4b7b      	ldr	r3, [pc, #492]	@ (8004908 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800471c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800471e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004722:	ee07 3a90 	vmov	s15, r3
 8004726:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800472a:	ed97 6a03 	vldr	s12, [r7, #12]
 800472e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004910 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004732:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004736:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800473a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800473e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004746:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800474a:	e087      	b.n	800485c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	ee07 3a90 	vmov	s15, r3
 8004752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004756:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004914 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800475a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800475e:	4b6a      	ldr	r3, [pc, #424]	@ (8004908 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004760:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004762:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004766:	ee07 3a90 	vmov	s15, r3
 800476a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800476e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004772:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004910 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004776:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800477a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800477e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004782:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800478a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800478e:	e065      	b.n	800485c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	ee07 3a90 	vmov	s15, r3
 8004796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800479a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004918 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800479e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047a2:	4b59      	ldr	r3, [pc, #356]	@ (8004908 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047aa:	ee07 3a90 	vmov	s15, r3
 80047ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80047b6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004910 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80047ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047d2:	e043      	b.n	800485c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	ee07 3a90 	vmov	s15, r3
 80047da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047de:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800491c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80047e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047e6:	4b48      	ldr	r3, [pc, #288]	@ (8004908 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047ee:	ee07 3a90 	vmov	s15, r3
 80047f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80047fa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004910 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80047fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004802:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004806:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800480a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800480e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004812:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004816:	e021      	b.n	800485c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	ee07 3a90 	vmov	s15, r3
 800481e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004822:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004918 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004826:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800482a:	4b37      	ldr	r3, [pc, #220]	@ (8004908 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800482c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800482e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004832:	ee07 3a90 	vmov	s15, r3
 8004836:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800483a:	ed97 6a03 	vldr	s12, [r7, #12]
 800483e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004910 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004842:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004846:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800484a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800484e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004852:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004856:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800485a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800485c:	4b2a      	ldr	r3, [pc, #168]	@ (8004908 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800485e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004860:	0a5b      	lsrs	r3, r3, #9
 8004862:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004866:	ee07 3a90 	vmov	s15, r3
 800486a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800486e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004872:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004876:	edd7 6a07 	vldr	s13, [r7, #28]
 800487a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800487e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004882:	ee17 2a90 	vmov	r2, s15
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800488a:	4b1f      	ldr	r3, [pc, #124]	@ (8004908 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800488c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800488e:	0c1b      	lsrs	r3, r3, #16
 8004890:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004894:	ee07 3a90 	vmov	s15, r3
 8004898:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800489c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80048a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80048a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80048a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048b0:	ee17 2a90 	vmov	r2, s15
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80048b8:	4b13      	ldr	r3, [pc, #76]	@ (8004908 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048bc:	0e1b      	lsrs	r3, r3, #24
 80048be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80048c2:	ee07 3a90 	vmov	s15, r3
 80048c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80048ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80048d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80048d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048de:	ee17 2a90 	vmov	r2, s15
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80048e6:	e008      	b.n	80048fa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	609a      	str	r2, [r3, #8]
}
 80048fa:	bf00      	nop
 80048fc:	3724      	adds	r7, #36	@ 0x24
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
 8004906:	bf00      	nop
 8004908:	58024400 	.word	0x58024400
 800490c:	03d09000 	.word	0x03d09000
 8004910:	46000000 	.word	0x46000000
 8004914:	4c742400 	.word	0x4c742400
 8004918:	4a742400 	.word	0x4a742400
 800491c:	4bbebc20 	.word	0x4bbebc20

08004920 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004920:	b480      	push	{r7}
 8004922:	b089      	sub	sp, #36	@ 0x24
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004928:	4ba1      	ldr	r3, [pc, #644]	@ (8004bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800492a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800492c:	f003 0303 	and.w	r3, r3, #3
 8004930:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004932:	4b9f      	ldr	r3, [pc, #636]	@ (8004bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004936:	0d1b      	lsrs	r3, r3, #20
 8004938:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800493c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800493e:	4b9c      	ldr	r3, [pc, #624]	@ (8004bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004942:	0a1b      	lsrs	r3, r3, #8
 8004944:	f003 0301 	and.w	r3, r3, #1
 8004948:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800494a:	4b99      	ldr	r3, [pc, #612]	@ (8004bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800494c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800494e:	08db      	lsrs	r3, r3, #3
 8004950:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004954:	693a      	ldr	r2, [r7, #16]
 8004956:	fb02 f303 	mul.w	r3, r2, r3
 800495a:	ee07 3a90 	vmov	s15, r3
 800495e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004962:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	2b00      	cmp	r3, #0
 800496a:	f000 8111 	beq.w	8004b90 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	2b02      	cmp	r3, #2
 8004972:	f000 8083 	beq.w	8004a7c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	2b02      	cmp	r3, #2
 800497a:	f200 80a1 	bhi.w	8004ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d003      	beq.n	800498c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	2b01      	cmp	r3, #1
 8004988:	d056      	beq.n	8004a38 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800498a:	e099      	b.n	8004ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800498c:	4b88      	ldr	r3, [pc, #544]	@ (8004bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0320 	and.w	r3, r3, #32
 8004994:	2b00      	cmp	r3, #0
 8004996:	d02d      	beq.n	80049f4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004998:	4b85      	ldr	r3, [pc, #532]	@ (8004bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	08db      	lsrs	r3, r3, #3
 800499e:	f003 0303 	and.w	r3, r3, #3
 80049a2:	4a84      	ldr	r2, [pc, #528]	@ (8004bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80049a4:	fa22 f303 	lsr.w	r3, r2, r3
 80049a8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	ee07 3a90 	vmov	s15, r3
 80049b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	ee07 3a90 	vmov	s15, r3
 80049ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049c2:	4b7b      	ldr	r3, [pc, #492]	@ (8004bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049ca:	ee07 3a90 	vmov	s15, r3
 80049ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80049d6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80049da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ee:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80049f2:	e087      	b.n	8004b04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	ee07 3a90 	vmov	s15, r3
 80049fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049fe:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004bbc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004a02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a06:	4b6a      	ldr	r3, [pc, #424]	@ (8004bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a0e:	ee07 3a90 	vmov	s15, r3
 8004a12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a16:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a1a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a36:	e065      	b.n	8004b04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	ee07 3a90 	vmov	s15, r3
 8004a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a42:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004a46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a4a:	4b59      	ldr	r3, [pc, #356]	@ (8004bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a52:	ee07 3a90 	vmov	s15, r3
 8004a56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a5e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a7a:	e043      	b.n	8004b04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	ee07 3a90 	vmov	s15, r3
 8004a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a86:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004a8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a8e:	4b48      	ldr	r3, [pc, #288]	@ (8004bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a96:	ee07 3a90 	vmov	s15, r3
 8004a9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004aa2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004aa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004aaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004aae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ab2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004abe:	e021      	b.n	8004b04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	ee07 3a90 	vmov	s15, r3
 8004ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aca:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004ace:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ad2:	4b37      	ldr	r3, [pc, #220]	@ (8004bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ada:	ee07 3a90 	vmov	s15, r3
 8004ade:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ae2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ae6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004aea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004aee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004af2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004af6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004afa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004afe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b02:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004b04:	4b2a      	ldr	r3, [pc, #168]	@ (8004bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b08:	0a5b      	lsrs	r3, r3, #9
 8004b0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b0e:	ee07 3a90 	vmov	s15, r3
 8004b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b16:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b2a:	ee17 2a90 	vmov	r2, s15
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004b32:	4b1f      	ldr	r3, [pc, #124]	@ (8004bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b36:	0c1b      	lsrs	r3, r3, #16
 8004b38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b3c:	ee07 3a90 	vmov	s15, r3
 8004b40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b44:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b48:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b4c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b58:	ee17 2a90 	vmov	r2, s15
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004b60:	4b13      	ldr	r3, [pc, #76]	@ (8004bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b64:	0e1b      	lsrs	r3, r3, #24
 8004b66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b6a:	ee07 3a90 	vmov	s15, r3
 8004b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b72:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b86:	ee17 2a90 	vmov	r2, s15
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004b8e:	e008      	b.n	8004ba2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	609a      	str	r2, [r3, #8]
}
 8004ba2:	bf00      	nop
 8004ba4:	3724      	adds	r7, #36	@ 0x24
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr
 8004bae:	bf00      	nop
 8004bb0:	58024400 	.word	0x58024400
 8004bb4:	03d09000 	.word	0x03d09000
 8004bb8:	46000000 	.word	0x46000000
 8004bbc:	4c742400 	.word	0x4c742400
 8004bc0:	4a742400 	.word	0x4a742400
 8004bc4:	4bbebc20 	.word	0x4bbebc20

08004bc8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004bd6:	4b53      	ldr	r3, [pc, #332]	@ (8004d24 <RCCEx_PLL2_Config+0x15c>)
 8004bd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bda:	f003 0303 	and.w	r3, r3, #3
 8004bde:	2b03      	cmp	r3, #3
 8004be0:	d101      	bne.n	8004be6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e099      	b.n	8004d1a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004be6:	4b4f      	ldr	r3, [pc, #316]	@ (8004d24 <RCCEx_PLL2_Config+0x15c>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a4e      	ldr	r2, [pc, #312]	@ (8004d24 <RCCEx_PLL2_Config+0x15c>)
 8004bec:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004bf0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bf2:	f7fc ff01 	bl	80019f8 <HAL_GetTick>
 8004bf6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004bf8:	e008      	b.n	8004c0c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004bfa:	f7fc fefd 	bl	80019f8 <HAL_GetTick>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	2b02      	cmp	r3, #2
 8004c06:	d901      	bls.n	8004c0c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	e086      	b.n	8004d1a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004c0c:	4b45      	ldr	r3, [pc, #276]	@ (8004d24 <RCCEx_PLL2_Config+0x15c>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d1f0      	bne.n	8004bfa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004c18:	4b42      	ldr	r3, [pc, #264]	@ (8004d24 <RCCEx_PLL2_Config+0x15c>)
 8004c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c1c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	031b      	lsls	r3, r3, #12
 8004c26:	493f      	ldr	r1, [pc, #252]	@ (8004d24 <RCCEx_PLL2_Config+0x15c>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	628b      	str	r3, [r1, #40]	@ 0x28
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	3b01      	subs	r3, #1
 8004c32:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	3b01      	subs	r3, #1
 8004c3c:	025b      	lsls	r3, r3, #9
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	431a      	orrs	r2, r3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	3b01      	subs	r3, #1
 8004c48:	041b      	lsls	r3, r3, #16
 8004c4a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004c4e:	431a      	orrs	r2, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	3b01      	subs	r3, #1
 8004c56:	061b      	lsls	r3, r3, #24
 8004c58:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004c5c:	4931      	ldr	r1, [pc, #196]	@ (8004d24 <RCCEx_PLL2_Config+0x15c>)
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004c62:	4b30      	ldr	r3, [pc, #192]	@ (8004d24 <RCCEx_PLL2_Config+0x15c>)
 8004c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c66:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	695b      	ldr	r3, [r3, #20]
 8004c6e:	492d      	ldr	r1, [pc, #180]	@ (8004d24 <RCCEx_PLL2_Config+0x15c>)
 8004c70:	4313      	orrs	r3, r2
 8004c72:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004c74:	4b2b      	ldr	r3, [pc, #172]	@ (8004d24 <RCCEx_PLL2_Config+0x15c>)
 8004c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c78:	f023 0220 	bic.w	r2, r3, #32
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	699b      	ldr	r3, [r3, #24]
 8004c80:	4928      	ldr	r1, [pc, #160]	@ (8004d24 <RCCEx_PLL2_Config+0x15c>)
 8004c82:	4313      	orrs	r3, r2
 8004c84:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004c86:	4b27      	ldr	r3, [pc, #156]	@ (8004d24 <RCCEx_PLL2_Config+0x15c>)
 8004c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c8a:	4a26      	ldr	r2, [pc, #152]	@ (8004d24 <RCCEx_PLL2_Config+0x15c>)
 8004c8c:	f023 0310 	bic.w	r3, r3, #16
 8004c90:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004c92:	4b24      	ldr	r3, [pc, #144]	@ (8004d24 <RCCEx_PLL2_Config+0x15c>)
 8004c94:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c96:	4b24      	ldr	r3, [pc, #144]	@ (8004d28 <RCCEx_PLL2_Config+0x160>)
 8004c98:	4013      	ands	r3, r2
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	69d2      	ldr	r2, [r2, #28]
 8004c9e:	00d2      	lsls	r2, r2, #3
 8004ca0:	4920      	ldr	r1, [pc, #128]	@ (8004d24 <RCCEx_PLL2_Config+0x15c>)
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004ca6:	4b1f      	ldr	r3, [pc, #124]	@ (8004d24 <RCCEx_PLL2_Config+0x15c>)
 8004ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004caa:	4a1e      	ldr	r2, [pc, #120]	@ (8004d24 <RCCEx_PLL2_Config+0x15c>)
 8004cac:	f043 0310 	orr.w	r3, r3, #16
 8004cb0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d106      	bne.n	8004cc6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004cb8:	4b1a      	ldr	r3, [pc, #104]	@ (8004d24 <RCCEx_PLL2_Config+0x15c>)
 8004cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cbc:	4a19      	ldr	r2, [pc, #100]	@ (8004d24 <RCCEx_PLL2_Config+0x15c>)
 8004cbe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004cc2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004cc4:	e00f      	b.n	8004ce6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d106      	bne.n	8004cda <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004ccc:	4b15      	ldr	r3, [pc, #84]	@ (8004d24 <RCCEx_PLL2_Config+0x15c>)
 8004cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cd0:	4a14      	ldr	r2, [pc, #80]	@ (8004d24 <RCCEx_PLL2_Config+0x15c>)
 8004cd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004cd6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004cd8:	e005      	b.n	8004ce6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004cda:	4b12      	ldr	r3, [pc, #72]	@ (8004d24 <RCCEx_PLL2_Config+0x15c>)
 8004cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cde:	4a11      	ldr	r2, [pc, #68]	@ (8004d24 <RCCEx_PLL2_Config+0x15c>)
 8004ce0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004ce4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004ce6:	4b0f      	ldr	r3, [pc, #60]	@ (8004d24 <RCCEx_PLL2_Config+0x15c>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a0e      	ldr	r2, [pc, #56]	@ (8004d24 <RCCEx_PLL2_Config+0x15c>)
 8004cec:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004cf0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cf2:	f7fc fe81 	bl	80019f8 <HAL_GetTick>
 8004cf6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004cf8:	e008      	b.n	8004d0c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004cfa:	f7fc fe7d 	bl	80019f8 <HAL_GetTick>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	2b02      	cmp	r3, #2
 8004d06:	d901      	bls.n	8004d0c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004d08:	2303      	movs	r3, #3
 8004d0a:	e006      	b.n	8004d1a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004d0c:	4b05      	ldr	r3, [pc, #20]	@ (8004d24 <RCCEx_PLL2_Config+0x15c>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d0f0      	beq.n	8004cfa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3710      	adds	r7, #16
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
 8004d22:	bf00      	nop
 8004d24:	58024400 	.word	0x58024400
 8004d28:	ffff0007 	.word	0xffff0007

08004d2c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d36:	2300      	movs	r3, #0
 8004d38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004d3a:	4b53      	ldr	r3, [pc, #332]	@ (8004e88 <RCCEx_PLL3_Config+0x15c>)
 8004d3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d3e:	f003 0303 	and.w	r3, r3, #3
 8004d42:	2b03      	cmp	r3, #3
 8004d44:	d101      	bne.n	8004d4a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e099      	b.n	8004e7e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004d4a:	4b4f      	ldr	r3, [pc, #316]	@ (8004e88 <RCCEx_PLL3_Config+0x15c>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a4e      	ldr	r2, [pc, #312]	@ (8004e88 <RCCEx_PLL3_Config+0x15c>)
 8004d50:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d56:	f7fc fe4f 	bl	80019f8 <HAL_GetTick>
 8004d5a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004d5c:	e008      	b.n	8004d70 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004d5e:	f7fc fe4b 	bl	80019f8 <HAL_GetTick>
 8004d62:	4602      	mov	r2, r0
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d901      	bls.n	8004d70 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	e086      	b.n	8004e7e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004d70:	4b45      	ldr	r3, [pc, #276]	@ (8004e88 <RCCEx_PLL3_Config+0x15c>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d1f0      	bne.n	8004d5e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004d7c:	4b42      	ldr	r3, [pc, #264]	@ (8004e88 <RCCEx_PLL3_Config+0x15c>)
 8004d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d80:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	051b      	lsls	r3, r3, #20
 8004d8a:	493f      	ldr	r1, [pc, #252]	@ (8004e88 <RCCEx_PLL3_Config+0x15c>)
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	3b01      	subs	r3, #1
 8004d96:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	3b01      	subs	r3, #1
 8004da0:	025b      	lsls	r3, r3, #9
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	431a      	orrs	r2, r3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	3b01      	subs	r3, #1
 8004dac:	041b      	lsls	r3, r3, #16
 8004dae:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004db2:	431a      	orrs	r2, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	3b01      	subs	r3, #1
 8004dba:	061b      	lsls	r3, r3, #24
 8004dbc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004dc0:	4931      	ldr	r1, [pc, #196]	@ (8004e88 <RCCEx_PLL3_Config+0x15c>)
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004dc6:	4b30      	ldr	r3, [pc, #192]	@ (8004e88 <RCCEx_PLL3_Config+0x15c>)
 8004dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dca:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	695b      	ldr	r3, [r3, #20]
 8004dd2:	492d      	ldr	r1, [pc, #180]	@ (8004e88 <RCCEx_PLL3_Config+0x15c>)
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004dd8:	4b2b      	ldr	r3, [pc, #172]	@ (8004e88 <RCCEx_PLL3_Config+0x15c>)
 8004dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ddc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	699b      	ldr	r3, [r3, #24]
 8004de4:	4928      	ldr	r1, [pc, #160]	@ (8004e88 <RCCEx_PLL3_Config+0x15c>)
 8004de6:	4313      	orrs	r3, r2
 8004de8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004dea:	4b27      	ldr	r3, [pc, #156]	@ (8004e88 <RCCEx_PLL3_Config+0x15c>)
 8004dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dee:	4a26      	ldr	r2, [pc, #152]	@ (8004e88 <RCCEx_PLL3_Config+0x15c>)
 8004df0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004df4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004df6:	4b24      	ldr	r3, [pc, #144]	@ (8004e88 <RCCEx_PLL3_Config+0x15c>)
 8004df8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004dfa:	4b24      	ldr	r3, [pc, #144]	@ (8004e8c <RCCEx_PLL3_Config+0x160>)
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	69d2      	ldr	r2, [r2, #28]
 8004e02:	00d2      	lsls	r2, r2, #3
 8004e04:	4920      	ldr	r1, [pc, #128]	@ (8004e88 <RCCEx_PLL3_Config+0x15c>)
 8004e06:	4313      	orrs	r3, r2
 8004e08:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004e0a:	4b1f      	ldr	r3, [pc, #124]	@ (8004e88 <RCCEx_PLL3_Config+0x15c>)
 8004e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e0e:	4a1e      	ldr	r2, [pc, #120]	@ (8004e88 <RCCEx_PLL3_Config+0x15c>)
 8004e10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e14:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d106      	bne.n	8004e2a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004e1c:	4b1a      	ldr	r3, [pc, #104]	@ (8004e88 <RCCEx_PLL3_Config+0x15c>)
 8004e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e20:	4a19      	ldr	r2, [pc, #100]	@ (8004e88 <RCCEx_PLL3_Config+0x15c>)
 8004e22:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004e26:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004e28:	e00f      	b.n	8004e4a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d106      	bne.n	8004e3e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004e30:	4b15      	ldr	r3, [pc, #84]	@ (8004e88 <RCCEx_PLL3_Config+0x15c>)
 8004e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e34:	4a14      	ldr	r2, [pc, #80]	@ (8004e88 <RCCEx_PLL3_Config+0x15c>)
 8004e36:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004e3a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004e3c:	e005      	b.n	8004e4a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004e3e:	4b12      	ldr	r3, [pc, #72]	@ (8004e88 <RCCEx_PLL3_Config+0x15c>)
 8004e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e42:	4a11      	ldr	r2, [pc, #68]	@ (8004e88 <RCCEx_PLL3_Config+0x15c>)
 8004e44:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e48:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004e4a:	4b0f      	ldr	r3, [pc, #60]	@ (8004e88 <RCCEx_PLL3_Config+0x15c>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a0e      	ldr	r2, [pc, #56]	@ (8004e88 <RCCEx_PLL3_Config+0x15c>)
 8004e50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e56:	f7fc fdcf 	bl	80019f8 <HAL_GetTick>
 8004e5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004e5c:	e008      	b.n	8004e70 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004e5e:	f7fc fdcb 	bl	80019f8 <HAL_GetTick>
 8004e62:	4602      	mov	r2, r0
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	2b02      	cmp	r3, #2
 8004e6a:	d901      	bls.n	8004e70 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	e006      	b.n	8004e7e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004e70:	4b05      	ldr	r3, [pc, #20]	@ (8004e88 <RCCEx_PLL3_Config+0x15c>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d0f0      	beq.n	8004e5e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3710      	adds	r7, #16
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	58024400 	.word	0x58024400
 8004e8c:	ffff0007 	.word	0xffff0007

08004e90 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d101      	bne.n	8004ea2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e10f      	b.n	80050c2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a87      	ldr	r2, [pc, #540]	@ (80050cc <HAL_SPI_Init+0x23c>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d00f      	beq.n	8004ed2 <HAL_SPI_Init+0x42>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a86      	ldr	r2, [pc, #536]	@ (80050d0 <HAL_SPI_Init+0x240>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d00a      	beq.n	8004ed2 <HAL_SPI_Init+0x42>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a84      	ldr	r2, [pc, #528]	@ (80050d4 <HAL_SPI_Init+0x244>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d005      	beq.n	8004ed2 <HAL_SPI_Init+0x42>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	2b0f      	cmp	r3, #15
 8004ecc:	d901      	bls.n	8004ed2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e0f7      	b.n	80050c2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f001 f968 	bl	80061a8 <SPI_GetPacketSize>
 8004ed8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a7b      	ldr	r2, [pc, #492]	@ (80050cc <HAL_SPI_Init+0x23c>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d00c      	beq.n	8004efe <HAL_SPI_Init+0x6e>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a79      	ldr	r2, [pc, #484]	@ (80050d0 <HAL_SPI_Init+0x240>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d007      	beq.n	8004efe <HAL_SPI_Init+0x6e>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a78      	ldr	r2, [pc, #480]	@ (80050d4 <HAL_SPI_Init+0x244>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d002      	beq.n	8004efe <HAL_SPI_Init+0x6e>
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2b08      	cmp	r3, #8
 8004efc:	d811      	bhi.n	8004f22 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004f02:	4a72      	ldr	r2, [pc, #456]	@ (80050cc <HAL_SPI_Init+0x23c>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d009      	beq.n	8004f1c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a70      	ldr	r2, [pc, #448]	@ (80050d0 <HAL_SPI_Init+0x240>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d004      	beq.n	8004f1c <HAL_SPI_Init+0x8c>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a6f      	ldr	r2, [pc, #444]	@ (80050d4 <HAL_SPI_Init+0x244>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d104      	bne.n	8004f26 <HAL_SPI_Init+0x96>
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2b10      	cmp	r3, #16
 8004f20:	d901      	bls.n	8004f26 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e0cd      	b.n	80050c2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d106      	bne.n	8004f40 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f7fc fa44 	bl	80013c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2202      	movs	r2, #2
 8004f44:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f022 0201 	bic.w	r2, r2, #1
 8004f56:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8004f62:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	699b      	ldr	r3, [r3, #24]
 8004f68:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004f6c:	d119      	bne.n	8004fa2 <HAL_SPI_Init+0x112>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f76:	d103      	bne.n	8004f80 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d008      	beq.n	8004f92 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d10c      	bne.n	8004fa2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004f8c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004f90:	d107      	bne.n	8004fa2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004fa0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d00f      	beq.n	8004fce <HAL_SPI_Init+0x13e>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	2b06      	cmp	r3, #6
 8004fb4:	d90b      	bls.n	8004fce <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	430a      	orrs	r2, r1
 8004fca:	601a      	str	r2, [r3, #0]
 8004fcc:	e007      	b.n	8004fde <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004fdc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	69da      	ldr	r2, [r3, #28]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fe6:	431a      	orrs	r2, r3
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	431a      	orrs	r2, r3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ff0:	ea42 0103 	orr.w	r1, r2, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	68da      	ldr	r2, [r3, #12]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	430a      	orrs	r2, r1
 8004ffe:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005008:	431a      	orrs	r2, r3
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800500e:	431a      	orrs	r2, r3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	699b      	ldr	r3, [r3, #24]
 8005014:	431a      	orrs	r2, r3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	431a      	orrs	r2, r3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	695b      	ldr	r3, [r3, #20]
 8005020:	431a      	orrs	r2, r3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a1b      	ldr	r3, [r3, #32]
 8005026:	431a      	orrs	r2, r3
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	431a      	orrs	r2, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005032:	431a      	orrs	r2, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	431a      	orrs	r2, r3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800503e:	ea42 0103 	orr.w	r1, r2, r3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	430a      	orrs	r2, r1
 800504c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d113      	bne.n	800507e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005068:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800507c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f022 0201 	bic.w	r2, r2, #1
 800508c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d00a      	beq.n	80050b0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	430a      	orrs	r2, r1
 80050ae:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80050c0:	2300      	movs	r3, #0
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3710      	adds	r7, #16
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	40013000 	.word	0x40013000
 80050d0:	40003800 	.word	0x40003800
 80050d4:	40003c00 	.word	0x40003c00

080050d8 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b088      	sub	sp, #32
 80050dc:	af02      	add	r7, sp, #8
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	60b9      	str	r1, [r7, #8]
 80050e2:	603b      	str	r3, [r7, #0]
 80050e4:	4613      	mov	r3, r2
 80050e6:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	3320      	adds	r3, #32
 80050ee:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80050f0:	f7fc fc82 	bl	80019f8 <HAL_GetTick>
 80050f4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d001      	beq.n	8005106 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8005102:	2302      	movs	r3, #2
 8005104:	e1d1      	b.n	80054aa <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d002      	beq.n	8005112 <HAL_SPI_Transmit+0x3a>
 800510c:	88fb      	ldrh	r3, [r7, #6]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d101      	bne.n	8005116 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e1c9      	b.n	80054aa <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800511c:	2b01      	cmp	r3, #1
 800511e:	d101      	bne.n	8005124 <HAL_SPI_Transmit+0x4c>
 8005120:	2302      	movs	r3, #2
 8005122:	e1c2      	b.n	80054aa <HAL_SPI_Transmit+0x3d2>
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2203      	movs	r2, #3
 8005130:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2200      	movs	r2, #0
 8005138:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	68ba      	ldr	r2, [r7, #8]
 8005140:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	88fa      	ldrh	r2, [r7, #6]
 8005146:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	88fa      	ldrh	r2, [r7, #6]
 800514e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2200      	movs	r2, #0
 8005156:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2200      	movs	r2, #0
 800515c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2200      	movs	r2, #0
 8005164:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2200      	movs	r2, #0
 800516c:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2200      	movs	r2, #0
 8005172:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800517c:	d108      	bne.n	8005190 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800518c:	601a      	str	r2, [r3, #0]
 800518e:	e009      	b.n	80051a4 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80051a2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	685a      	ldr	r2, [r3, #4]
 80051aa:	4b96      	ldr	r3, [pc, #600]	@ (8005404 <HAL_SPI_Transmit+0x32c>)
 80051ac:	4013      	ands	r3, r2
 80051ae:	88f9      	ldrh	r1, [r7, #6]
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	6812      	ldr	r2, [r2, #0]
 80051b4:	430b      	orrs	r3, r1
 80051b6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f042 0201 	orr.w	r2, r2, #1
 80051c6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80051d0:	d107      	bne.n	80051e2 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051e0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	2b0f      	cmp	r3, #15
 80051e8:	d947      	bls.n	800527a <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80051ea:	e03f      	b.n	800526c <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	695b      	ldr	r3, [r3, #20]
 80051f2:	f003 0302 	and.w	r3, r3, #2
 80051f6:	2b02      	cmp	r3, #2
 80051f8:	d114      	bne.n	8005224 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	6812      	ldr	r2, [r2, #0]
 8005204:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800520a:	1d1a      	adds	r2, r3, #4
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005216:	b29b      	uxth	r3, r3
 8005218:	3b01      	subs	r3, #1
 800521a:	b29a      	uxth	r2, r3
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005222:	e023      	b.n	800526c <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005224:	f7fc fbe8 	bl	80019f8 <HAL_GetTick>
 8005228:	4602      	mov	r2, r0
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	683a      	ldr	r2, [r7, #0]
 8005230:	429a      	cmp	r2, r3
 8005232:	d803      	bhi.n	800523c <HAL_SPI_Transmit+0x164>
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800523a:	d102      	bne.n	8005242 <HAL_SPI_Transmit+0x16a>
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d114      	bne.n	800526c <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005242:	68f8      	ldr	r0, [r7, #12]
 8005244:	f000 fee2 	bl	800600c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800524e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2200      	movs	r2, #0
 8005264:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005268:	2303      	movs	r3, #3
 800526a:	e11e      	b.n	80054aa <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005272:	b29b      	uxth	r3, r3
 8005274:	2b00      	cmp	r3, #0
 8005276:	d1b9      	bne.n	80051ec <HAL_SPI_Transmit+0x114>
 8005278:	e0f1      	b.n	800545e <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	2b07      	cmp	r3, #7
 8005280:	f240 80e6 	bls.w	8005450 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005284:	e05d      	b.n	8005342 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	695b      	ldr	r3, [r3, #20]
 800528c:	f003 0302 	and.w	r3, r3, #2
 8005290:	2b02      	cmp	r3, #2
 8005292:	d132      	bne.n	80052fa <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800529a:	b29b      	uxth	r3, r3
 800529c:	2b01      	cmp	r3, #1
 800529e:	d918      	bls.n	80052d2 <HAL_SPI_Transmit+0x1fa>
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d014      	beq.n	80052d2 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	6812      	ldr	r2, [r2, #0]
 80052b2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052b8:	1d1a      	adds	r2, r3, #4
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	3b02      	subs	r3, #2
 80052c8:	b29a      	uxth	r2, r3
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80052d0:	e037      	b.n	8005342 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052d6:	881a      	ldrh	r2, [r3, #0]
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052e0:	1c9a      	adds	r2, r3, #2
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	3b01      	subs	r3, #1
 80052f0:	b29a      	uxth	r2, r3
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80052f8:	e023      	b.n	8005342 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052fa:	f7fc fb7d 	bl	80019f8 <HAL_GetTick>
 80052fe:	4602      	mov	r2, r0
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	1ad3      	subs	r3, r2, r3
 8005304:	683a      	ldr	r2, [r7, #0]
 8005306:	429a      	cmp	r2, r3
 8005308:	d803      	bhi.n	8005312 <HAL_SPI_Transmit+0x23a>
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005310:	d102      	bne.n	8005318 <HAL_SPI_Transmit+0x240>
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d114      	bne.n	8005342 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005318:	68f8      	ldr	r0, [r7, #12]
 800531a:	f000 fe77 	bl	800600c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005324:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2201      	movs	r2, #1
 8005332:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2200      	movs	r2, #0
 800533a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	e0b3      	b.n	80054aa <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005348:	b29b      	uxth	r3, r3
 800534a:	2b00      	cmp	r3, #0
 800534c:	d19b      	bne.n	8005286 <HAL_SPI_Transmit+0x1ae>
 800534e:	e086      	b.n	800545e <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	695b      	ldr	r3, [r3, #20]
 8005356:	f003 0302 	and.w	r3, r3, #2
 800535a:	2b02      	cmp	r3, #2
 800535c:	d154      	bne.n	8005408 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005364:	b29b      	uxth	r3, r3
 8005366:	2b03      	cmp	r3, #3
 8005368:	d918      	bls.n	800539c <HAL_SPI_Transmit+0x2c4>
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800536e:	2b40      	cmp	r3, #64	@ 0x40
 8005370:	d914      	bls.n	800539c <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	6812      	ldr	r2, [r2, #0]
 800537c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005382:	1d1a      	adds	r2, r3, #4
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800538e:	b29b      	uxth	r3, r3
 8005390:	3b04      	subs	r3, #4
 8005392:	b29a      	uxth	r2, r3
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800539a:	e059      	b.n	8005450 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d917      	bls.n	80053d8 <HAL_SPI_Transmit+0x300>
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d013      	beq.n	80053d8 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053b4:	881a      	ldrh	r2, [r3, #0]
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053be:	1c9a      	adds	r2, r3, #2
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	3b02      	subs	r3, #2
 80053ce:	b29a      	uxth	r2, r3
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80053d6:	e03b      	b.n	8005450 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	3320      	adds	r3, #32
 80053e2:	7812      	ldrb	r2, [r2, #0]
 80053e4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053ea:	1c5a      	adds	r2, r3, #1
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	3b01      	subs	r3, #1
 80053fa:	b29a      	uxth	r2, r3
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005402:	e025      	b.n	8005450 <HAL_SPI_Transmit+0x378>
 8005404:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005408:	f7fc faf6 	bl	80019f8 <HAL_GetTick>
 800540c:	4602      	mov	r2, r0
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	683a      	ldr	r2, [r7, #0]
 8005414:	429a      	cmp	r2, r3
 8005416:	d803      	bhi.n	8005420 <HAL_SPI_Transmit+0x348>
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800541e:	d102      	bne.n	8005426 <HAL_SPI_Transmit+0x34e>
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d114      	bne.n	8005450 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005426:	68f8      	ldr	r0, [r7, #12]
 8005428:	f000 fdf0 	bl	800600c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005432:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2200      	movs	r2, #0
 8005448:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800544c:	2303      	movs	r3, #3
 800544e:	e02c      	b.n	80054aa <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005456:	b29b      	uxth	r3, r3
 8005458:	2b00      	cmp	r3, #0
 800545a:	f47f af79 	bne.w	8005350 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	9300      	str	r3, [sp, #0]
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	2200      	movs	r2, #0
 8005466:	2108      	movs	r1, #8
 8005468:	68f8      	ldr	r0, [r7, #12]
 800546a:	f000 fe6f 	bl	800614c <SPI_WaitOnFlagUntilTimeout>
 800546e:	4603      	mov	r3, r0
 8005470:	2b00      	cmp	r3, #0
 8005472:	d007      	beq.n	8005484 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800547a:	f043 0220 	orr.w	r2, r3, #32
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005484:	68f8      	ldr	r0, [r7, #12]
 8005486:	f000 fdc1 	bl	800600c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2201      	movs	r2, #1
 800548e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2200      	movs	r2, #0
 8005496:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d001      	beq.n	80054a8 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	e000      	b.n	80054aa <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 80054a8:	2300      	movs	r3, #0
  }
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3718      	adds	r7, #24
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop

080054b4 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b088      	sub	sp, #32
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	60b9      	str	r1, [r7, #8]
 80054be:	603b      	str	r3, [r7, #0]
 80054c0:	4613      	mov	r3, r2
 80054c2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054c8:	095b      	lsrs	r3, r3, #5
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	3301      	adds	r3, #1
 80054ce:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	3330      	adds	r3, #48	@ 0x30
 80054d6:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054d8:	f7fc fa8e 	bl	80019f8 <HAL_GetTick>
 80054dc:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d001      	beq.n	80054ee <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 80054ea:	2302      	movs	r3, #2
 80054ec:	e250      	b.n	8005990 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d002      	beq.n	80054fa <HAL_SPI_Receive+0x46>
 80054f4:	88fb      	ldrh	r3, [r7, #6]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d101      	bne.n	80054fe <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e248      	b.n	8005990 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8005504:	2b01      	cmp	r3, #1
 8005506:	d101      	bne.n	800550c <HAL_SPI_Receive+0x58>
 8005508:	2302      	movs	r3, #2
 800550a:	e241      	b.n	8005990 <HAL_SPI_Receive+0x4dc>
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2204      	movs	r2, #4
 8005518:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2200      	movs	r2, #0
 8005520:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	68ba      	ldr	r2, [r7, #8]
 8005528:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	88fa      	ldrh	r2, [r7, #6]
 800552e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	88fa      	ldrh	r2, [r7, #6]
 8005536:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2200      	movs	r2, #0
 800553e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2200      	movs	r2, #0
 8005544:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2200      	movs	r2, #0
 800554c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2200      	movs	r2, #0
 8005554:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2200      	movs	r2, #0
 800555a:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8005564:	d108      	bne.n	8005578 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005574:	601a      	str	r2, [r3, #0]
 8005576:	e009      	b.n	800558c <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800558a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	685a      	ldr	r2, [r3, #4]
 8005592:	4b95      	ldr	r3, [pc, #596]	@ (80057e8 <HAL_SPI_Receive+0x334>)
 8005594:	4013      	ands	r3, r2
 8005596:	88f9      	ldrh	r1, [r7, #6]
 8005598:	68fa      	ldr	r2, [r7, #12]
 800559a:	6812      	ldr	r2, [r2, #0]
 800559c:	430b      	orrs	r3, r1
 800559e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f042 0201 	orr.w	r2, r2, #1
 80055ae:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80055b8:	d107      	bne.n	80055ca <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055c8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	2b0f      	cmp	r3, #15
 80055d0:	d96c      	bls.n	80056ac <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80055d2:	e064      	b.n	800569e <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	695b      	ldr	r3, [r3, #20]
 80055da:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	695b      	ldr	r3, [r3, #20]
 80055e2:	f003 0301 	and.w	r3, r3, #1
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d114      	bne.n	8005614 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80055f2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80055f4:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80055fa:	1d1a      	adds	r2, r3, #4
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005606:	b29b      	uxth	r3, r3
 8005608:	3b01      	subs	r3, #1
 800560a:	b29a      	uxth	r2, r3
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005612:	e044      	b.n	800569e <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800561a:	b29b      	uxth	r3, r3
 800561c:	8bfa      	ldrh	r2, [r7, #30]
 800561e:	429a      	cmp	r2, r3
 8005620:	d919      	bls.n	8005656 <HAL_SPI_Receive+0x1a2>
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005628:	2b00      	cmp	r3, #0
 800562a:	d014      	beq.n	8005656 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005634:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005636:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800563c:	1d1a      	adds	r2, r3, #4
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005648:	b29b      	uxth	r3, r3
 800564a:	3b01      	subs	r3, #1
 800564c:	b29a      	uxth	r2, r3
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005654:	e023      	b.n	800569e <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005656:	f7fc f9cf 	bl	80019f8 <HAL_GetTick>
 800565a:	4602      	mov	r2, r0
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	1ad3      	subs	r3, r2, r3
 8005660:	683a      	ldr	r2, [r7, #0]
 8005662:	429a      	cmp	r2, r3
 8005664:	d803      	bhi.n	800566e <HAL_SPI_Receive+0x1ba>
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800566c:	d102      	bne.n	8005674 <HAL_SPI_Receive+0x1c0>
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d114      	bne.n	800569e <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005674:	68f8      	ldr	r0, [r7, #12]
 8005676:	f000 fcc9 	bl	800600c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005680:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2201      	movs	r2, #1
 800568e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2200      	movs	r2, #0
 8005696:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800569a:	2303      	movs	r3, #3
 800569c:	e178      	b.n	8005990 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d194      	bne.n	80055d4 <HAL_SPI_Receive+0x120>
 80056aa:	e15e      	b.n	800596a <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	2b07      	cmp	r3, #7
 80056b2:	f240 8153 	bls.w	800595c <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80056b6:	e08f      	b.n	80057d8 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	695b      	ldr	r3, [r3, #20]
 80056be:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	695b      	ldr	r3, [r3, #20]
 80056c6:	f003 0301 	and.w	r3, r3, #1
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d114      	bne.n	80056f8 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80056d2:	69ba      	ldr	r2, [r7, #24]
 80056d4:	8812      	ldrh	r2, [r2, #0]
 80056d6:	b292      	uxth	r2, r2
 80056d8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80056de:	1c9a      	adds	r2, r3, #2
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	3b01      	subs	r3, #1
 80056ee:	b29a      	uxth	r2, r3
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80056f6:	e06f      	b.n	80057d8 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80056fe:	b29b      	uxth	r3, r3
 8005700:	8bfa      	ldrh	r2, [r7, #30]
 8005702:	429a      	cmp	r2, r3
 8005704:	d924      	bls.n	8005750 <HAL_SPI_Receive+0x29c>
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800570c:	2b00      	cmp	r3, #0
 800570e:	d01f      	beq.n	8005750 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005714:	69ba      	ldr	r2, [r7, #24]
 8005716:	8812      	ldrh	r2, [r2, #0]
 8005718:	b292      	uxth	r2, r2
 800571a:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005720:	1c9a      	adds	r2, r3, #2
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800572a:	69ba      	ldr	r2, [r7, #24]
 800572c:	8812      	ldrh	r2, [r2, #0]
 800572e:	b292      	uxth	r2, r2
 8005730:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005736:	1c9a      	adds	r2, r3, #2
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005742:	b29b      	uxth	r3, r3
 8005744:	3b02      	subs	r3, #2
 8005746:	b29a      	uxth	r2, r3
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800574e:	e043      	b.n	80057d8 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005756:	b29b      	uxth	r3, r3
 8005758:	2b01      	cmp	r3, #1
 800575a:	d119      	bne.n	8005790 <HAL_SPI_Receive+0x2dc>
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005762:	2b00      	cmp	r3, #0
 8005764:	d014      	beq.n	8005790 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800576a:	69ba      	ldr	r2, [r7, #24]
 800576c:	8812      	ldrh	r2, [r2, #0]
 800576e:	b292      	uxth	r2, r2
 8005770:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005776:	1c9a      	adds	r2, r3, #2
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005782:	b29b      	uxth	r3, r3
 8005784:	3b01      	subs	r3, #1
 8005786:	b29a      	uxth	r2, r3
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800578e:	e023      	b.n	80057d8 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005790:	f7fc f932 	bl	80019f8 <HAL_GetTick>
 8005794:	4602      	mov	r2, r0
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	1ad3      	subs	r3, r2, r3
 800579a:	683a      	ldr	r2, [r7, #0]
 800579c:	429a      	cmp	r2, r3
 800579e:	d803      	bhi.n	80057a8 <HAL_SPI_Receive+0x2f4>
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057a6:	d102      	bne.n	80057ae <HAL_SPI_Receive+0x2fa>
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d114      	bne.n	80057d8 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80057ae:	68f8      	ldr	r0, [r7, #12]
 80057b0:	f000 fc2c 	bl	800600c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057ba:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2200      	movs	r2, #0
 80057d0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80057d4:	2303      	movs	r3, #3
 80057d6:	e0db      	b.n	8005990 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80057de:	b29b      	uxth	r3, r3
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	f47f af69 	bne.w	80056b8 <HAL_SPI_Receive+0x204>
 80057e6:	e0c0      	b.n	800596a <HAL_SPI_Receive+0x4b6>
 80057e8:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	695b      	ldr	r3, [r3, #20]
 80057f2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	695b      	ldr	r3, [r3, #20]
 80057fa:	f003 0301 	and.w	r3, r3, #1
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d117      	bne.n	8005832 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800580e:	7812      	ldrb	r2, [r2, #0]
 8005810:	b2d2      	uxtb	r2, r2
 8005812:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005818:	1c5a      	adds	r2, r3, #1
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005824:	b29b      	uxth	r3, r3
 8005826:	3b01      	subs	r3, #1
 8005828:	b29a      	uxth	r2, r3
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005830:	e094      	b.n	800595c <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005838:	b29b      	uxth	r3, r3
 800583a:	8bfa      	ldrh	r2, [r7, #30]
 800583c:	429a      	cmp	r2, r3
 800583e:	d946      	bls.n	80058ce <HAL_SPI_Receive+0x41a>
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005846:	2b00      	cmp	r3, #0
 8005848:	d041      	beq.n	80058ce <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005856:	7812      	ldrb	r2, [r2, #0]
 8005858:	b2d2      	uxtb	r2, r2
 800585a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005860:	1c5a      	adds	r2, r3, #1
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005872:	7812      	ldrb	r2, [r2, #0]
 8005874:	b2d2      	uxtb	r2, r2
 8005876:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800587c:	1c5a      	adds	r2, r3, #1
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800588e:	7812      	ldrb	r2, [r2, #0]
 8005890:	b2d2      	uxtb	r2, r2
 8005892:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005898:	1c5a      	adds	r2, r3, #1
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80058aa:	7812      	ldrb	r2, [r2, #0]
 80058ac:	b2d2      	uxtb	r2, r2
 80058ae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80058b4:	1c5a      	adds	r2, r3, #1
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	3b04      	subs	r3, #4
 80058c4:	b29a      	uxth	r2, r3
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80058cc:	e046      	b.n	800595c <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	2b03      	cmp	r3, #3
 80058d8:	d81c      	bhi.n	8005914 <HAL_SPI_Receive+0x460>
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d017      	beq.n	8005914 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80058f0:	7812      	ldrb	r2, [r2, #0]
 80058f2:	b2d2      	uxtb	r2, r2
 80058f4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80058fa:	1c5a      	adds	r2, r3, #1
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005906:	b29b      	uxth	r3, r3
 8005908:	3b01      	subs	r3, #1
 800590a:	b29a      	uxth	r2, r3
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005912:	e023      	b.n	800595c <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005914:	f7fc f870 	bl	80019f8 <HAL_GetTick>
 8005918:	4602      	mov	r2, r0
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	1ad3      	subs	r3, r2, r3
 800591e:	683a      	ldr	r2, [r7, #0]
 8005920:	429a      	cmp	r2, r3
 8005922:	d803      	bhi.n	800592c <HAL_SPI_Receive+0x478>
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800592a:	d102      	bne.n	8005932 <HAL_SPI_Receive+0x47e>
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d114      	bne.n	800595c <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005932:	68f8      	ldr	r0, [r7, #12]
 8005934:	f000 fb6a 	bl	800600c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800593e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2200      	movs	r2, #0
 8005954:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005958:	2303      	movs	r3, #3
 800595a:	e019      	b.n	8005990 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005962:	b29b      	uxth	r3, r3
 8005964:	2b00      	cmp	r3, #0
 8005966:	f47f af41 	bne.w	80057ec <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800596a:	68f8      	ldr	r0, [r7, #12]
 800596c:	f000 fb4e 	bl	800600c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2200      	movs	r2, #0
 800597c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005986:	2b00      	cmp	r3, #0
 8005988:	d001      	beq.n	800598e <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	e000      	b.n	8005990 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800598e:	2300      	movs	r3, #0
  }
}
 8005990:	4618      	mov	r0, r3
 8005992:	3720      	adds	r7, #32
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}

08005998 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b08e      	sub	sp, #56	@ 0x38
 800599c:	af02      	add	r7, sp, #8
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	60b9      	str	r1, [r7, #8]
 80059a2:	607a      	str	r2, [r7, #4]
 80059a4:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	3320      	adds	r3, #32
 80059ac:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	3330      	adds	r3, #48	@ 0x30
 80059b4:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059ba:	095b      	lsrs	r3, r3, #5
 80059bc:	b29b      	uxth	r3, r3
 80059be:	3301      	adds	r3, #1
 80059c0:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80059c2:	f7fc f819 	bl	80019f8 <HAL_GetTick>
 80059c6:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 80059c8:	887b      	ldrh	r3, [r7, #2]
 80059ca:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 80059cc:	887b      	ldrh	r3, [r7, #2]
 80059ce:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d001      	beq.n	80059e0 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 80059dc:	2302      	movs	r3, #2
 80059de:	e310      	b.n	8006002 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d005      	beq.n	80059f2 <HAL_SPI_TransmitReceive+0x5a>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d002      	beq.n	80059f2 <HAL_SPI_TransmitReceive+0x5a>
 80059ec:	887b      	ldrh	r3, [r7, #2]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d101      	bne.n	80059f6 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e305      	b.n	8006002 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d101      	bne.n	8005a04 <HAL_SPI_TransmitReceive+0x6c>
 8005a00:	2302      	movs	r3, #2
 8005a02:	e2fe      	b.n	8006002 <HAL_SPI_TransmitReceive+0x66a>
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2205      	movs	r2, #5
 8005a10:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2200      	movs	r2, #0
 8005a18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	887a      	ldrh	r2, [r7, #2]
 8005a26:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	887a      	ldrh	r2, [r7, #2]
 8005a2e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	68ba      	ldr	r2, [r7, #8]
 8005a36:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	887a      	ldrh	r2, [r7, #2]
 8005a3c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	887a      	ldrh	r2, [r7, #2]
 8005a44:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2200      	movs	r2, #0
 8005a52:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	68da      	ldr	r2, [r3, #12]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8005a62:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a70      	ldr	r2, [pc, #448]	@ (8005c2c <HAL_SPI_TransmitReceive+0x294>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d009      	beq.n	8005a82 <HAL_SPI_TransmitReceive+0xea>
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a6f      	ldr	r2, [pc, #444]	@ (8005c30 <HAL_SPI_TransmitReceive+0x298>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d004      	beq.n	8005a82 <HAL_SPI_TransmitReceive+0xea>
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a6d      	ldr	r2, [pc, #436]	@ (8005c34 <HAL_SPI_TransmitReceive+0x29c>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d102      	bne.n	8005a88 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8005a82:	2310      	movs	r3, #16
 8005a84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a86:	e001      	b.n	8005a8c <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8005a88:	2308      	movs	r3, #8
 8005a8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	685a      	ldr	r2, [r3, #4]
 8005a92:	4b69      	ldr	r3, [pc, #420]	@ (8005c38 <HAL_SPI_TransmitReceive+0x2a0>)
 8005a94:	4013      	ands	r3, r2
 8005a96:	8879      	ldrh	r1, [r7, #2]
 8005a98:	68fa      	ldr	r2, [r7, #12]
 8005a9a:	6812      	ldr	r2, [r2, #0]
 8005a9c:	430b      	orrs	r3, r1
 8005a9e:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f042 0201 	orr.w	r2, r2, #1
 8005aae:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ab8:	d107      	bne.n	8005aca <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ac8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	68db      	ldr	r3, [r3, #12]
 8005ace:	2b0f      	cmp	r3, #15
 8005ad0:	f240 80a2 	bls.w	8005c18 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8005ad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ad6:	089b      	lsrs	r3, r3, #2
 8005ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005ada:	e094      	b.n	8005c06 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	695b      	ldr	r3, [r3, #20]
 8005ae2:	f003 0302 	and.w	r3, r3, #2
 8005ae6:	2b02      	cmp	r3, #2
 8005ae8:	d120      	bne.n	8005b2c <HAL_SPI_TransmitReceive+0x194>
 8005aea:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d01d      	beq.n	8005b2c <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8005af0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005af2:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8005af4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005af6:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d217      	bcs.n	8005b2c <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	6812      	ldr	r2, [r2, #0]
 8005b06:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b0c:	1d1a      	adds	r2, r3, #4
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	3b01      	subs	r3, #1
 8005b1c:	b29a      	uxth	r2, r3
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005b2a:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	695b      	ldr	r3, [r3, #20]
 8005b32:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8005b34:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d065      	beq.n	8005c06 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	695b      	ldr	r3, [r3, #20]
 8005b40:	f003 0301 	and.w	r3, r3, #1
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d118      	bne.n	8005b7a <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b50:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005b52:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b58:	1d1a      	adds	r2, r3, #4
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	3b01      	subs	r3, #1
 8005b68:	b29a      	uxth	r2, r3
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005b76:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005b78:	e045      	b.n	8005c06 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8005b7a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005b7c:	8bfb      	ldrh	r3, [r7, #30]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d21d      	bcs.n	8005bbe <HAL_SPI_TransmitReceive+0x226>
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d018      	beq.n	8005bbe <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b94:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005b96:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b9c:	1d1a      	adds	r2, r3, #4
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	3b01      	subs	r3, #1
 8005bac:	b29a      	uxth	r2, r3
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005bba:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005bbc:	e023      	b.n	8005c06 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bbe:	f7fb ff1b 	bl	80019f8 <HAL_GetTick>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	1ad3      	subs	r3, r2, r3
 8005bc8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d803      	bhi.n	8005bd6 <HAL_SPI_TransmitReceive+0x23e>
 8005bce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bd4:	d102      	bne.n	8005bdc <HAL_SPI_TransmitReceive+0x244>
 8005bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d114      	bne.n	8005c06 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8005bdc:	68f8      	ldr	r0, [r7, #12]
 8005bde:	f000 fa15 	bl	800600c <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005be8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8005c02:	2303      	movs	r3, #3
 8005c04:	e1fd      	b.n	8006002 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005c06:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	f47f af67 	bne.w	8005adc <HAL_SPI_TransmitReceive+0x144>
 8005c0e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	f47f af63 	bne.w	8005adc <HAL_SPI_TransmitReceive+0x144>
 8005c16:	e1ce      	b.n	8005fb6 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	2b07      	cmp	r3, #7
 8005c1e:	f240 81c2 	bls.w	8005fa6 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 8005c22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c24:	085b      	lsrs	r3, r3, #1
 8005c26:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005c28:	e0c9      	b.n	8005dbe <HAL_SPI_TransmitReceive+0x426>
 8005c2a:	bf00      	nop
 8005c2c:	40013000 	.word	0x40013000
 8005c30:	40003800 	.word	0x40003800
 8005c34:	40003c00 	.word	0x40003c00
 8005c38:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	695b      	ldr	r3, [r3, #20]
 8005c42:	f003 0302 	and.w	r3, r3, #2
 8005c46:	2b02      	cmp	r3, #2
 8005c48:	d11f      	bne.n	8005c8a <HAL_SPI_TransmitReceive+0x2f2>
 8005c4a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d01c      	beq.n	8005c8a <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8005c50:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005c52:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8005c54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c56:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d216      	bcs.n	8005c8a <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c60:	881a      	ldrh	r2, [r3, #0]
 8005c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c64:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c6a:	1c9a      	adds	r2, r3, #2
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	3b01      	subs	r3, #1
 8005c7a:	b29a      	uxth	r2, r3
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005c88:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	695b      	ldr	r3, [r3, #20]
 8005c90:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8005c92:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	f000 8092 	beq.w	8005dbe <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	695b      	ldr	r3, [r3, #20]
 8005ca0:	f003 0301 	and.w	r3, r3, #1
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d118      	bne.n	8005cda <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005cac:	6a3a      	ldr	r2, [r7, #32]
 8005cae:	8812      	ldrh	r2, [r2, #0]
 8005cb0:	b292      	uxth	r2, r2
 8005cb2:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005cb8:	1c9a      	adds	r2, r3, #2
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	3b01      	subs	r3, #1
 8005cc8:	b29a      	uxth	r2, r3
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005cd6:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005cd8:	e071      	b.n	8005dbe <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8005cda:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005cdc:	8bfb      	ldrh	r3, [r7, #30]
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d228      	bcs.n	8005d34 <HAL_SPI_TransmitReceive+0x39c>
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d023      	beq.n	8005d34 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005cf0:	6a3a      	ldr	r2, [r7, #32]
 8005cf2:	8812      	ldrh	r2, [r2, #0]
 8005cf4:	b292      	uxth	r2, r2
 8005cf6:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005cfc:	1c9a      	adds	r2, r3, #2
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d06:	6a3a      	ldr	r2, [r7, #32]
 8005d08:	8812      	ldrh	r2, [r2, #0]
 8005d0a:	b292      	uxth	r2, r2
 8005d0c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d12:	1c9a      	adds	r2, r3, #2
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	3b02      	subs	r3, #2
 8005d22:	b29a      	uxth	r2, r3
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005d30:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005d32:	e044      	b.n	8005dbe <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8005d34:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d11d      	bne.n	8005d76 <HAL_SPI_TransmitReceive+0x3de>
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d018      	beq.n	8005d76 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d48:	6a3a      	ldr	r2, [r7, #32]
 8005d4a:	8812      	ldrh	r2, [r2, #0]
 8005d4c:	b292      	uxth	r2, r2
 8005d4e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d54:	1c9a      	adds	r2, r3, #2
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	3b01      	subs	r3, #1
 8005d64:	b29a      	uxth	r2, r3
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005d72:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005d74:	e023      	b.n	8005dbe <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d76:	f7fb fe3f 	bl	80019f8 <HAL_GetTick>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	69bb      	ldr	r3, [r7, #24]
 8005d7e:	1ad3      	subs	r3, r2, r3
 8005d80:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d803      	bhi.n	8005d8e <HAL_SPI_TransmitReceive+0x3f6>
 8005d86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d8c:	d102      	bne.n	8005d94 <HAL_SPI_TransmitReceive+0x3fc>
 8005d8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d114      	bne.n	8005dbe <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8005d94:	68f8      	ldr	r0, [r7, #12]
 8005d96:	f000 f939 	bl	800600c <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005da0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2201      	movs	r2, #1
 8005dae:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2200      	movs	r2, #0
 8005db6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8005dba:	2303      	movs	r3, #3
 8005dbc:	e121      	b.n	8006002 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005dbe:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	f47f af3b 	bne.w	8005c3c <HAL_SPI_TransmitReceive+0x2a4>
 8005dc6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	f47f af37 	bne.w	8005c3c <HAL_SPI_TransmitReceive+0x2a4>
 8005dce:	e0f2      	b.n	8005fb6 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	695b      	ldr	r3, [r3, #20]
 8005dd6:	f003 0302 	and.w	r3, r3, #2
 8005dda:	2b02      	cmp	r3, #2
 8005ddc:	d121      	bne.n	8005e22 <HAL_SPI_TransmitReceive+0x48a>
 8005dde:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d01e      	beq.n	8005e22 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8005de4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005de6:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8005de8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dea:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d218      	bcs.n	8005e22 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	3320      	adds	r3, #32
 8005dfa:	7812      	ldrb	r2, [r2, #0]
 8005dfc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e02:	1c5a      	adds	r2, r3, #1
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	3b01      	subs	r3, #1
 8005e12:	b29a      	uxth	r2, r3
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005e20:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	695b      	ldr	r3, [r3, #20]
 8005e28:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8005e2a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	f000 80ba 	beq.w	8005fa6 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	695b      	ldr	r3, [r3, #20]
 8005e38:	f003 0301 	and.w	r3, r3, #1
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d11b      	bne.n	8005e78 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e4c:	7812      	ldrb	r2, [r2, #0]
 8005e4e:	b2d2      	uxtb	r2, r2
 8005e50:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e56:	1c5a      	adds	r2, r3, #1
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	3b01      	subs	r3, #1
 8005e66:	b29a      	uxth	r2, r3
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005e74:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005e76:	e096      	b.n	8005fa6 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8005e78:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005e7a:	8bfb      	ldrh	r3, [r7, #30]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d24a      	bcs.n	8005f16 <HAL_SPI_TransmitReceive+0x57e>
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d045      	beq.n	8005f16 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e96:	7812      	ldrb	r2, [r2, #0]
 8005e98:	b2d2      	uxtb	r2, r2
 8005e9a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ea0:	1c5a      	adds	r2, r3, #1
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005eb2:	7812      	ldrb	r2, [r2, #0]
 8005eb4:	b2d2      	uxtb	r2, r2
 8005eb6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ebc:	1c5a      	adds	r2, r3, #1
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ece:	7812      	ldrb	r2, [r2, #0]
 8005ed0:	b2d2      	uxtb	r2, r2
 8005ed2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ed8:	1c5a      	adds	r2, r3, #1
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005eea:	7812      	ldrb	r2, [r2, #0]
 8005eec:	b2d2      	uxtb	r2, r2
 8005eee:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ef4:	1c5a      	adds	r2, r3, #1
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	3b04      	subs	r3, #4
 8005f04:	b29a      	uxth	r2, r3
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005f12:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005f14:	e047      	b.n	8005fa6 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8005f16:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005f18:	2b03      	cmp	r3, #3
 8005f1a:	d820      	bhi.n	8005f5e <HAL_SPI_TransmitReceive+0x5c6>
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d01b      	beq.n	8005f5e <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f32:	7812      	ldrb	r2, [r2, #0]
 8005f34:	b2d2      	uxtb	r2, r2
 8005f36:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f3c:	1c5a      	adds	r2, r3, #1
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	3b01      	subs	r3, #1
 8005f4c:	b29a      	uxth	r2, r3
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005f5a:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005f5c:	e023      	b.n	8005fa6 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f5e:	f7fb fd4b 	bl	80019f8 <HAL_GetTick>
 8005f62:	4602      	mov	r2, r0
 8005f64:	69bb      	ldr	r3, [r7, #24]
 8005f66:	1ad3      	subs	r3, r2, r3
 8005f68:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d803      	bhi.n	8005f76 <HAL_SPI_TransmitReceive+0x5de>
 8005f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f74:	d102      	bne.n	8005f7c <HAL_SPI_TransmitReceive+0x5e4>
 8005f76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d114      	bne.n	8005fa6 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8005f7c:	68f8      	ldr	r0, [r7, #12]
 8005f7e:	f000 f845 	bl	800600c <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f88:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2201      	movs	r2, #1
 8005f96:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8005fa2:	2303      	movs	r3, #3
 8005fa4:	e02d      	b.n	8006002 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005fa6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	f47f af11 	bne.w	8005dd0 <HAL_SPI_TransmitReceive+0x438>
 8005fae:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	f47f af0d 	bne.w	8005dd0 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8005fb6:	69bb      	ldr	r3, [r7, #24]
 8005fb8:	9300      	str	r3, [sp, #0]
 8005fba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	2108      	movs	r1, #8
 8005fc0:	68f8      	ldr	r0, [r7, #12]
 8005fc2:	f000 f8c3 	bl	800614c <SPI_WaitOnFlagUntilTimeout>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d007      	beq.n	8005fdc <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005fd2:	f043 0220 	orr.w	r2, r3, #32
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005fdc:	68f8      	ldr	r0, [r7, #12]
 8005fde:	f000 f815 	bl	800600c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d001      	beq.n	8006000 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e000      	b.n	8006002 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 8006000:	2300      	movs	r3, #0
  }
}
 8006002:	4618      	mov	r0, r3
 8006004:	3730      	adds	r7, #48	@ 0x30
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
 800600a:	bf00      	nop

0800600c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800600c:	b480      	push	{r7}
 800600e:	b085      	sub	sp, #20
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	695b      	ldr	r3, [r3, #20]
 800601a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	699a      	ldr	r2, [r3, #24]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f042 0208 	orr.w	r2, r2, #8
 800602a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	699a      	ldr	r2, [r3, #24]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f042 0210 	orr.w	r2, r2, #16
 800603a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f022 0201 	bic.w	r2, r2, #1
 800604a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	6919      	ldr	r1, [r3, #16]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	4b3c      	ldr	r3, [pc, #240]	@ (8006148 <SPI_CloseTransfer+0x13c>)
 8006058:	400b      	ands	r3, r1
 800605a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	689a      	ldr	r2, [r3, #8]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800606a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006072:	b2db      	uxtb	r3, r3
 8006074:	2b04      	cmp	r3, #4
 8006076:	d014      	beq.n	80060a2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f003 0320 	and.w	r3, r3, #32
 800607e:	2b00      	cmp	r3, #0
 8006080:	d00f      	beq.n	80060a2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006088:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	699a      	ldr	r2, [r3, #24]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f042 0220 	orr.w	r2, r2, #32
 80060a0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	2b03      	cmp	r3, #3
 80060ac:	d014      	beq.n	80060d8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d00f      	beq.n	80060d8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80060be:	f043 0204 	orr.w	r2, r3, #4
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	699a      	ldr	r2, [r3, #24]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80060d6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d00f      	beq.n	8006102 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80060e8:	f043 0201 	orr.w	r2, r3, #1
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	699a      	ldr	r2, [r3, #24]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006100:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006108:	2b00      	cmp	r3, #0
 800610a:	d00f      	beq.n	800612c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006112:	f043 0208 	orr.w	r2, r3, #8
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	699a      	ldr	r2, [r3, #24]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800612a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2200      	movs	r2, #0
 8006130:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800613c:	bf00      	nop
 800613e:	3714      	adds	r7, #20
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr
 8006148:	fffffc90 	.word	0xfffffc90

0800614c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b084      	sub	sp, #16
 8006150:	af00      	add	r7, sp, #0
 8006152:	60f8      	str	r0, [r7, #12]
 8006154:	60b9      	str	r1, [r7, #8]
 8006156:	603b      	str	r3, [r7, #0]
 8006158:	4613      	mov	r3, r2
 800615a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800615c:	e010      	b.n	8006180 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800615e:	f7fb fc4b 	bl	80019f8 <HAL_GetTick>
 8006162:	4602      	mov	r2, r0
 8006164:	69bb      	ldr	r3, [r7, #24]
 8006166:	1ad3      	subs	r3, r2, r3
 8006168:	683a      	ldr	r2, [r7, #0]
 800616a:	429a      	cmp	r2, r3
 800616c:	d803      	bhi.n	8006176 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006174:	d102      	bne.n	800617c <SPI_WaitOnFlagUntilTimeout+0x30>
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d101      	bne.n	8006180 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800617c:	2303      	movs	r3, #3
 800617e:	e00f      	b.n	80061a0 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	695a      	ldr	r2, [r3, #20]
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	4013      	ands	r3, r2
 800618a:	68ba      	ldr	r2, [r7, #8]
 800618c:	429a      	cmp	r2, r3
 800618e:	bf0c      	ite	eq
 8006190:	2301      	moveq	r3, #1
 8006192:	2300      	movne	r3, #0
 8006194:	b2db      	uxtb	r3, r3
 8006196:	461a      	mov	r2, r3
 8006198:	79fb      	ldrb	r3, [r7, #7]
 800619a:	429a      	cmp	r2, r3
 800619c:	d0df      	beq.n	800615e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800619e:	2300      	movs	r3, #0
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3710      	adds	r7, #16
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}

080061a8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b085      	sub	sp, #20
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061b4:	095b      	lsrs	r3, r3, #5
 80061b6:	3301      	adds	r3, #1
 80061b8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	68db      	ldr	r3, [r3, #12]
 80061be:	3301      	adds	r3, #1
 80061c0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	3307      	adds	r3, #7
 80061c6:	08db      	lsrs	r3, r3, #3
 80061c8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	fb02 f303 	mul.w	r3, r2, r3
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3714      	adds	r7, #20
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr

080061de <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061de:	b580      	push	{r7, lr}
 80061e0:	b082      	sub	sp, #8
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d101      	bne.n	80061f0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80061ec:	2301      	movs	r3, #1
 80061ee:	e042      	b.n	8006276 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d106      	bne.n	8006208 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 f83b 	bl	800627e <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2224      	movs	r2, #36	@ 0x24
 800620c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f022 0201 	bic.w	r2, r2, #1
 800621e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006224:	2b00      	cmp	r3, #0
 8006226:	d002      	beq.n	800622e <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f000 fd9b 	bl	8006d64 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 f830 	bl	8006294 <UART_SetConfig>
 8006234:	4603      	mov	r3, r0
 8006236:	2b01      	cmp	r3, #1
 8006238:	d101      	bne.n	800623e <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	e01b      	b.n	8006276 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	685a      	ldr	r2, [r3, #4]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800624c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	689a      	ldr	r2, [r3, #8]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800625c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f042 0201 	orr.w	r2, r2, #1
 800626c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 fe1a 	bl	8006ea8 <UART_CheckIdleState>
 8006274:	4603      	mov	r3, r0
}
 8006276:	4618      	mov	r0, r3
 8006278:	3708      	adds	r7, #8
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}

0800627e <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800627e:	b480      	push	{r7}
 8006280:	b083      	sub	sp, #12
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8006286:	bf00      	nop
 8006288:	370c      	adds	r7, #12
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr
	...

08006294 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006294:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006298:	b092      	sub	sp, #72	@ 0x48
 800629a:	af00      	add	r7, sp, #0
 800629c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800629e:	2300      	movs	r3, #0
 80062a0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	689a      	ldr	r2, [r3, #8]
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	691b      	ldr	r3, [r3, #16]
 80062ac:	431a      	orrs	r2, r3
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	695b      	ldr	r3, [r3, #20]
 80062b2:	431a      	orrs	r2, r3
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	69db      	ldr	r3, [r3, #28]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	4bbe      	ldr	r3, [pc, #760]	@ (80065bc <UART_SetConfig+0x328>)
 80062c4:	4013      	ands	r3, r2
 80062c6:	697a      	ldr	r2, [r7, #20]
 80062c8:	6812      	ldr	r2, [r2, #0]
 80062ca:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80062cc:	430b      	orrs	r3, r1
 80062ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	68da      	ldr	r2, [r3, #12]
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	430a      	orrs	r2, r1
 80062e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	699b      	ldr	r3, [r3, #24]
 80062ea:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4ab3      	ldr	r2, [pc, #716]	@ (80065c0 <UART_SetConfig+0x32c>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d004      	beq.n	8006300 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	6a1b      	ldr	r3, [r3, #32]
 80062fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80062fc:	4313      	orrs	r3, r2
 80062fe:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	689a      	ldr	r2, [r3, #8]
 8006306:	4baf      	ldr	r3, [pc, #700]	@ (80065c4 <UART_SetConfig+0x330>)
 8006308:	4013      	ands	r3, r2
 800630a:	697a      	ldr	r2, [r7, #20]
 800630c:	6812      	ldr	r2, [r2, #0]
 800630e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006310:	430b      	orrs	r3, r1
 8006312:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800631a:	f023 010f 	bic.w	r1, r3, #15
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	430a      	orrs	r2, r1
 8006328:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4aa6      	ldr	r2, [pc, #664]	@ (80065c8 <UART_SetConfig+0x334>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d177      	bne.n	8006424 <UART_SetConfig+0x190>
 8006334:	4ba5      	ldr	r3, [pc, #660]	@ (80065cc <UART_SetConfig+0x338>)
 8006336:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006338:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800633c:	2b28      	cmp	r3, #40	@ 0x28
 800633e:	d86d      	bhi.n	800641c <UART_SetConfig+0x188>
 8006340:	a201      	add	r2, pc, #4	@ (adr r2, 8006348 <UART_SetConfig+0xb4>)
 8006342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006346:	bf00      	nop
 8006348:	080063ed 	.word	0x080063ed
 800634c:	0800641d 	.word	0x0800641d
 8006350:	0800641d 	.word	0x0800641d
 8006354:	0800641d 	.word	0x0800641d
 8006358:	0800641d 	.word	0x0800641d
 800635c:	0800641d 	.word	0x0800641d
 8006360:	0800641d 	.word	0x0800641d
 8006364:	0800641d 	.word	0x0800641d
 8006368:	080063f5 	.word	0x080063f5
 800636c:	0800641d 	.word	0x0800641d
 8006370:	0800641d 	.word	0x0800641d
 8006374:	0800641d 	.word	0x0800641d
 8006378:	0800641d 	.word	0x0800641d
 800637c:	0800641d 	.word	0x0800641d
 8006380:	0800641d 	.word	0x0800641d
 8006384:	0800641d 	.word	0x0800641d
 8006388:	080063fd 	.word	0x080063fd
 800638c:	0800641d 	.word	0x0800641d
 8006390:	0800641d 	.word	0x0800641d
 8006394:	0800641d 	.word	0x0800641d
 8006398:	0800641d 	.word	0x0800641d
 800639c:	0800641d 	.word	0x0800641d
 80063a0:	0800641d 	.word	0x0800641d
 80063a4:	0800641d 	.word	0x0800641d
 80063a8:	08006405 	.word	0x08006405
 80063ac:	0800641d 	.word	0x0800641d
 80063b0:	0800641d 	.word	0x0800641d
 80063b4:	0800641d 	.word	0x0800641d
 80063b8:	0800641d 	.word	0x0800641d
 80063bc:	0800641d 	.word	0x0800641d
 80063c0:	0800641d 	.word	0x0800641d
 80063c4:	0800641d 	.word	0x0800641d
 80063c8:	0800640d 	.word	0x0800640d
 80063cc:	0800641d 	.word	0x0800641d
 80063d0:	0800641d 	.word	0x0800641d
 80063d4:	0800641d 	.word	0x0800641d
 80063d8:	0800641d 	.word	0x0800641d
 80063dc:	0800641d 	.word	0x0800641d
 80063e0:	0800641d 	.word	0x0800641d
 80063e4:	0800641d 	.word	0x0800641d
 80063e8:	08006415 	.word	0x08006415
 80063ec:	2301      	movs	r3, #1
 80063ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063f2:	e222      	b.n	800683a <UART_SetConfig+0x5a6>
 80063f4:	2304      	movs	r3, #4
 80063f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063fa:	e21e      	b.n	800683a <UART_SetConfig+0x5a6>
 80063fc:	2308      	movs	r3, #8
 80063fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006402:	e21a      	b.n	800683a <UART_SetConfig+0x5a6>
 8006404:	2310      	movs	r3, #16
 8006406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800640a:	e216      	b.n	800683a <UART_SetConfig+0x5a6>
 800640c:	2320      	movs	r3, #32
 800640e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006412:	e212      	b.n	800683a <UART_SetConfig+0x5a6>
 8006414:	2340      	movs	r3, #64	@ 0x40
 8006416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800641a:	e20e      	b.n	800683a <UART_SetConfig+0x5a6>
 800641c:	2380      	movs	r3, #128	@ 0x80
 800641e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006422:	e20a      	b.n	800683a <UART_SetConfig+0x5a6>
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a69      	ldr	r2, [pc, #420]	@ (80065d0 <UART_SetConfig+0x33c>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d130      	bne.n	8006490 <UART_SetConfig+0x1fc>
 800642e:	4b67      	ldr	r3, [pc, #412]	@ (80065cc <UART_SetConfig+0x338>)
 8006430:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006432:	f003 0307 	and.w	r3, r3, #7
 8006436:	2b05      	cmp	r3, #5
 8006438:	d826      	bhi.n	8006488 <UART_SetConfig+0x1f4>
 800643a:	a201      	add	r2, pc, #4	@ (adr r2, 8006440 <UART_SetConfig+0x1ac>)
 800643c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006440:	08006459 	.word	0x08006459
 8006444:	08006461 	.word	0x08006461
 8006448:	08006469 	.word	0x08006469
 800644c:	08006471 	.word	0x08006471
 8006450:	08006479 	.word	0x08006479
 8006454:	08006481 	.word	0x08006481
 8006458:	2300      	movs	r3, #0
 800645a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800645e:	e1ec      	b.n	800683a <UART_SetConfig+0x5a6>
 8006460:	2304      	movs	r3, #4
 8006462:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006466:	e1e8      	b.n	800683a <UART_SetConfig+0x5a6>
 8006468:	2308      	movs	r3, #8
 800646a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800646e:	e1e4      	b.n	800683a <UART_SetConfig+0x5a6>
 8006470:	2310      	movs	r3, #16
 8006472:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006476:	e1e0      	b.n	800683a <UART_SetConfig+0x5a6>
 8006478:	2320      	movs	r3, #32
 800647a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800647e:	e1dc      	b.n	800683a <UART_SetConfig+0x5a6>
 8006480:	2340      	movs	r3, #64	@ 0x40
 8006482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006486:	e1d8      	b.n	800683a <UART_SetConfig+0x5a6>
 8006488:	2380      	movs	r3, #128	@ 0x80
 800648a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800648e:	e1d4      	b.n	800683a <UART_SetConfig+0x5a6>
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a4f      	ldr	r2, [pc, #316]	@ (80065d4 <UART_SetConfig+0x340>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d130      	bne.n	80064fc <UART_SetConfig+0x268>
 800649a:	4b4c      	ldr	r3, [pc, #304]	@ (80065cc <UART_SetConfig+0x338>)
 800649c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800649e:	f003 0307 	and.w	r3, r3, #7
 80064a2:	2b05      	cmp	r3, #5
 80064a4:	d826      	bhi.n	80064f4 <UART_SetConfig+0x260>
 80064a6:	a201      	add	r2, pc, #4	@ (adr r2, 80064ac <UART_SetConfig+0x218>)
 80064a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ac:	080064c5 	.word	0x080064c5
 80064b0:	080064cd 	.word	0x080064cd
 80064b4:	080064d5 	.word	0x080064d5
 80064b8:	080064dd 	.word	0x080064dd
 80064bc:	080064e5 	.word	0x080064e5
 80064c0:	080064ed 	.word	0x080064ed
 80064c4:	2300      	movs	r3, #0
 80064c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064ca:	e1b6      	b.n	800683a <UART_SetConfig+0x5a6>
 80064cc:	2304      	movs	r3, #4
 80064ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064d2:	e1b2      	b.n	800683a <UART_SetConfig+0x5a6>
 80064d4:	2308      	movs	r3, #8
 80064d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064da:	e1ae      	b.n	800683a <UART_SetConfig+0x5a6>
 80064dc:	2310      	movs	r3, #16
 80064de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064e2:	e1aa      	b.n	800683a <UART_SetConfig+0x5a6>
 80064e4:	2320      	movs	r3, #32
 80064e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064ea:	e1a6      	b.n	800683a <UART_SetConfig+0x5a6>
 80064ec:	2340      	movs	r3, #64	@ 0x40
 80064ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064f2:	e1a2      	b.n	800683a <UART_SetConfig+0x5a6>
 80064f4:	2380      	movs	r3, #128	@ 0x80
 80064f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064fa:	e19e      	b.n	800683a <UART_SetConfig+0x5a6>
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a35      	ldr	r2, [pc, #212]	@ (80065d8 <UART_SetConfig+0x344>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d130      	bne.n	8006568 <UART_SetConfig+0x2d4>
 8006506:	4b31      	ldr	r3, [pc, #196]	@ (80065cc <UART_SetConfig+0x338>)
 8006508:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800650a:	f003 0307 	and.w	r3, r3, #7
 800650e:	2b05      	cmp	r3, #5
 8006510:	d826      	bhi.n	8006560 <UART_SetConfig+0x2cc>
 8006512:	a201      	add	r2, pc, #4	@ (adr r2, 8006518 <UART_SetConfig+0x284>)
 8006514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006518:	08006531 	.word	0x08006531
 800651c:	08006539 	.word	0x08006539
 8006520:	08006541 	.word	0x08006541
 8006524:	08006549 	.word	0x08006549
 8006528:	08006551 	.word	0x08006551
 800652c:	08006559 	.word	0x08006559
 8006530:	2300      	movs	r3, #0
 8006532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006536:	e180      	b.n	800683a <UART_SetConfig+0x5a6>
 8006538:	2304      	movs	r3, #4
 800653a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800653e:	e17c      	b.n	800683a <UART_SetConfig+0x5a6>
 8006540:	2308      	movs	r3, #8
 8006542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006546:	e178      	b.n	800683a <UART_SetConfig+0x5a6>
 8006548:	2310      	movs	r3, #16
 800654a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800654e:	e174      	b.n	800683a <UART_SetConfig+0x5a6>
 8006550:	2320      	movs	r3, #32
 8006552:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006556:	e170      	b.n	800683a <UART_SetConfig+0x5a6>
 8006558:	2340      	movs	r3, #64	@ 0x40
 800655a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800655e:	e16c      	b.n	800683a <UART_SetConfig+0x5a6>
 8006560:	2380      	movs	r3, #128	@ 0x80
 8006562:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006566:	e168      	b.n	800683a <UART_SetConfig+0x5a6>
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a1b      	ldr	r2, [pc, #108]	@ (80065dc <UART_SetConfig+0x348>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d142      	bne.n	80065f8 <UART_SetConfig+0x364>
 8006572:	4b16      	ldr	r3, [pc, #88]	@ (80065cc <UART_SetConfig+0x338>)
 8006574:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006576:	f003 0307 	and.w	r3, r3, #7
 800657a:	2b05      	cmp	r3, #5
 800657c:	d838      	bhi.n	80065f0 <UART_SetConfig+0x35c>
 800657e:	a201      	add	r2, pc, #4	@ (adr r2, 8006584 <UART_SetConfig+0x2f0>)
 8006580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006584:	0800659d 	.word	0x0800659d
 8006588:	080065a5 	.word	0x080065a5
 800658c:	080065ad 	.word	0x080065ad
 8006590:	080065b5 	.word	0x080065b5
 8006594:	080065e1 	.word	0x080065e1
 8006598:	080065e9 	.word	0x080065e9
 800659c:	2300      	movs	r3, #0
 800659e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065a2:	e14a      	b.n	800683a <UART_SetConfig+0x5a6>
 80065a4:	2304      	movs	r3, #4
 80065a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065aa:	e146      	b.n	800683a <UART_SetConfig+0x5a6>
 80065ac:	2308      	movs	r3, #8
 80065ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065b2:	e142      	b.n	800683a <UART_SetConfig+0x5a6>
 80065b4:	2310      	movs	r3, #16
 80065b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065ba:	e13e      	b.n	800683a <UART_SetConfig+0x5a6>
 80065bc:	cfff69f3 	.word	0xcfff69f3
 80065c0:	58000c00 	.word	0x58000c00
 80065c4:	11fff4ff 	.word	0x11fff4ff
 80065c8:	40011000 	.word	0x40011000
 80065cc:	58024400 	.word	0x58024400
 80065d0:	40004400 	.word	0x40004400
 80065d4:	40004800 	.word	0x40004800
 80065d8:	40004c00 	.word	0x40004c00
 80065dc:	40005000 	.word	0x40005000
 80065e0:	2320      	movs	r3, #32
 80065e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065e6:	e128      	b.n	800683a <UART_SetConfig+0x5a6>
 80065e8:	2340      	movs	r3, #64	@ 0x40
 80065ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065ee:	e124      	b.n	800683a <UART_SetConfig+0x5a6>
 80065f0:	2380      	movs	r3, #128	@ 0x80
 80065f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065f6:	e120      	b.n	800683a <UART_SetConfig+0x5a6>
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4acb      	ldr	r2, [pc, #812]	@ (800692c <UART_SetConfig+0x698>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d176      	bne.n	80066f0 <UART_SetConfig+0x45c>
 8006602:	4bcb      	ldr	r3, [pc, #812]	@ (8006930 <UART_SetConfig+0x69c>)
 8006604:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006606:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800660a:	2b28      	cmp	r3, #40	@ 0x28
 800660c:	d86c      	bhi.n	80066e8 <UART_SetConfig+0x454>
 800660e:	a201      	add	r2, pc, #4	@ (adr r2, 8006614 <UART_SetConfig+0x380>)
 8006610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006614:	080066b9 	.word	0x080066b9
 8006618:	080066e9 	.word	0x080066e9
 800661c:	080066e9 	.word	0x080066e9
 8006620:	080066e9 	.word	0x080066e9
 8006624:	080066e9 	.word	0x080066e9
 8006628:	080066e9 	.word	0x080066e9
 800662c:	080066e9 	.word	0x080066e9
 8006630:	080066e9 	.word	0x080066e9
 8006634:	080066c1 	.word	0x080066c1
 8006638:	080066e9 	.word	0x080066e9
 800663c:	080066e9 	.word	0x080066e9
 8006640:	080066e9 	.word	0x080066e9
 8006644:	080066e9 	.word	0x080066e9
 8006648:	080066e9 	.word	0x080066e9
 800664c:	080066e9 	.word	0x080066e9
 8006650:	080066e9 	.word	0x080066e9
 8006654:	080066c9 	.word	0x080066c9
 8006658:	080066e9 	.word	0x080066e9
 800665c:	080066e9 	.word	0x080066e9
 8006660:	080066e9 	.word	0x080066e9
 8006664:	080066e9 	.word	0x080066e9
 8006668:	080066e9 	.word	0x080066e9
 800666c:	080066e9 	.word	0x080066e9
 8006670:	080066e9 	.word	0x080066e9
 8006674:	080066d1 	.word	0x080066d1
 8006678:	080066e9 	.word	0x080066e9
 800667c:	080066e9 	.word	0x080066e9
 8006680:	080066e9 	.word	0x080066e9
 8006684:	080066e9 	.word	0x080066e9
 8006688:	080066e9 	.word	0x080066e9
 800668c:	080066e9 	.word	0x080066e9
 8006690:	080066e9 	.word	0x080066e9
 8006694:	080066d9 	.word	0x080066d9
 8006698:	080066e9 	.word	0x080066e9
 800669c:	080066e9 	.word	0x080066e9
 80066a0:	080066e9 	.word	0x080066e9
 80066a4:	080066e9 	.word	0x080066e9
 80066a8:	080066e9 	.word	0x080066e9
 80066ac:	080066e9 	.word	0x080066e9
 80066b0:	080066e9 	.word	0x080066e9
 80066b4:	080066e1 	.word	0x080066e1
 80066b8:	2301      	movs	r3, #1
 80066ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066be:	e0bc      	b.n	800683a <UART_SetConfig+0x5a6>
 80066c0:	2304      	movs	r3, #4
 80066c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066c6:	e0b8      	b.n	800683a <UART_SetConfig+0x5a6>
 80066c8:	2308      	movs	r3, #8
 80066ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066ce:	e0b4      	b.n	800683a <UART_SetConfig+0x5a6>
 80066d0:	2310      	movs	r3, #16
 80066d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066d6:	e0b0      	b.n	800683a <UART_SetConfig+0x5a6>
 80066d8:	2320      	movs	r3, #32
 80066da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066de:	e0ac      	b.n	800683a <UART_SetConfig+0x5a6>
 80066e0:	2340      	movs	r3, #64	@ 0x40
 80066e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066e6:	e0a8      	b.n	800683a <UART_SetConfig+0x5a6>
 80066e8:	2380      	movs	r3, #128	@ 0x80
 80066ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066ee:	e0a4      	b.n	800683a <UART_SetConfig+0x5a6>
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a8f      	ldr	r2, [pc, #572]	@ (8006934 <UART_SetConfig+0x6a0>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d130      	bne.n	800675c <UART_SetConfig+0x4c8>
 80066fa:	4b8d      	ldr	r3, [pc, #564]	@ (8006930 <UART_SetConfig+0x69c>)
 80066fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066fe:	f003 0307 	and.w	r3, r3, #7
 8006702:	2b05      	cmp	r3, #5
 8006704:	d826      	bhi.n	8006754 <UART_SetConfig+0x4c0>
 8006706:	a201      	add	r2, pc, #4	@ (adr r2, 800670c <UART_SetConfig+0x478>)
 8006708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800670c:	08006725 	.word	0x08006725
 8006710:	0800672d 	.word	0x0800672d
 8006714:	08006735 	.word	0x08006735
 8006718:	0800673d 	.word	0x0800673d
 800671c:	08006745 	.word	0x08006745
 8006720:	0800674d 	.word	0x0800674d
 8006724:	2300      	movs	r3, #0
 8006726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800672a:	e086      	b.n	800683a <UART_SetConfig+0x5a6>
 800672c:	2304      	movs	r3, #4
 800672e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006732:	e082      	b.n	800683a <UART_SetConfig+0x5a6>
 8006734:	2308      	movs	r3, #8
 8006736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800673a:	e07e      	b.n	800683a <UART_SetConfig+0x5a6>
 800673c:	2310      	movs	r3, #16
 800673e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006742:	e07a      	b.n	800683a <UART_SetConfig+0x5a6>
 8006744:	2320      	movs	r3, #32
 8006746:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800674a:	e076      	b.n	800683a <UART_SetConfig+0x5a6>
 800674c:	2340      	movs	r3, #64	@ 0x40
 800674e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006752:	e072      	b.n	800683a <UART_SetConfig+0x5a6>
 8006754:	2380      	movs	r3, #128	@ 0x80
 8006756:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800675a:	e06e      	b.n	800683a <UART_SetConfig+0x5a6>
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a75      	ldr	r2, [pc, #468]	@ (8006938 <UART_SetConfig+0x6a4>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d130      	bne.n	80067c8 <UART_SetConfig+0x534>
 8006766:	4b72      	ldr	r3, [pc, #456]	@ (8006930 <UART_SetConfig+0x69c>)
 8006768:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800676a:	f003 0307 	and.w	r3, r3, #7
 800676e:	2b05      	cmp	r3, #5
 8006770:	d826      	bhi.n	80067c0 <UART_SetConfig+0x52c>
 8006772:	a201      	add	r2, pc, #4	@ (adr r2, 8006778 <UART_SetConfig+0x4e4>)
 8006774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006778:	08006791 	.word	0x08006791
 800677c:	08006799 	.word	0x08006799
 8006780:	080067a1 	.word	0x080067a1
 8006784:	080067a9 	.word	0x080067a9
 8006788:	080067b1 	.word	0x080067b1
 800678c:	080067b9 	.word	0x080067b9
 8006790:	2300      	movs	r3, #0
 8006792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006796:	e050      	b.n	800683a <UART_SetConfig+0x5a6>
 8006798:	2304      	movs	r3, #4
 800679a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800679e:	e04c      	b.n	800683a <UART_SetConfig+0x5a6>
 80067a0:	2308      	movs	r3, #8
 80067a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067a6:	e048      	b.n	800683a <UART_SetConfig+0x5a6>
 80067a8:	2310      	movs	r3, #16
 80067aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067ae:	e044      	b.n	800683a <UART_SetConfig+0x5a6>
 80067b0:	2320      	movs	r3, #32
 80067b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067b6:	e040      	b.n	800683a <UART_SetConfig+0x5a6>
 80067b8:	2340      	movs	r3, #64	@ 0x40
 80067ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067be:	e03c      	b.n	800683a <UART_SetConfig+0x5a6>
 80067c0:	2380      	movs	r3, #128	@ 0x80
 80067c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067c6:	e038      	b.n	800683a <UART_SetConfig+0x5a6>
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a5b      	ldr	r2, [pc, #364]	@ (800693c <UART_SetConfig+0x6a8>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d130      	bne.n	8006834 <UART_SetConfig+0x5a0>
 80067d2:	4b57      	ldr	r3, [pc, #348]	@ (8006930 <UART_SetConfig+0x69c>)
 80067d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067d6:	f003 0307 	and.w	r3, r3, #7
 80067da:	2b05      	cmp	r3, #5
 80067dc:	d826      	bhi.n	800682c <UART_SetConfig+0x598>
 80067de:	a201      	add	r2, pc, #4	@ (adr r2, 80067e4 <UART_SetConfig+0x550>)
 80067e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067e4:	080067fd 	.word	0x080067fd
 80067e8:	08006805 	.word	0x08006805
 80067ec:	0800680d 	.word	0x0800680d
 80067f0:	08006815 	.word	0x08006815
 80067f4:	0800681d 	.word	0x0800681d
 80067f8:	08006825 	.word	0x08006825
 80067fc:	2302      	movs	r3, #2
 80067fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006802:	e01a      	b.n	800683a <UART_SetConfig+0x5a6>
 8006804:	2304      	movs	r3, #4
 8006806:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800680a:	e016      	b.n	800683a <UART_SetConfig+0x5a6>
 800680c:	2308      	movs	r3, #8
 800680e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006812:	e012      	b.n	800683a <UART_SetConfig+0x5a6>
 8006814:	2310      	movs	r3, #16
 8006816:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800681a:	e00e      	b.n	800683a <UART_SetConfig+0x5a6>
 800681c:	2320      	movs	r3, #32
 800681e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006822:	e00a      	b.n	800683a <UART_SetConfig+0x5a6>
 8006824:	2340      	movs	r3, #64	@ 0x40
 8006826:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800682a:	e006      	b.n	800683a <UART_SetConfig+0x5a6>
 800682c:	2380      	movs	r3, #128	@ 0x80
 800682e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006832:	e002      	b.n	800683a <UART_SetConfig+0x5a6>
 8006834:	2380      	movs	r3, #128	@ 0x80
 8006836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a3f      	ldr	r2, [pc, #252]	@ (800693c <UART_SetConfig+0x6a8>)
 8006840:	4293      	cmp	r3, r2
 8006842:	f040 80f8 	bne.w	8006a36 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006846:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800684a:	2b20      	cmp	r3, #32
 800684c:	dc46      	bgt.n	80068dc <UART_SetConfig+0x648>
 800684e:	2b02      	cmp	r3, #2
 8006850:	f2c0 8082 	blt.w	8006958 <UART_SetConfig+0x6c4>
 8006854:	3b02      	subs	r3, #2
 8006856:	2b1e      	cmp	r3, #30
 8006858:	d87e      	bhi.n	8006958 <UART_SetConfig+0x6c4>
 800685a:	a201      	add	r2, pc, #4	@ (adr r2, 8006860 <UART_SetConfig+0x5cc>)
 800685c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006860:	080068e3 	.word	0x080068e3
 8006864:	08006959 	.word	0x08006959
 8006868:	080068eb 	.word	0x080068eb
 800686c:	08006959 	.word	0x08006959
 8006870:	08006959 	.word	0x08006959
 8006874:	08006959 	.word	0x08006959
 8006878:	080068fb 	.word	0x080068fb
 800687c:	08006959 	.word	0x08006959
 8006880:	08006959 	.word	0x08006959
 8006884:	08006959 	.word	0x08006959
 8006888:	08006959 	.word	0x08006959
 800688c:	08006959 	.word	0x08006959
 8006890:	08006959 	.word	0x08006959
 8006894:	08006959 	.word	0x08006959
 8006898:	0800690b 	.word	0x0800690b
 800689c:	08006959 	.word	0x08006959
 80068a0:	08006959 	.word	0x08006959
 80068a4:	08006959 	.word	0x08006959
 80068a8:	08006959 	.word	0x08006959
 80068ac:	08006959 	.word	0x08006959
 80068b0:	08006959 	.word	0x08006959
 80068b4:	08006959 	.word	0x08006959
 80068b8:	08006959 	.word	0x08006959
 80068bc:	08006959 	.word	0x08006959
 80068c0:	08006959 	.word	0x08006959
 80068c4:	08006959 	.word	0x08006959
 80068c8:	08006959 	.word	0x08006959
 80068cc:	08006959 	.word	0x08006959
 80068d0:	08006959 	.word	0x08006959
 80068d4:	08006959 	.word	0x08006959
 80068d8:	0800694b 	.word	0x0800694b
 80068dc:	2b40      	cmp	r3, #64	@ 0x40
 80068de:	d037      	beq.n	8006950 <UART_SetConfig+0x6bc>
 80068e0:	e03a      	b.n	8006958 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80068e2:	f7fd feb3 	bl	800464c <HAL_RCCEx_GetD3PCLK1Freq>
 80068e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80068e8:	e03c      	b.n	8006964 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80068ee:	4618      	mov	r0, r3
 80068f0:	f7fd fec2 	bl	8004678 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80068f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068f8:	e034      	b.n	8006964 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068fa:	f107 0318 	add.w	r3, r7, #24
 80068fe:	4618      	mov	r0, r3
 8006900:	f7fe f80e 	bl	8004920 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006904:	69fb      	ldr	r3, [r7, #28]
 8006906:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006908:	e02c      	b.n	8006964 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800690a:	4b09      	ldr	r3, [pc, #36]	@ (8006930 <UART_SetConfig+0x69c>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f003 0320 	and.w	r3, r3, #32
 8006912:	2b00      	cmp	r3, #0
 8006914:	d016      	beq.n	8006944 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006916:	4b06      	ldr	r3, [pc, #24]	@ (8006930 <UART_SetConfig+0x69c>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	08db      	lsrs	r3, r3, #3
 800691c:	f003 0303 	and.w	r3, r3, #3
 8006920:	4a07      	ldr	r2, [pc, #28]	@ (8006940 <UART_SetConfig+0x6ac>)
 8006922:	fa22 f303 	lsr.w	r3, r2, r3
 8006926:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006928:	e01c      	b.n	8006964 <UART_SetConfig+0x6d0>
 800692a:	bf00      	nop
 800692c:	40011400 	.word	0x40011400
 8006930:	58024400 	.word	0x58024400
 8006934:	40007800 	.word	0x40007800
 8006938:	40007c00 	.word	0x40007c00
 800693c:	58000c00 	.word	0x58000c00
 8006940:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006944:	4b9d      	ldr	r3, [pc, #628]	@ (8006bbc <UART_SetConfig+0x928>)
 8006946:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006948:	e00c      	b.n	8006964 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800694a:	4b9d      	ldr	r3, [pc, #628]	@ (8006bc0 <UART_SetConfig+0x92c>)
 800694c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800694e:	e009      	b.n	8006964 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006950:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006954:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006956:	e005      	b.n	8006964 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006958:	2300      	movs	r3, #0
 800695a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800695c:	2301      	movs	r3, #1
 800695e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006962:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006964:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006966:	2b00      	cmp	r3, #0
 8006968:	f000 81de 	beq.w	8006d28 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006970:	4a94      	ldr	r2, [pc, #592]	@ (8006bc4 <UART_SetConfig+0x930>)
 8006972:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006976:	461a      	mov	r2, r3
 8006978:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800697a:	fbb3 f3f2 	udiv	r3, r3, r2
 800697e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	685a      	ldr	r2, [r3, #4]
 8006984:	4613      	mov	r3, r2
 8006986:	005b      	lsls	r3, r3, #1
 8006988:	4413      	add	r3, r2
 800698a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800698c:	429a      	cmp	r2, r3
 800698e:	d305      	bcc.n	800699c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006996:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006998:	429a      	cmp	r2, r3
 800699a:	d903      	bls.n	80069a4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800699c:	2301      	movs	r3, #1
 800699e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80069a2:	e1c1      	b.n	8006d28 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069a6:	2200      	movs	r2, #0
 80069a8:	60bb      	str	r3, [r7, #8]
 80069aa:	60fa      	str	r2, [r7, #12]
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069b0:	4a84      	ldr	r2, [pc, #528]	@ (8006bc4 <UART_SetConfig+0x930>)
 80069b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	2200      	movs	r2, #0
 80069ba:	603b      	str	r3, [r7, #0]
 80069bc:	607a      	str	r2, [r7, #4]
 80069be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80069c6:	f7f9 fc87 	bl	80002d8 <__aeabi_uldivmod>
 80069ca:	4602      	mov	r2, r0
 80069cc:	460b      	mov	r3, r1
 80069ce:	4610      	mov	r0, r2
 80069d0:	4619      	mov	r1, r3
 80069d2:	f04f 0200 	mov.w	r2, #0
 80069d6:	f04f 0300 	mov.w	r3, #0
 80069da:	020b      	lsls	r3, r1, #8
 80069dc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80069e0:	0202      	lsls	r2, r0, #8
 80069e2:	6979      	ldr	r1, [r7, #20]
 80069e4:	6849      	ldr	r1, [r1, #4]
 80069e6:	0849      	lsrs	r1, r1, #1
 80069e8:	2000      	movs	r0, #0
 80069ea:	460c      	mov	r4, r1
 80069ec:	4605      	mov	r5, r0
 80069ee:	eb12 0804 	adds.w	r8, r2, r4
 80069f2:	eb43 0905 	adc.w	r9, r3, r5
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	2200      	movs	r2, #0
 80069fc:	469a      	mov	sl, r3
 80069fe:	4693      	mov	fp, r2
 8006a00:	4652      	mov	r2, sl
 8006a02:	465b      	mov	r3, fp
 8006a04:	4640      	mov	r0, r8
 8006a06:	4649      	mov	r1, r9
 8006a08:	f7f9 fc66 	bl	80002d8 <__aeabi_uldivmod>
 8006a0c:	4602      	mov	r2, r0
 8006a0e:	460b      	mov	r3, r1
 8006a10:	4613      	mov	r3, r2
 8006a12:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006a14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a16:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a1a:	d308      	bcc.n	8006a2e <UART_SetConfig+0x79a>
 8006a1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a22:	d204      	bcs.n	8006a2e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006a2a:	60da      	str	r2, [r3, #12]
 8006a2c:	e17c      	b.n	8006d28 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006a34:	e178      	b.n	8006d28 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	69db      	ldr	r3, [r3, #28]
 8006a3a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a3e:	f040 80c5 	bne.w	8006bcc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006a42:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006a46:	2b20      	cmp	r3, #32
 8006a48:	dc48      	bgt.n	8006adc <UART_SetConfig+0x848>
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	db7b      	blt.n	8006b46 <UART_SetConfig+0x8b2>
 8006a4e:	2b20      	cmp	r3, #32
 8006a50:	d879      	bhi.n	8006b46 <UART_SetConfig+0x8b2>
 8006a52:	a201      	add	r2, pc, #4	@ (adr r2, 8006a58 <UART_SetConfig+0x7c4>)
 8006a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a58:	08006ae3 	.word	0x08006ae3
 8006a5c:	08006aeb 	.word	0x08006aeb
 8006a60:	08006b47 	.word	0x08006b47
 8006a64:	08006b47 	.word	0x08006b47
 8006a68:	08006af3 	.word	0x08006af3
 8006a6c:	08006b47 	.word	0x08006b47
 8006a70:	08006b47 	.word	0x08006b47
 8006a74:	08006b47 	.word	0x08006b47
 8006a78:	08006b03 	.word	0x08006b03
 8006a7c:	08006b47 	.word	0x08006b47
 8006a80:	08006b47 	.word	0x08006b47
 8006a84:	08006b47 	.word	0x08006b47
 8006a88:	08006b47 	.word	0x08006b47
 8006a8c:	08006b47 	.word	0x08006b47
 8006a90:	08006b47 	.word	0x08006b47
 8006a94:	08006b47 	.word	0x08006b47
 8006a98:	08006b13 	.word	0x08006b13
 8006a9c:	08006b47 	.word	0x08006b47
 8006aa0:	08006b47 	.word	0x08006b47
 8006aa4:	08006b47 	.word	0x08006b47
 8006aa8:	08006b47 	.word	0x08006b47
 8006aac:	08006b47 	.word	0x08006b47
 8006ab0:	08006b47 	.word	0x08006b47
 8006ab4:	08006b47 	.word	0x08006b47
 8006ab8:	08006b47 	.word	0x08006b47
 8006abc:	08006b47 	.word	0x08006b47
 8006ac0:	08006b47 	.word	0x08006b47
 8006ac4:	08006b47 	.word	0x08006b47
 8006ac8:	08006b47 	.word	0x08006b47
 8006acc:	08006b47 	.word	0x08006b47
 8006ad0:	08006b47 	.word	0x08006b47
 8006ad4:	08006b47 	.word	0x08006b47
 8006ad8:	08006b39 	.word	0x08006b39
 8006adc:	2b40      	cmp	r3, #64	@ 0x40
 8006ade:	d02e      	beq.n	8006b3e <UART_SetConfig+0x8aa>
 8006ae0:	e031      	b.n	8006b46 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ae2:	f7fc fb7d 	bl	80031e0 <HAL_RCC_GetPCLK1Freq>
 8006ae6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006ae8:	e033      	b.n	8006b52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006aea:	f7fc fb8f 	bl	800320c <HAL_RCC_GetPCLK2Freq>
 8006aee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006af0:	e02f      	b.n	8006b52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006af2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006af6:	4618      	mov	r0, r3
 8006af8:	f7fd fdbe 	bl	8004678 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006afc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b00:	e027      	b.n	8006b52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b02:	f107 0318 	add.w	r3, r7, #24
 8006b06:	4618      	mov	r0, r3
 8006b08:	f7fd ff0a 	bl	8004920 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006b0c:	69fb      	ldr	r3, [r7, #28]
 8006b0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b10:	e01f      	b.n	8006b52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b12:	4b2d      	ldr	r3, [pc, #180]	@ (8006bc8 <UART_SetConfig+0x934>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f003 0320 	and.w	r3, r3, #32
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d009      	beq.n	8006b32 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006b1e:	4b2a      	ldr	r3, [pc, #168]	@ (8006bc8 <UART_SetConfig+0x934>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	08db      	lsrs	r3, r3, #3
 8006b24:	f003 0303 	and.w	r3, r3, #3
 8006b28:	4a24      	ldr	r2, [pc, #144]	@ (8006bbc <UART_SetConfig+0x928>)
 8006b2a:	fa22 f303 	lsr.w	r3, r2, r3
 8006b2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006b30:	e00f      	b.n	8006b52 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006b32:	4b22      	ldr	r3, [pc, #136]	@ (8006bbc <UART_SetConfig+0x928>)
 8006b34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b36:	e00c      	b.n	8006b52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006b38:	4b21      	ldr	r3, [pc, #132]	@ (8006bc0 <UART_SetConfig+0x92c>)
 8006b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b3c:	e009      	b.n	8006b52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b44:	e005      	b.n	8006b52 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006b46:	2300      	movs	r3, #0
 8006b48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006b50:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006b52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	f000 80e7 	beq.w	8006d28 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b5e:	4a19      	ldr	r2, [pc, #100]	@ (8006bc4 <UART_SetConfig+0x930>)
 8006b60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b64:	461a      	mov	r2, r3
 8006b66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b68:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b6c:	005a      	lsls	r2, r3, #1
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	085b      	lsrs	r3, r3, #1
 8006b74:	441a      	add	r2, r3
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b7e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b82:	2b0f      	cmp	r3, #15
 8006b84:	d916      	bls.n	8006bb4 <UART_SetConfig+0x920>
 8006b86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b8c:	d212      	bcs.n	8006bb4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	f023 030f 	bic.w	r3, r3, #15
 8006b96:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b9a:	085b      	lsrs	r3, r3, #1
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	f003 0307 	and.w	r3, r3, #7
 8006ba2:	b29a      	uxth	r2, r3
 8006ba4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006bb0:	60da      	str	r2, [r3, #12]
 8006bb2:	e0b9      	b.n	8006d28 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006bba:	e0b5      	b.n	8006d28 <UART_SetConfig+0xa94>
 8006bbc:	03d09000 	.word	0x03d09000
 8006bc0:	003d0900 	.word	0x003d0900
 8006bc4:	08007374 	.word	0x08007374
 8006bc8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006bcc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006bd0:	2b20      	cmp	r3, #32
 8006bd2:	dc49      	bgt.n	8006c68 <UART_SetConfig+0x9d4>
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	db7c      	blt.n	8006cd2 <UART_SetConfig+0xa3e>
 8006bd8:	2b20      	cmp	r3, #32
 8006bda:	d87a      	bhi.n	8006cd2 <UART_SetConfig+0xa3e>
 8006bdc:	a201      	add	r2, pc, #4	@ (adr r2, 8006be4 <UART_SetConfig+0x950>)
 8006bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be2:	bf00      	nop
 8006be4:	08006c6f 	.word	0x08006c6f
 8006be8:	08006c77 	.word	0x08006c77
 8006bec:	08006cd3 	.word	0x08006cd3
 8006bf0:	08006cd3 	.word	0x08006cd3
 8006bf4:	08006c7f 	.word	0x08006c7f
 8006bf8:	08006cd3 	.word	0x08006cd3
 8006bfc:	08006cd3 	.word	0x08006cd3
 8006c00:	08006cd3 	.word	0x08006cd3
 8006c04:	08006c8f 	.word	0x08006c8f
 8006c08:	08006cd3 	.word	0x08006cd3
 8006c0c:	08006cd3 	.word	0x08006cd3
 8006c10:	08006cd3 	.word	0x08006cd3
 8006c14:	08006cd3 	.word	0x08006cd3
 8006c18:	08006cd3 	.word	0x08006cd3
 8006c1c:	08006cd3 	.word	0x08006cd3
 8006c20:	08006cd3 	.word	0x08006cd3
 8006c24:	08006c9f 	.word	0x08006c9f
 8006c28:	08006cd3 	.word	0x08006cd3
 8006c2c:	08006cd3 	.word	0x08006cd3
 8006c30:	08006cd3 	.word	0x08006cd3
 8006c34:	08006cd3 	.word	0x08006cd3
 8006c38:	08006cd3 	.word	0x08006cd3
 8006c3c:	08006cd3 	.word	0x08006cd3
 8006c40:	08006cd3 	.word	0x08006cd3
 8006c44:	08006cd3 	.word	0x08006cd3
 8006c48:	08006cd3 	.word	0x08006cd3
 8006c4c:	08006cd3 	.word	0x08006cd3
 8006c50:	08006cd3 	.word	0x08006cd3
 8006c54:	08006cd3 	.word	0x08006cd3
 8006c58:	08006cd3 	.word	0x08006cd3
 8006c5c:	08006cd3 	.word	0x08006cd3
 8006c60:	08006cd3 	.word	0x08006cd3
 8006c64:	08006cc5 	.word	0x08006cc5
 8006c68:	2b40      	cmp	r3, #64	@ 0x40
 8006c6a:	d02e      	beq.n	8006cca <UART_SetConfig+0xa36>
 8006c6c:	e031      	b.n	8006cd2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c6e:	f7fc fab7 	bl	80031e0 <HAL_RCC_GetPCLK1Freq>
 8006c72:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006c74:	e033      	b.n	8006cde <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c76:	f7fc fac9 	bl	800320c <HAL_RCC_GetPCLK2Freq>
 8006c7a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006c7c:	e02f      	b.n	8006cde <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006c82:	4618      	mov	r0, r3
 8006c84:	f7fd fcf8 	bl	8004678 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c8c:	e027      	b.n	8006cde <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c8e:	f107 0318 	add.w	r3, r7, #24
 8006c92:	4618      	mov	r0, r3
 8006c94:	f7fd fe44 	bl	8004920 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006c98:	69fb      	ldr	r3, [r7, #28]
 8006c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c9c:	e01f      	b.n	8006cde <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c9e:	4b2d      	ldr	r3, [pc, #180]	@ (8006d54 <UART_SetConfig+0xac0>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f003 0320 	and.w	r3, r3, #32
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d009      	beq.n	8006cbe <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006caa:	4b2a      	ldr	r3, [pc, #168]	@ (8006d54 <UART_SetConfig+0xac0>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	08db      	lsrs	r3, r3, #3
 8006cb0:	f003 0303 	and.w	r3, r3, #3
 8006cb4:	4a28      	ldr	r2, [pc, #160]	@ (8006d58 <UART_SetConfig+0xac4>)
 8006cb6:	fa22 f303 	lsr.w	r3, r2, r3
 8006cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006cbc:	e00f      	b.n	8006cde <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006cbe:	4b26      	ldr	r3, [pc, #152]	@ (8006d58 <UART_SetConfig+0xac4>)
 8006cc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cc2:	e00c      	b.n	8006cde <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006cc4:	4b25      	ldr	r3, [pc, #148]	@ (8006d5c <UART_SetConfig+0xac8>)
 8006cc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cc8:	e009      	b.n	8006cde <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cd0:	e005      	b.n	8006cde <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006cdc:	bf00      	nop
    }

    if (pclk != 0U)
 8006cde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d021      	beq.n	8006d28 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ce8:	4a1d      	ldr	r2, [pc, #116]	@ (8006d60 <UART_SetConfig+0xacc>)
 8006cea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006cee:	461a      	mov	r2, r3
 8006cf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cf2:	fbb3 f2f2 	udiv	r2, r3, r2
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	085b      	lsrs	r3, r3, #1
 8006cfc:	441a      	add	r2, r3
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d06:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d0a:	2b0f      	cmp	r3, #15
 8006d0c:	d909      	bls.n	8006d22 <UART_SetConfig+0xa8e>
 8006d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d14:	d205      	bcs.n	8006d22 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006d16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d18:	b29a      	uxth	r2, r3
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	60da      	str	r2, [r3, #12]
 8006d20:	e002      	b.n	8006d28 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006d22:	2301      	movs	r3, #1
 8006d24:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	2201      	movs	r2, #1
 8006d34:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	2200      	movs	r2, #0
 8006d42:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006d44:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3748      	adds	r7, #72	@ 0x48
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d52:	bf00      	nop
 8006d54:	58024400 	.word	0x58024400
 8006d58:	03d09000 	.word	0x03d09000
 8006d5c:	003d0900 	.word	0x003d0900
 8006d60:	08007374 	.word	0x08007374

08006d64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b083      	sub	sp, #12
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d70:	f003 0308 	and.w	r3, r3, #8
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d00a      	beq.n	8006d8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	430a      	orrs	r2, r1
 8006d8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d92:	f003 0301 	and.w	r3, r3, #1
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d00a      	beq.n	8006db0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	430a      	orrs	r2, r1
 8006dae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006db4:	f003 0302 	and.w	r3, r3, #2
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d00a      	beq.n	8006dd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	430a      	orrs	r2, r1
 8006dd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dd6:	f003 0304 	and.w	r3, r3, #4
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d00a      	beq.n	8006df4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	430a      	orrs	r2, r1
 8006df2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006df8:	f003 0310 	and.w	r3, r3, #16
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d00a      	beq.n	8006e16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	430a      	orrs	r2, r1
 8006e14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e1a:	f003 0320 	and.w	r3, r3, #32
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d00a      	beq.n	8006e38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	689b      	ldr	r3, [r3, #8]
 8006e28:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	430a      	orrs	r2, r1
 8006e36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d01a      	beq.n	8006e7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	430a      	orrs	r2, r1
 8006e58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e62:	d10a      	bne.n	8006e7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	430a      	orrs	r2, r1
 8006e78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d00a      	beq.n	8006e9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	430a      	orrs	r2, r1
 8006e9a:	605a      	str	r2, [r3, #4]
  }
}
 8006e9c:	bf00      	nop
 8006e9e:	370c      	adds	r7, #12
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr

08006ea8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b098      	sub	sp, #96	@ 0x60
 8006eac:	af02      	add	r7, sp, #8
 8006eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006eb8:	f7fa fd9e 	bl	80019f8 <HAL_GetTick>
 8006ebc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 0308 	and.w	r3, r3, #8
 8006ec8:	2b08      	cmp	r3, #8
 8006eca:	d12f      	bne.n	8006f2c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ecc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006ed0:	9300      	str	r3, [sp, #0]
 8006ed2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 f88e 	bl	8006ffc <UART_WaitOnFlagUntilTimeout>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d022      	beq.n	8006f2c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eee:	e853 3f00 	ldrex	r3, [r3]
 8006ef2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006ef4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ef6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006efa:	653b      	str	r3, [r7, #80]	@ 0x50
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	461a      	mov	r2, r3
 8006f02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f04:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f06:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f08:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006f0a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f0c:	e841 2300 	strex	r3, r2, [r1]
 8006f10:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006f12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d1e6      	bne.n	8006ee6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2220      	movs	r2, #32
 8006f1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2200      	movs	r2, #0
 8006f24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f28:	2303      	movs	r3, #3
 8006f2a:	e063      	b.n	8006ff4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f003 0304 	and.w	r3, r3, #4
 8006f36:	2b04      	cmp	r3, #4
 8006f38:	d149      	bne.n	8006fce <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f3a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006f3e:	9300      	str	r3, [sp, #0]
 8006f40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f42:	2200      	movs	r2, #0
 8006f44:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f000 f857 	bl	8006ffc <UART_WaitOnFlagUntilTimeout>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d03c      	beq.n	8006fce <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f5c:	e853 3f00 	ldrex	r3, [r3]
 8006f60:	623b      	str	r3, [r7, #32]
   return(result);
 8006f62:	6a3b      	ldr	r3, [r7, #32]
 8006f64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	461a      	mov	r2, r3
 8006f70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f72:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f74:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f7a:	e841 2300 	strex	r3, r2, [r1]
 8006f7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d1e6      	bne.n	8006f54 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	3308      	adds	r3, #8
 8006f8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	e853 3f00 	ldrex	r3, [r3]
 8006f94:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f023 0301 	bic.w	r3, r3, #1
 8006f9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	3308      	adds	r3, #8
 8006fa4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006fa6:	61fa      	str	r2, [r7, #28]
 8006fa8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006faa:	69b9      	ldr	r1, [r7, #24]
 8006fac:	69fa      	ldr	r2, [r7, #28]
 8006fae:	e841 2300 	strex	r3, r2, [r1]
 8006fb2:	617b      	str	r3, [r7, #20]
   return(result);
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d1e5      	bne.n	8006f86 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2220      	movs	r2, #32
 8006fbe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fca:	2303      	movs	r3, #3
 8006fcc:	e012      	b.n	8006ff4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2220      	movs	r2, #32
 8006fd2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2220      	movs	r2, #32
 8006fda:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006ff2:	2300      	movs	r3, #0
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3758      	adds	r7, #88	@ 0x58
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}

08006ffc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
 8007002:	60f8      	str	r0, [r7, #12]
 8007004:	60b9      	str	r1, [r7, #8]
 8007006:	603b      	str	r3, [r7, #0]
 8007008:	4613      	mov	r3, r2
 800700a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800700c:	e04f      	b.n	80070ae <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800700e:	69bb      	ldr	r3, [r7, #24]
 8007010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007014:	d04b      	beq.n	80070ae <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007016:	f7fa fcef 	bl	80019f8 <HAL_GetTick>
 800701a:	4602      	mov	r2, r0
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	1ad3      	subs	r3, r2, r3
 8007020:	69ba      	ldr	r2, [r7, #24]
 8007022:	429a      	cmp	r2, r3
 8007024:	d302      	bcc.n	800702c <UART_WaitOnFlagUntilTimeout+0x30>
 8007026:	69bb      	ldr	r3, [r7, #24]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d101      	bne.n	8007030 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800702c:	2303      	movs	r3, #3
 800702e:	e04e      	b.n	80070ce <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f003 0304 	and.w	r3, r3, #4
 800703a:	2b00      	cmp	r3, #0
 800703c:	d037      	beq.n	80070ae <UART_WaitOnFlagUntilTimeout+0xb2>
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	2b80      	cmp	r3, #128	@ 0x80
 8007042:	d034      	beq.n	80070ae <UART_WaitOnFlagUntilTimeout+0xb2>
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	2b40      	cmp	r3, #64	@ 0x40
 8007048:	d031      	beq.n	80070ae <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	69db      	ldr	r3, [r3, #28]
 8007050:	f003 0308 	and.w	r3, r3, #8
 8007054:	2b08      	cmp	r3, #8
 8007056:	d110      	bne.n	800707a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	2208      	movs	r2, #8
 800705e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007060:	68f8      	ldr	r0, [r7, #12]
 8007062:	f000 f839 	bl	80070d8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2208      	movs	r2, #8
 800706a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2200      	movs	r2, #0
 8007072:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007076:	2301      	movs	r3, #1
 8007078:	e029      	b.n	80070ce <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	69db      	ldr	r3, [r3, #28]
 8007080:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007084:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007088:	d111      	bne.n	80070ae <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007092:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007094:	68f8      	ldr	r0, [r7, #12]
 8007096:	f000 f81f 	bl	80070d8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2220      	movs	r2, #32
 800709e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2200      	movs	r2, #0
 80070a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80070aa:	2303      	movs	r3, #3
 80070ac:	e00f      	b.n	80070ce <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	69da      	ldr	r2, [r3, #28]
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	4013      	ands	r3, r2
 80070b8:	68ba      	ldr	r2, [r7, #8]
 80070ba:	429a      	cmp	r2, r3
 80070bc:	bf0c      	ite	eq
 80070be:	2301      	moveq	r3, #1
 80070c0:	2300      	movne	r3, #0
 80070c2:	b2db      	uxtb	r3, r3
 80070c4:	461a      	mov	r2, r3
 80070c6:	79fb      	ldrb	r3, [r7, #7]
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d0a0      	beq.n	800700e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80070cc:	2300      	movs	r3, #0
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3710      	adds	r7, #16
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}
	...

080070d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80070d8:	b480      	push	{r7}
 80070da:	b095      	sub	sp, #84	@ 0x54
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070e8:	e853 3f00 	ldrex	r3, [r3]
 80070ec:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80070ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80070f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	461a      	mov	r2, r3
 80070fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070fe:	643b      	str	r3, [r7, #64]	@ 0x40
 8007100:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007102:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007104:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007106:	e841 2300 	strex	r3, r2, [r1]
 800710a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800710c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800710e:	2b00      	cmp	r3, #0
 8007110:	d1e6      	bne.n	80070e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	3308      	adds	r3, #8
 8007118:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800711a:	6a3b      	ldr	r3, [r7, #32]
 800711c:	e853 3f00 	ldrex	r3, [r3]
 8007120:	61fb      	str	r3, [r7, #28]
   return(result);
 8007122:	69fa      	ldr	r2, [r7, #28]
 8007124:	4b1e      	ldr	r3, [pc, #120]	@ (80071a0 <UART_EndRxTransfer+0xc8>)
 8007126:	4013      	ands	r3, r2
 8007128:	64bb      	str	r3, [r7, #72]	@ 0x48
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	3308      	adds	r3, #8
 8007130:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007132:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007134:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007136:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007138:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800713a:	e841 2300 	strex	r3, r2, [r1]
 800713e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007142:	2b00      	cmp	r3, #0
 8007144:	d1e5      	bne.n	8007112 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800714a:	2b01      	cmp	r3, #1
 800714c:	d118      	bne.n	8007180 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	e853 3f00 	ldrex	r3, [r3]
 800715a:	60bb      	str	r3, [r7, #8]
   return(result);
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	f023 0310 	bic.w	r3, r3, #16
 8007162:	647b      	str	r3, [r7, #68]	@ 0x44
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	461a      	mov	r2, r3
 800716a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800716c:	61bb      	str	r3, [r7, #24]
 800716e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007170:	6979      	ldr	r1, [r7, #20]
 8007172:	69ba      	ldr	r2, [r7, #24]
 8007174:	e841 2300 	strex	r3, r2, [r1]
 8007178:	613b      	str	r3, [r7, #16]
   return(result);
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d1e6      	bne.n	800714e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2220      	movs	r2, #32
 8007184:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2200      	movs	r2, #0
 800718c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2200      	movs	r2, #0
 8007192:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007194:	bf00      	nop
 8007196:	3754      	adds	r7, #84	@ 0x54
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr
 80071a0:	effffffe 	.word	0xeffffffe

080071a4 <memset>:
 80071a4:	4402      	add	r2, r0
 80071a6:	4603      	mov	r3, r0
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d100      	bne.n	80071ae <memset+0xa>
 80071ac:	4770      	bx	lr
 80071ae:	f803 1b01 	strb.w	r1, [r3], #1
 80071b2:	e7f9      	b.n	80071a8 <memset+0x4>

080071b4 <__libc_init_array>:
 80071b4:	b570      	push	{r4, r5, r6, lr}
 80071b6:	4d0d      	ldr	r5, [pc, #52]	@ (80071ec <__libc_init_array+0x38>)
 80071b8:	4c0d      	ldr	r4, [pc, #52]	@ (80071f0 <__libc_init_array+0x3c>)
 80071ba:	1b64      	subs	r4, r4, r5
 80071bc:	10a4      	asrs	r4, r4, #2
 80071be:	2600      	movs	r6, #0
 80071c0:	42a6      	cmp	r6, r4
 80071c2:	d109      	bne.n	80071d8 <__libc_init_array+0x24>
 80071c4:	4d0b      	ldr	r5, [pc, #44]	@ (80071f4 <__libc_init_array+0x40>)
 80071c6:	4c0c      	ldr	r4, [pc, #48]	@ (80071f8 <__libc_init_array+0x44>)
 80071c8:	f000 f818 	bl	80071fc <_init>
 80071cc:	1b64      	subs	r4, r4, r5
 80071ce:	10a4      	asrs	r4, r4, #2
 80071d0:	2600      	movs	r6, #0
 80071d2:	42a6      	cmp	r6, r4
 80071d4:	d105      	bne.n	80071e2 <__libc_init_array+0x2e>
 80071d6:	bd70      	pop	{r4, r5, r6, pc}
 80071d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80071dc:	4798      	blx	r3
 80071de:	3601      	adds	r6, #1
 80071e0:	e7ee      	b.n	80071c0 <__libc_init_array+0xc>
 80071e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80071e6:	4798      	blx	r3
 80071e8:	3601      	adds	r6, #1
 80071ea:	e7f2      	b.n	80071d2 <__libc_init_array+0x1e>
 80071ec:	08007394 	.word	0x08007394
 80071f0:	08007394 	.word	0x08007394
 80071f4:	08007394 	.word	0x08007394
 80071f8:	08007398 	.word	0x08007398

080071fc <_init>:
 80071fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071fe:	bf00      	nop
 8007200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007202:	bc08      	pop	{r3}
 8007204:	469e      	mov	lr, r3
 8007206:	4770      	bx	lr

08007208 <_fini>:
 8007208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800720a:	bf00      	nop
 800720c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800720e:	bc08      	pop	{r3}
 8007210:	469e      	mov	lr, r3
 8007212:	4770      	bx	lr
